
GettingStarted.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bb4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001c74  08001c74  00011c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001cd0  08001cd0  00011cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001cd4  08001cd4  00011cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000090  20000004  08001cdc  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000094  08001cdc  00020094  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008e0a  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000143f  00000000  00000000  00028e36  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000508  00000000  00000000  0002a278  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000470  00000000  00000000  0002a780  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000027ff  00000000  00000000  0002abf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001b6d  00000000  00000000  0002d3ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002ef5c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000107c  00000000  00000000  0002efd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001c5c 	.word	0x08001c5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001c5c 	.word	0x08001c5c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f001 fc01 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f000 ff20 	bl	8001094 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8e8 	bl	8000438 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8cb 	bl	800040c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000020 	.word	0x20000020

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000020 	.word	0x20000020

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d3f7      	bcc.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b5b0      	push	{r4, r5, r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b7f      	cmp	r3, #127	; 0x7f
 80002fc:	d932      	bls.n	8000364 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fe:	4c2f      	ldr	r4, [pc, #188]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	001a      	movs	r2, r3
 8000306:	230f      	movs	r3, #15
 8000308:	4013      	ands	r3, r2
 800030a:	3b08      	subs	r3, #8
 800030c:	0899      	lsrs	r1, r3, #2
 800030e:	4a2b      	ldr	r2, [pc, #172]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000310:	1dfb      	adds	r3, r7, #7
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	0018      	movs	r0, r3
 8000316:	230f      	movs	r3, #15
 8000318:	4003      	ands	r3, r0
 800031a:	3b08      	subs	r3, #8
 800031c:	089b      	lsrs	r3, r3, #2
 800031e:	3306      	adds	r3, #6
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	18d3      	adds	r3, r2, r3
 8000324:	3304      	adds	r3, #4
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	1dfa      	adds	r2, r7, #7
 800032a:	7812      	ldrb	r2, [r2, #0]
 800032c:	0010      	movs	r0, r2
 800032e:	2203      	movs	r2, #3
 8000330:	4002      	ands	r2, r0
 8000332:	00d2      	lsls	r2, r2, #3
 8000334:	20ff      	movs	r0, #255	; 0xff
 8000336:	4090      	lsls	r0, r2
 8000338:	0002      	movs	r2, r0
 800033a:	43d2      	mvns	r2, r2
 800033c:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	019b      	lsls	r3, r3, #6
 8000342:	20ff      	movs	r0, #255	; 0xff
 8000344:	4018      	ands	r0, r3
 8000346:	1dfb      	adds	r3, r7, #7
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	001d      	movs	r5, r3
 800034c:	2303      	movs	r3, #3
 800034e:	402b      	ands	r3, r5
 8000350:	00db      	lsls	r3, r3, #3
 8000352:	4098      	lsls	r0, r3
 8000354:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000356:	431a      	orrs	r2, r3
 8000358:	1d8b      	adds	r3, r1, #6
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	18e3      	adds	r3, r4, r3
 800035e:	3304      	adds	r3, #4
 8000360:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000362:	e027      	b.n	80003b4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000364:	4c16      	ldr	r4, [pc, #88]	; (80003c0 <NVIC_SetPriority+0xd8>)
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	b25b      	sxtb	r3, r3
 800036c:	089b      	lsrs	r3, r3, #2
 800036e:	4914      	ldr	r1, [pc, #80]	; (80003c0 <NVIC_SetPriority+0xd8>)
 8000370:	1dfa      	adds	r2, r7, #7
 8000372:	7812      	ldrb	r2, [r2, #0]
 8000374:	b252      	sxtb	r2, r2
 8000376:	0892      	lsrs	r2, r2, #2
 8000378:	32c0      	adds	r2, #192	; 0xc0
 800037a:	0092      	lsls	r2, r2, #2
 800037c:	5852      	ldr	r2, [r2, r1]
 800037e:	1df9      	adds	r1, r7, #7
 8000380:	7809      	ldrb	r1, [r1, #0]
 8000382:	0008      	movs	r0, r1
 8000384:	2103      	movs	r1, #3
 8000386:	4001      	ands	r1, r0
 8000388:	00c9      	lsls	r1, r1, #3
 800038a:	20ff      	movs	r0, #255	; 0xff
 800038c:	4088      	lsls	r0, r1
 800038e:	0001      	movs	r1, r0
 8000390:	43c9      	mvns	r1, r1
 8000392:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000394:	683a      	ldr	r2, [r7, #0]
 8000396:	0192      	lsls	r2, r2, #6
 8000398:	20ff      	movs	r0, #255	; 0xff
 800039a:	4010      	ands	r0, r2
 800039c:	1dfa      	adds	r2, r7, #7
 800039e:	7812      	ldrb	r2, [r2, #0]
 80003a0:	0015      	movs	r5, r2
 80003a2:	2203      	movs	r2, #3
 80003a4:	402a      	ands	r2, r5
 80003a6:	00d2      	lsls	r2, r2, #3
 80003a8:	4090      	lsls	r0, r2
 80003aa:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ac:	430a      	orrs	r2, r1
 80003ae:	33c0      	adds	r3, #192	; 0xc0
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	511a      	str	r2, [r3, r4]
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b002      	add	sp, #8
 80003ba:	bdb0      	pop	{r4, r5, r7, pc}
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	e000e100 	.word	0xe000e100

080003c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <SysTick_Config+0x40>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d901      	bls.n	80003da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003d6:	2301      	movs	r3, #1
 80003d8:	e010      	b.n	80003fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <SysTick_Config+0x44>)
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	3a01      	subs	r2, #1
 80003e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e2:	2301      	movs	r3, #1
 80003e4:	425b      	negs	r3, r3
 80003e6:	2103      	movs	r1, #3
 80003e8:	0018      	movs	r0, r3
 80003ea:	f7ff ff7d 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <SysTick_Config+0x44>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <SysTick_Config+0x44>)
 80003f6:	2207      	movs	r2, #7
 80003f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	0018      	movs	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	b002      	add	sp, #8
 8000402:	bd80      	pop	{r7, pc}
 8000404:	00ffffff 	.word	0x00ffffff
 8000408:	e000e010 	.word	0xe000e010

0800040c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	60b9      	str	r1, [r7, #8]
 8000414:	607a      	str	r2, [r7, #4]
 8000416:	230f      	movs	r3, #15
 8000418:	18fb      	adds	r3, r7, r3
 800041a:	1c02      	adds	r2, r0, #0
 800041c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800041e:	68ba      	ldr	r2, [r7, #8]
 8000420:	230f      	movs	r3, #15
 8000422:	18fb      	adds	r3, r7, r3
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	b25b      	sxtb	r3, r3
 8000428:	0011      	movs	r1, r2
 800042a:	0018      	movs	r0, r3
 800042c:	f7ff ff5c 	bl	80002e8 <NVIC_SetPriority>
}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	b004      	add	sp, #16
 8000436:	bd80      	pop	{r7, pc}

08000438 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	0018      	movs	r0, r3
 8000444:	f7ff ffbe 	bl	80003c4 <SysTick_Config>
 8000448:	0003      	movs	r3, r0
}
 800044a:	0018      	movs	r0, r3
 800044c:	46bd      	mov	sp, r7
 800044e:	b002      	add	sp, #8
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2b04      	cmp	r3, #4
 8000460:	d106      	bne.n	8000470 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000464:	4a07      	ldr	r2, [pc, #28]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000466:	6812      	ldr	r2, [r2, #0]
 8000468:	2104      	movs	r1, #4
 800046a:	430a      	orrs	r2, r1
 800046c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800046e:	e005      	b.n	800047c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000470:	4b04      	ldr	r3, [pc, #16]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000472:	4a04      	ldr	r2, [pc, #16]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000474:	6812      	ldr	r2, [r2, #0]
 8000476:	2104      	movs	r1, #4
 8000478:	438a      	bics	r2, r1
 800047a:	601a      	str	r2, [r3, #0]
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	b002      	add	sp, #8
 8000482:	bd80      	pop	{r7, pc}
 8000484:	e000e010 	.word	0xe000e010

08000488 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800048c:	f000 f803 	bl	8000496 <HAL_SYSTICK_Callback>
}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004b2:	2300      	movs	r3, #0
 80004b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004b6:	e14f      	b.n	8000758 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2101      	movs	r1, #1
 80004be:	697a      	ldr	r2, [r7, #20]
 80004c0:	4091      	lsls	r1, r2
 80004c2:	000a      	movs	r2, r1
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d100      	bne.n	80004d0 <HAL_GPIO_Init+0x30>
 80004ce:	e140      	b.n	8000752 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	2b02      	cmp	r3, #2
 80004d6:	d003      	beq.n	80004e0 <HAL_GPIO_Init+0x40>
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	2b12      	cmp	r3, #18
 80004de:	d123      	bne.n	8000528 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	08da      	lsrs	r2, r3, #3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	3208      	adds	r2, #8
 80004e8:	0092      	lsls	r2, r2, #2
 80004ea:	58d3      	ldr	r3, [r2, r3]
 80004ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	2207      	movs	r2, #7
 80004f2:	4013      	ands	r3, r2
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	220f      	movs	r2, #15
 80004f8:	409a      	lsls	r2, r3
 80004fa:	0013      	movs	r3, r2
 80004fc:	43da      	mvns	r2, r3
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	4013      	ands	r3, r2
 8000502:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	691a      	ldr	r2, [r3, #16]
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	2107      	movs	r1, #7
 800050c:	400b      	ands	r3, r1
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	409a      	lsls	r2, r3
 8000512:	0013      	movs	r3, r2
 8000514:	693a      	ldr	r2, [r7, #16]
 8000516:	4313      	orrs	r3, r2
 8000518:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	08da      	lsrs	r2, r3, #3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3208      	adds	r2, #8
 8000522:	0092      	lsls	r2, r2, #2
 8000524:	6939      	ldr	r1, [r7, #16]
 8000526:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	2203      	movs	r2, #3
 8000534:	409a      	lsls	r2, r3
 8000536:	0013      	movs	r3, r2
 8000538:	43da      	mvns	r2, r3
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	4013      	ands	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	2203      	movs	r2, #3
 8000546:	401a      	ands	r2, r3
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	409a      	lsls	r2, r3
 800054e:	0013      	movs	r3, r2
 8000550:	693a      	ldr	r2, [r7, #16]
 8000552:	4313      	orrs	r3, r2
 8000554:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	693a      	ldr	r2, [r7, #16]
 800055a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d00b      	beq.n	800057c <HAL_GPIO_Init+0xdc>
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d007      	beq.n	800057c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000570:	2b11      	cmp	r3, #17
 8000572:	d003      	beq.n	800057c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	2b12      	cmp	r3, #18
 800057a:	d130      	bne.n	80005de <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	2203      	movs	r2, #3
 8000588:	409a      	lsls	r2, r3
 800058a:	0013      	movs	r3, r2
 800058c:	43da      	mvns	r2, r3
 800058e:	693b      	ldr	r3, [r7, #16]
 8000590:	4013      	ands	r3, r2
 8000592:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	68da      	ldr	r2, [r3, #12]
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	409a      	lsls	r2, r3
 800059e:	0013      	movs	r3, r2
 80005a0:	693a      	ldr	r2, [r7, #16]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	693a      	ldr	r2, [r7, #16]
 80005aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80005b2:	2201      	movs	r2, #1
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	409a      	lsls	r2, r3
 80005b8:	0013      	movs	r3, r2
 80005ba:	43da      	mvns	r2, r3
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	4013      	ands	r3, r2
 80005c0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	091b      	lsrs	r3, r3, #4
 80005c8:	2201      	movs	r2, #1
 80005ca:	401a      	ands	r2, r3
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	409a      	lsls	r2, r3
 80005d0:	0013      	movs	r3, r2
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	2203      	movs	r2, #3
 80005ea:	409a      	lsls	r2, r3
 80005ec:	0013      	movs	r3, r2
 80005ee:	43da      	mvns	r2, r3
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	4013      	ands	r3, r2
 80005f4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	689a      	ldr	r2, [r3, #8]
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	409a      	lsls	r2, r3
 8000600:	0013      	movs	r3, r2
 8000602:	693a      	ldr	r2, [r7, #16]
 8000604:	4313      	orrs	r3, r2
 8000606:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	055b      	lsls	r3, r3, #21
 8000616:	4013      	ands	r3, r2
 8000618:	d100      	bne.n	800061c <HAL_GPIO_Init+0x17c>
 800061a:	e09a      	b.n	8000752 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061c:	4b54      	ldr	r3, [pc, #336]	; (8000770 <HAL_GPIO_Init+0x2d0>)
 800061e:	4a54      	ldr	r2, [pc, #336]	; (8000770 <HAL_GPIO_Init+0x2d0>)
 8000620:	6992      	ldr	r2, [r2, #24]
 8000622:	2101      	movs	r1, #1
 8000624:	430a      	orrs	r2, r1
 8000626:	619a      	str	r2, [r3, #24]
 8000628:	4b51      	ldr	r3, [pc, #324]	; (8000770 <HAL_GPIO_Init+0x2d0>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	2201      	movs	r2, #1
 800062e:	4013      	ands	r3, r2
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000634:	4a4f      	ldr	r2, [pc, #316]	; (8000774 <HAL_GPIO_Init+0x2d4>)
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	089b      	lsrs	r3, r3, #2
 800063a:	3302      	adds	r3, #2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	589b      	ldr	r3, [r3, r2]
 8000640:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	2203      	movs	r2, #3
 8000646:	4013      	ands	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	220f      	movs	r2, #15
 800064c:	409a      	lsls	r2, r3
 800064e:	0013      	movs	r3, r2
 8000650:	43da      	mvns	r2, r3
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	4013      	ands	r3, r2
 8000656:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	2390      	movs	r3, #144	; 0x90
 800065c:	05db      	lsls	r3, r3, #23
 800065e:	429a      	cmp	r2, r3
 8000660:	d013      	beq.n	800068a <HAL_GPIO_Init+0x1ea>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a44      	ldr	r2, [pc, #272]	; (8000778 <HAL_GPIO_Init+0x2d8>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d00d      	beq.n	8000686 <HAL_GPIO_Init+0x1e6>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a43      	ldr	r2, [pc, #268]	; (800077c <HAL_GPIO_Init+0x2dc>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d007      	beq.n	8000682 <HAL_GPIO_Init+0x1e2>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a42      	ldr	r2, [pc, #264]	; (8000780 <HAL_GPIO_Init+0x2e0>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d101      	bne.n	800067e <HAL_GPIO_Init+0x1de>
 800067a:	2303      	movs	r3, #3
 800067c:	e006      	b.n	800068c <HAL_GPIO_Init+0x1ec>
 800067e:	2305      	movs	r3, #5
 8000680:	e004      	b.n	800068c <HAL_GPIO_Init+0x1ec>
 8000682:	2302      	movs	r3, #2
 8000684:	e002      	b.n	800068c <HAL_GPIO_Init+0x1ec>
 8000686:	2301      	movs	r3, #1
 8000688:	e000      	b.n	800068c <HAL_GPIO_Init+0x1ec>
 800068a:	2300      	movs	r3, #0
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	2103      	movs	r1, #3
 8000690:	400a      	ands	r2, r1
 8000692:	0092      	lsls	r2, r2, #2
 8000694:	4093      	lsls	r3, r2
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	4313      	orrs	r3, r2
 800069a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800069c:	4935      	ldr	r1, [pc, #212]	; (8000774 <HAL_GPIO_Init+0x2d4>)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	089b      	lsrs	r3, r3, #2
 80006a2:	3302      	adds	r3, #2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006aa:	4b36      	ldr	r3, [pc, #216]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	43da      	mvns	r2, r3
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	4013      	ands	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	025b      	lsls	r3, r3, #9
 80006c2:	4013      	ands	r3, r2
 80006c4:	d003      	beq.n	80006ce <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80006d4:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	43da      	mvns	r2, r3
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	4013      	ands	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	029b      	lsls	r3, r3, #10
 80006ec:	4013      	ands	r3, r2
 80006ee:	d003      	beq.n	80006f8 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80006f0:	693a      	ldr	r2, [r7, #16]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	43da      	mvns	r2, r3
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	4013      	ands	r3, r2
 800070c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	035b      	lsls	r3, r3, #13
 8000716:	4013      	ands	r3, r2
 8000718:	d003      	beq.n	8000722 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4313      	orrs	r3, r2
 8000720:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 8000724:	693a      	ldr	r2, [r7, #16]
 8000726:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	43da      	mvns	r2, r3
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	4013      	ands	r3, r2
 8000736:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685a      	ldr	r2, [r3, #4]
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	039b      	lsls	r3, r3, #14
 8000740:	4013      	ands	r3, r2
 8000742:	d003      	beq.n	800074c <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4313      	orrs	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3301      	adds	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	40da      	lsrs	r2, r3
 8000760:	1e13      	subs	r3, r2, #0
 8000762:	d000      	beq.n	8000766 <HAL_GPIO_Init+0x2c6>
 8000764:	e6a8      	b.n	80004b8 <HAL_GPIO_Init+0x18>
  } 
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b006      	add	sp, #24
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40021000 	.word	0x40021000
 8000774:	40010000 	.word	0x40010000
 8000778:	48000400 	.word	0x48000400
 800077c:	48000800 	.word	0x48000800
 8000780:	48000c00 	.word	0x48000c00
 8000784:	40010400 	.word	0x40010400

08000788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	000a      	movs	r2, r1
 8000792:	1cbb      	adds	r3, r7, #2
 8000794:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	691b      	ldr	r3, [r3, #16]
 800079a:	1cba      	adds	r2, r7, #2
 800079c:	8812      	ldrh	r2, [r2, #0]
 800079e:	4013      	ands	r3, r2
 80007a0:	d004      	beq.n	80007ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80007a2:	230f      	movs	r3, #15
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
 80007aa:	e003      	b.n	80007b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80007ac:	230f      	movs	r3, #15
 80007ae:	18fb      	adds	r3, r7, r3
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80007b4:	230f      	movs	r3, #15
 80007b6:	18fb      	adds	r3, r7, r3
 80007b8:	781b      	ldrb	r3, [r3, #0]
  }
 80007ba:	0018      	movs	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	b004      	add	sp, #16
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	0008      	movs	r0, r1
 80007cc:	0011      	movs	r1, r2
 80007ce:	1cbb      	adds	r3, r7, #2
 80007d0:	1c02      	adds	r2, r0, #0
 80007d2:	801a      	strh	r2, [r3, #0]
 80007d4:	1c7b      	adds	r3, r7, #1
 80007d6:	1c0a      	adds	r2, r1, #0
 80007d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007da:	1c7b      	adds	r3, r7, #1
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d004      	beq.n	80007ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007e2:	1cbb      	adds	r3, r7, #2
 80007e4:	881a      	ldrh	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007ea:	e003      	b.n	80007f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007ec:	1cbb      	adds	r3, r7, #2
 80007ee:	881a      	ldrh	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b002      	add	sp, #8
 80007fa:	bd80      	pop	{r7, pc}

080007fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	000a      	movs	r2, r1
 8000806:	1cbb      	adds	r3, r7, #2
 8000808:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	695a      	ldr	r2, [r3, #20]
 800080e:	1cbb      	adds	r3, r7, #2
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	405a      	eors	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	615a      	str	r2, [r3, #20]
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b002      	add	sp, #8
 800081e:	bd80      	pop	{r7, pc}

08000820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2201      	movs	r2, #1
 8000832:	4013      	ands	r3, r2
 8000834:	d100      	bne.n	8000838 <HAL_RCC_OscConfig+0x18>
 8000836:	e08d      	b.n	8000954 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000838:	4bc3      	ldr	r3, [pc, #780]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	220c      	movs	r2, #12
 800083e:	4013      	ands	r3, r2
 8000840:	2b04      	cmp	r3, #4
 8000842:	d00e      	beq.n	8000862 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000844:	4bc0      	ldr	r3, [pc, #768]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	220c      	movs	r2, #12
 800084a:	4013      	ands	r3, r2
 800084c:	2b08      	cmp	r3, #8
 800084e:	d116      	bne.n	800087e <HAL_RCC_OscConfig+0x5e>
 8000850:	4bbd      	ldr	r3, [pc, #756]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000852:	685a      	ldr	r2, [r3, #4]
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	025b      	lsls	r3, r3, #9
 8000858:	401a      	ands	r2, r3
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	025b      	lsls	r3, r3, #9
 800085e:	429a      	cmp	r2, r3
 8000860:	d10d      	bne.n	800087e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000862:	4bb9      	ldr	r3, [pc, #740]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	029b      	lsls	r3, r3, #10
 800086a:	4013      	ands	r3, r2
 800086c:	d100      	bne.n	8000870 <HAL_RCC_OscConfig+0x50>
 800086e:	e070      	b.n	8000952 <HAL_RCC_OscConfig+0x132>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d000      	beq.n	800087a <HAL_RCC_OscConfig+0x5a>
 8000878:	e06b      	b.n	8000952 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e2b5      	b.n	8000dea <HAL_RCC_OscConfig+0x5ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d107      	bne.n	8000896 <HAL_RCC_OscConfig+0x76>
 8000886:	4bb0      	ldr	r3, [pc, #704]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000888:	4aaf      	ldr	r2, [pc, #700]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 800088a:	6812      	ldr	r2, [r2, #0]
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	0249      	lsls	r1, r1, #9
 8000890:	430a      	orrs	r2, r1
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	e02f      	b.n	80008f6 <HAL_RCC_OscConfig+0xd6>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d10c      	bne.n	80008b8 <HAL_RCC_OscConfig+0x98>
 800089e:	4baa      	ldr	r3, [pc, #680]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 80008a0:	4aa9      	ldr	r2, [pc, #676]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 80008a2:	6812      	ldr	r2, [r2, #0]
 80008a4:	49a9      	ldr	r1, [pc, #676]	; (8000b4c <HAL_RCC_OscConfig+0x32c>)
 80008a6:	400a      	ands	r2, r1
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	4ba7      	ldr	r3, [pc, #668]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 80008ac:	4aa6      	ldr	r2, [pc, #664]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 80008ae:	6812      	ldr	r2, [r2, #0]
 80008b0:	49a7      	ldr	r1, [pc, #668]	; (8000b50 <HAL_RCC_OscConfig+0x330>)
 80008b2:	400a      	ands	r2, r1
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	e01e      	b.n	80008f6 <HAL_RCC_OscConfig+0xd6>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b05      	cmp	r3, #5
 80008be:	d10e      	bne.n	80008de <HAL_RCC_OscConfig+0xbe>
 80008c0:	4ba1      	ldr	r3, [pc, #644]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 80008c2:	4aa1      	ldr	r2, [pc, #644]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 80008c4:	6812      	ldr	r2, [r2, #0]
 80008c6:	2180      	movs	r1, #128	; 0x80
 80008c8:	02c9      	lsls	r1, r1, #11
 80008ca:	430a      	orrs	r2, r1
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	4b9e      	ldr	r3, [pc, #632]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 80008d0:	4a9d      	ldr	r2, [pc, #628]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	0249      	lsls	r1, r1, #9
 80008d8:	430a      	orrs	r2, r1
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	e00b      	b.n	80008f6 <HAL_RCC_OscConfig+0xd6>
 80008de:	4b9a      	ldr	r3, [pc, #616]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 80008e0:	4a99      	ldr	r2, [pc, #612]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 80008e2:	6812      	ldr	r2, [r2, #0]
 80008e4:	4999      	ldr	r1, [pc, #612]	; (8000b4c <HAL_RCC_OscConfig+0x32c>)
 80008e6:	400a      	ands	r2, r1
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	4b97      	ldr	r3, [pc, #604]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 80008ec:	4a96      	ldr	r2, [pc, #600]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 80008ee:	6812      	ldr	r2, [r2, #0]
 80008f0:	4997      	ldr	r1, [pc, #604]	; (8000b50 <HAL_RCC_OscConfig+0x330>)
 80008f2:	400a      	ands	r2, r1
 80008f4:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d014      	beq.n	8000928 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008fe:	f7ff fccb 	bl	8000298 <HAL_GetTick>
 8000902:	0003      	movs	r3, r0
 8000904:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000906:	e008      	b.n	800091a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000908:	f7ff fcc6 	bl	8000298 <HAL_GetTick>
 800090c:	0002      	movs	r2, r0
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	2b64      	cmp	r3, #100	; 0x64
 8000914:	d901      	bls.n	800091a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000916:	2303      	movs	r3, #3
 8000918:	e267      	b.n	8000dea <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800091a:	4b8b      	ldr	r3, [pc, #556]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	029b      	lsls	r3, r3, #10
 8000922:	4013      	ands	r3, r2
 8000924:	d0f0      	beq.n	8000908 <HAL_RCC_OscConfig+0xe8>
 8000926:	e015      	b.n	8000954 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000928:	f7ff fcb6 	bl	8000298 <HAL_GetTick>
 800092c:	0003      	movs	r3, r0
 800092e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000930:	e008      	b.n	8000944 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000932:	f7ff fcb1 	bl	8000298 <HAL_GetTick>
 8000936:	0002      	movs	r2, r0
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	2b64      	cmp	r3, #100	; 0x64
 800093e:	d901      	bls.n	8000944 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000940:	2303      	movs	r3, #3
 8000942:	e252      	b.n	8000dea <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000944:	4b80      	ldr	r3, [pc, #512]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	029b      	lsls	r3, r3, #10
 800094c:	4013      	ands	r3, r2
 800094e:	d1f0      	bne.n	8000932 <HAL_RCC_OscConfig+0x112>
 8000950:	e000      	b.n	8000954 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000952:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2202      	movs	r2, #2
 800095a:	4013      	ands	r3, r2
 800095c:	d100      	bne.n	8000960 <HAL_RCC_OscConfig+0x140>
 800095e:	e069      	b.n	8000a34 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000960:	4b79      	ldr	r3, [pc, #484]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	220c      	movs	r2, #12
 8000966:	4013      	ands	r3, r2
 8000968:	d00b      	beq.n	8000982 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800096a:	4b77      	ldr	r3, [pc, #476]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	220c      	movs	r2, #12
 8000970:	4013      	ands	r3, r2
 8000972:	2b08      	cmp	r3, #8
 8000974:	d11c      	bne.n	80009b0 <HAL_RCC_OscConfig+0x190>
 8000976:	4b74      	ldr	r3, [pc, #464]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000978:	685a      	ldr	r2, [r3, #4]
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	025b      	lsls	r3, r3, #9
 800097e:	4013      	ands	r3, r2
 8000980:	d116      	bne.n	80009b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000982:	4b71      	ldr	r3, [pc, #452]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2202      	movs	r2, #2
 8000988:	4013      	ands	r3, r2
 800098a:	d005      	beq.n	8000998 <HAL_RCC_OscConfig+0x178>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d001      	beq.n	8000998 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	e228      	b.n	8000dea <HAL_RCC_OscConfig+0x5ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000998:	4a6b      	ldr	r2, [pc, #428]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 800099a:	4b6b      	ldr	r3, [pc, #428]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	21f8      	movs	r1, #248	; 0xf8
 80009a0:	438b      	bics	r3, r1
 80009a2:	0019      	movs	r1, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	430b      	orrs	r3, r1
 80009ac:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009ae:	e041      	b.n	8000a34 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d024      	beq.n	8000a02 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009b8:	4b63      	ldr	r3, [pc, #396]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 80009ba:	4a63      	ldr	r2, [pc, #396]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 80009bc:	6812      	ldr	r2, [r2, #0]
 80009be:	2101      	movs	r1, #1
 80009c0:	430a      	orrs	r2, r1
 80009c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009c4:	f7ff fc68 	bl	8000298 <HAL_GetTick>
 80009c8:	0003      	movs	r3, r0
 80009ca:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009cc:	e008      	b.n	80009e0 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ce:	f7ff fc63 	bl	8000298 <HAL_GetTick>
 80009d2:	0002      	movs	r2, r0
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d901      	bls.n	80009e0 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80009dc:	2303      	movs	r3, #3
 80009de:	e204      	b.n	8000dea <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e0:	4b59      	ldr	r3, [pc, #356]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2202      	movs	r2, #2
 80009e6:	4013      	ands	r3, r2
 80009e8:	d0f1      	beq.n	80009ce <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ea:	4a57      	ldr	r2, [pc, #348]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 80009ec:	4b56      	ldr	r3, [pc, #344]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	21f8      	movs	r1, #248	; 0xf8
 80009f2:	438b      	bics	r3, r1
 80009f4:	0019      	movs	r1, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	691b      	ldr	r3, [r3, #16]
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	430b      	orrs	r3, r1
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	e018      	b.n	8000a34 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a02:	4b51      	ldr	r3, [pc, #324]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000a04:	4a50      	ldr	r2, [pc, #320]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000a06:	6812      	ldr	r2, [r2, #0]
 8000a08:	2101      	movs	r1, #1
 8000a0a:	438a      	bics	r2, r1
 8000a0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a0e:	f7ff fc43 	bl	8000298 <HAL_GetTick>
 8000a12:	0003      	movs	r3, r0
 8000a14:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a16:	e008      	b.n	8000a2a <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a18:	f7ff fc3e 	bl	8000298 <HAL_GetTick>
 8000a1c:	0002      	movs	r2, r0
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d901      	bls.n	8000a2a <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8000a26:	2303      	movs	r3, #3
 8000a28:	e1df      	b.n	8000dea <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a2a:	4b47      	ldr	r3, [pc, #284]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2202      	movs	r2, #2
 8000a30:	4013      	ands	r3, r2
 8000a32:	d1f1      	bne.n	8000a18 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2208      	movs	r2, #8
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	d036      	beq.n	8000aac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d019      	beq.n	8000a7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a46:	4b40      	ldr	r3, [pc, #256]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000a48:	4a3f      	ldr	r2, [pc, #252]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000a4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a52:	f7ff fc21 	bl	8000298 <HAL_GetTick>
 8000a56:	0003      	movs	r3, r0
 8000a58:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a5a:	e008      	b.n	8000a6e <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a5c:	f7ff fc1c 	bl	8000298 <HAL_GetTick>
 8000a60:	0002      	movs	r2, r0
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d901      	bls.n	8000a6e <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	e1bd      	b.n	8000dea <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a6e:	4b36      	ldr	r3, [pc, #216]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a72:	2202      	movs	r2, #2
 8000a74:	4013      	ands	r3, r2
 8000a76:	d0f1      	beq.n	8000a5c <HAL_RCC_OscConfig+0x23c>
 8000a78:	e018      	b.n	8000aac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a7a:	4b33      	ldr	r3, [pc, #204]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000a7c:	4a32      	ldr	r2, [pc, #200]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000a7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000a80:	2101      	movs	r1, #1
 8000a82:	438a      	bics	r2, r1
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a86:	f7ff fc07 	bl	8000298 <HAL_GetTick>
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a8e:	e008      	b.n	8000aa2 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a90:	f7ff fc02 	bl	8000298 <HAL_GetTick>
 8000a94:	0002      	movs	r2, r0
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d901      	bls.n	8000aa2 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	e1a3      	b.n	8000dea <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aa2:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	d1f1      	bne.n	8000a90 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	d100      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x298>
 8000ab6:	e0b5      	b.n	8000c24 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ab8:	2317      	movs	r3, #23
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ac0:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000ac2:	69da      	ldr	r2, [r3, #28]
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	055b      	lsls	r3, r3, #21
 8000ac8:	4013      	ands	r3, r2
 8000aca:	d111      	bne.n	8000af0 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000ace:	4a1e      	ldr	r2, [pc, #120]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000ad0:	69d2      	ldr	r2, [r2, #28]
 8000ad2:	2180      	movs	r1, #128	; 0x80
 8000ad4:	0549      	lsls	r1, r1, #21
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	61da      	str	r2, [r3, #28]
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000adc:	69da      	ldr	r2, [r3, #28]
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	055b      	lsls	r3, r3, #21
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ae8:	2317      	movs	r3, #23
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <HAL_RCC_OscConfig+0x334>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4013      	ands	r3, r2
 8000afa:	d11a      	bne.n	8000b32 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_RCC_OscConfig+0x334>)
 8000afe:	4a15      	ldr	r2, [pc, #84]	; (8000b54 <HAL_RCC_OscConfig+0x334>)
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	0049      	lsls	r1, r1, #1
 8000b06:	430a      	orrs	r2, r1
 8000b08:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b0a:	f7ff fbc5 	bl	8000298 <HAL_GetTick>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b12:	e008      	b.n	8000b26 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b14:	f7ff fbc0 	bl	8000298 <HAL_GetTick>
 8000b18:	0002      	movs	r2, r0
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	2b64      	cmp	r3, #100	; 0x64
 8000b20:	d901      	bls.n	8000b26 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000b22:	2303      	movs	r3, #3
 8000b24:	e161      	b.n	8000dea <HAL_RCC_OscConfig+0x5ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <HAL_RCC_OscConfig+0x334>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	4013      	ands	r3, r2
 8000b30:	d0f0      	beq.n	8000b14 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d10e      	bne.n	8000b58 <HAL_RCC_OscConfig+0x338>
 8000b3a:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000b3c:	4a02      	ldr	r2, [pc, #8]	; (8000b48 <HAL_RCC_OscConfig+0x328>)
 8000b3e:	6a12      	ldr	r2, [r2, #32]
 8000b40:	2101      	movs	r1, #1
 8000b42:	430a      	orrs	r2, r1
 8000b44:	621a      	str	r2, [r3, #32]
 8000b46:	e035      	b.n	8000bb4 <HAL_RCC_OscConfig+0x394>
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	fffeffff 	.word	0xfffeffff
 8000b50:	fffbffff 	.word	0xfffbffff
 8000b54:	40007000 	.word	0x40007000
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d10c      	bne.n	8000b7a <HAL_RCC_OscConfig+0x35a>
 8000b60:	4ba4      	ldr	r3, [pc, #656]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000b62:	4aa4      	ldr	r2, [pc, #656]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000b64:	6a12      	ldr	r2, [r2, #32]
 8000b66:	2101      	movs	r1, #1
 8000b68:	438a      	bics	r2, r1
 8000b6a:	621a      	str	r2, [r3, #32]
 8000b6c:	4ba1      	ldr	r3, [pc, #644]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000b6e:	4aa1      	ldr	r2, [pc, #644]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000b70:	6a12      	ldr	r2, [r2, #32]
 8000b72:	2104      	movs	r1, #4
 8000b74:	438a      	bics	r2, r1
 8000b76:	621a      	str	r2, [r3, #32]
 8000b78:	e01c      	b.n	8000bb4 <HAL_RCC_OscConfig+0x394>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b05      	cmp	r3, #5
 8000b80:	d10c      	bne.n	8000b9c <HAL_RCC_OscConfig+0x37c>
 8000b82:	4b9c      	ldr	r3, [pc, #624]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000b84:	4a9b      	ldr	r2, [pc, #620]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000b86:	6a12      	ldr	r2, [r2, #32]
 8000b88:	2104      	movs	r1, #4
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	621a      	str	r2, [r3, #32]
 8000b8e:	4b99      	ldr	r3, [pc, #612]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000b90:	4a98      	ldr	r2, [pc, #608]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000b92:	6a12      	ldr	r2, [r2, #32]
 8000b94:	2101      	movs	r1, #1
 8000b96:	430a      	orrs	r2, r1
 8000b98:	621a      	str	r2, [r3, #32]
 8000b9a:	e00b      	b.n	8000bb4 <HAL_RCC_OscConfig+0x394>
 8000b9c:	4b95      	ldr	r3, [pc, #596]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000b9e:	4a95      	ldr	r2, [pc, #596]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000ba0:	6a12      	ldr	r2, [r2, #32]
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	438a      	bics	r2, r1
 8000ba6:	621a      	str	r2, [r3, #32]
 8000ba8:	4b92      	ldr	r3, [pc, #584]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000baa:	4a92      	ldr	r2, [pc, #584]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000bac:	6a12      	ldr	r2, [r2, #32]
 8000bae:	2104      	movs	r1, #4
 8000bb0:	438a      	bics	r2, r1
 8000bb2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d014      	beq.n	8000be6 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bbc:	f7ff fb6c 	bl	8000298 <HAL_GetTick>
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bc4:	e009      	b.n	8000bda <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bc6:	f7ff fb67 	bl	8000298 <HAL_GetTick>
 8000bca:	0002      	movs	r2, r0
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	4a89      	ldr	r2, [pc, #548]	; (8000df8 <HAL_RCC_OscConfig+0x5d8>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d901      	bls.n	8000bda <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e107      	b.n	8000dea <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bda:	4b86      	ldr	r3, [pc, #536]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000bdc:	6a1b      	ldr	r3, [r3, #32]
 8000bde:	2202      	movs	r2, #2
 8000be0:	4013      	ands	r3, r2
 8000be2:	d0f0      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x3a6>
 8000be4:	e013      	b.n	8000c0e <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000be6:	f7ff fb57 	bl	8000298 <HAL_GetTick>
 8000bea:	0003      	movs	r3, r0
 8000bec:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bee:	e009      	b.n	8000c04 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bf0:	f7ff fb52 	bl	8000298 <HAL_GetTick>
 8000bf4:	0002      	movs	r2, r0
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	4a7f      	ldr	r2, [pc, #508]	; (8000df8 <HAL_RCC_OscConfig+0x5d8>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d901      	bls.n	8000c04 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8000c00:	2303      	movs	r3, #3
 8000c02:	e0f2      	b.n	8000dea <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c04:	4b7b      	ldr	r3, [pc, #492]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000c06:	6a1b      	ldr	r3, [r3, #32]
 8000c08:	2202      	movs	r2, #2
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	d1f0      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c0e:	2317      	movs	r3, #23
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d105      	bne.n	8000c24 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c18:	4b76      	ldr	r3, [pc, #472]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000c1a:	4a76      	ldr	r2, [pc, #472]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000c1c:	69d2      	ldr	r2, [r2, #28]
 8000c1e:	4977      	ldr	r1, [pc, #476]	; (8000dfc <HAL_RCC_OscConfig+0x5dc>)
 8000c20:	400a      	ands	r2, r1
 8000c22:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2210      	movs	r2, #16
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	d063      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d12a      	bne.n	8000c8c <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c36:	4b6f      	ldr	r3, [pc, #444]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000c38:	4a6e      	ldr	r2, [pc, #440]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000c3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000c42:	4b6c      	ldr	r3, [pc, #432]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000c44:	4a6b      	ldr	r2, [pc, #428]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000c46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c48:	2101      	movs	r1, #1
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c4e:	f7ff fb23 	bl	8000298 <HAL_GetTick>
 8000c52:	0003      	movs	r3, r0
 8000c54:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c56:	e008      	b.n	8000c6a <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c58:	f7ff fb1e 	bl	8000298 <HAL_GetTick>
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d901      	bls.n	8000c6a <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e0bf      	b.n	8000dea <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c6a:	4b62      	ldr	r3, [pc, #392]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6e:	2202      	movs	r2, #2
 8000c70:	4013      	ands	r3, r2
 8000c72:	d0f1      	beq.n	8000c58 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c74:	4a5f      	ldr	r2, [pc, #380]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000c76:	4b5f      	ldr	r3, [pc, #380]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c7a:	21f8      	movs	r1, #248	; 0xf8
 8000c7c:	438b      	bics	r3, r1
 8000c7e:	0019      	movs	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	430b      	orrs	r3, r1
 8000c88:	6353      	str	r3, [r2, #52]	; 0x34
 8000c8a:	e034      	b.n	8000cf6 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	3305      	adds	r3, #5
 8000c92:	d111      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c94:	4b57      	ldr	r3, [pc, #348]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000c96:	4a57      	ldr	r2, [pc, #348]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000c98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	438a      	bics	r2, r1
 8000c9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ca0:	4a54      	ldr	r2, [pc, #336]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000ca2:	4b54      	ldr	r3, [pc, #336]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca6:	21f8      	movs	r1, #248	; 0xf8
 8000ca8:	438b      	bics	r3, r1
 8000caa:	0019      	movs	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	430b      	orrs	r3, r1
 8000cb4:	6353      	str	r3, [r2, #52]	; 0x34
 8000cb6:	e01e      	b.n	8000cf6 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cb8:	4b4e      	ldr	r3, [pc, #312]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000cba:	4a4e      	ldr	r2, [pc, #312]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000cbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000cc4:	4b4b      	ldr	r3, [pc, #300]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000cc6:	4a4b      	ldr	r2, [pc, #300]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000cc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000cca:	2101      	movs	r1, #1
 8000ccc:	438a      	bics	r2, r1
 8000cce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cd0:	f7ff fae2 	bl	8000298 <HAL_GetTick>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000cd8:	e008      	b.n	8000cec <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000cda:	f7ff fadd 	bl	8000298 <HAL_GetTick>
 8000cde:	0002      	movs	r2, r0
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d901      	bls.n	8000cec <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e07e      	b.n	8000dea <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000cec:	4b41      	ldr	r3, [pc, #260]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d1f1      	bne.n	8000cda <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a1b      	ldr	r3, [r3, #32]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d100      	bne.n	8000d00 <HAL_RCC_OscConfig+0x4e0>
 8000cfe:	e073      	b.n	8000de8 <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d00:	4b3c      	ldr	r3, [pc, #240]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	220c      	movs	r2, #12
 8000d06:	4013      	ands	r3, r2
 8000d08:	2b08      	cmp	r3, #8
 8000d0a:	d100      	bne.n	8000d0e <HAL_RCC_OscConfig+0x4ee>
 8000d0c:	e06a      	b.n	8000de4 <HAL_RCC_OscConfig+0x5c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a1b      	ldr	r3, [r3, #32]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d14b      	bne.n	8000dae <HAL_RCC_OscConfig+0x58e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d16:	4b37      	ldr	r3, [pc, #220]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000d18:	4a36      	ldr	r2, [pc, #216]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000d1a:	6812      	ldr	r2, [r2, #0]
 8000d1c:	4938      	ldr	r1, [pc, #224]	; (8000e00 <HAL_RCC_OscConfig+0x5e0>)
 8000d1e:	400a      	ands	r2, r1
 8000d20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d22:	f7ff fab9 	bl	8000298 <HAL_GetTick>
 8000d26:	0003      	movs	r3, r0
 8000d28:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d2a:	e008      	b.n	8000d3e <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d2c:	f7ff fab4 	bl	8000298 <HAL_GetTick>
 8000d30:	0002      	movs	r2, r0
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d901      	bls.n	8000d3e <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e055      	b.n	8000dea <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	049b      	lsls	r3, r3, #18
 8000d46:	4013      	ands	r3, r2
 8000d48:	d1f0      	bne.n	8000d2c <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d4a:	4a2a      	ldr	r2, [pc, #168]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000d4c:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d50:	210f      	movs	r1, #15
 8000d52:	438b      	bics	r3, r1
 8000d54:	0019      	movs	r1, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5a:	430b      	orrs	r3, r1
 8000d5c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d5e:	4a25      	ldr	r2, [pc, #148]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000d60:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	4927      	ldr	r1, [pc, #156]	; (8000e04 <HAL_RCC_OscConfig+0x5e4>)
 8000d66:	4019      	ands	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d70:	4303      	orrs	r3, r0
 8000d72:	430b      	orrs	r3, r1
 8000d74:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d76:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000d78:	4a1e      	ldr	r2, [pc, #120]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000d7a:	6812      	ldr	r2, [r2, #0]
 8000d7c:	2180      	movs	r1, #128	; 0x80
 8000d7e:	0449      	lsls	r1, r1, #17
 8000d80:	430a      	orrs	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d84:	f7ff fa88 	bl	8000298 <HAL_GetTick>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d8c:	e008      	b.n	8000da0 <HAL_RCC_OscConfig+0x580>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d8e:	f7ff fa83 	bl	8000298 <HAL_GetTick>
 8000d92:	0002      	movs	r2, r0
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d901      	bls.n	8000da0 <HAL_RCC_OscConfig+0x580>
          {
            return HAL_TIMEOUT;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e024      	b.n	8000dea <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	049b      	lsls	r3, r3, #18
 8000da8:	4013      	ands	r3, r2
 8000daa:	d0f0      	beq.n	8000d8e <HAL_RCC_OscConfig+0x56e>
 8000dac:	e01c      	b.n	8000de8 <HAL_RCC_OscConfig+0x5c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000db0:	4a10      	ldr	r2, [pc, #64]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	4912      	ldr	r1, [pc, #72]	; (8000e00 <HAL_RCC_OscConfig+0x5e0>)
 8000db6:	400a      	ands	r2, r1
 8000db8:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dba:	f7ff fa6d 	bl	8000298 <HAL_GetTick>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc4:	f7ff fa68 	bl	8000298 <HAL_GetTick>
 8000dc8:	0002      	movs	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e009      	b.n	8000dea <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <HAL_RCC_OscConfig+0x5d4>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	049b      	lsls	r3, r3, #18
 8000dde:	4013      	ands	r3, r2
 8000de0:	d1f0      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x5a4>
 8000de2:	e001      	b.n	8000de8 <HAL_RCC_OscConfig+0x5c8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e000      	b.n	8000dea <HAL_RCC_OscConfig+0x5ca>
    }
  }
  
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	0018      	movs	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b006      	add	sp, #24
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	40021000 	.word	0x40021000
 8000df8:	00001388 	.word	0x00001388
 8000dfc:	efffffff 	.word	0xefffffff
 8000e00:	feffffff 	.word	0xfeffffff
 8000e04:	ffc2ffff 	.word	0xffc2ffff

08000e08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e16:	4b69      	ldr	r3, [pc, #420]	; (8000fbc <HAL_RCC_ClockConfig+0x1b4>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	401a      	ands	r2, r3
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d211      	bcs.n	8000e48 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e24:	4b65      	ldr	r3, [pc, #404]	; (8000fbc <HAL_RCC_ClockConfig+0x1b4>)
 8000e26:	4a65      	ldr	r2, [pc, #404]	; (8000fbc <HAL_RCC_ClockConfig+0x1b4>)
 8000e28:	6812      	ldr	r2, [r2, #0]
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	438a      	bics	r2, r1
 8000e2e:	0011      	movs	r1, r2
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e36:	4b61      	ldr	r3, [pc, #388]	; (8000fbc <HAL_RCC_ClockConfig+0x1b4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d001      	beq.n	8000e48 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e0b5      	b.n	8000fb4 <HAL_RCC_ClockConfig+0x1ac>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d009      	beq.n	8000e66 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e52:	4a5b      	ldr	r2, [pc, #364]	; (8000fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8000e54:	4b5a      	ldr	r3, [pc, #360]	; (8000fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	21f0      	movs	r1, #240	; 0xf0
 8000e5a:	438b      	bics	r3, r1
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	430b      	orrs	r3, r1
 8000e64:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d100      	bne.n	8000e72 <HAL_RCC_ClockConfig+0x6a>
 8000e70:	e067      	b.n	8000f42 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d107      	bne.n	8000e8a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7a:	4b51      	ldr	r3, [pc, #324]	; (8000fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	029b      	lsls	r3, r3, #10
 8000e82:	4013      	ands	r3, r2
 8000e84:	d114      	bne.n	8000eb0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e094      	b.n	8000fb4 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d107      	bne.n	8000ea2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e92:	4b4b      	ldr	r3, [pc, #300]	; (8000fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	049b      	lsls	r3, r3, #18
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d108      	bne.n	8000eb0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e088      	b.n	8000fb4 <HAL_RCC_ClockConfig+0x1ac>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea2:	4b47      	ldr	r3, [pc, #284]	; (8000fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d101      	bne.n	8000eb0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e081      	b.n	8000fb4 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eb0:	4a43      	ldr	r2, [pc, #268]	; (8000fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8000eb2:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	438b      	bics	r3, r1
 8000eba:	0019      	movs	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	430b      	orrs	r3, r1
 8000ec2:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ec4:	f7ff f9e8 	bl	8000298 <HAL_GetTick>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d111      	bne.n	8000ef8 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ed4:	e009      	b.n	8000eea <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ed6:	f7ff f9df 	bl	8000298 <HAL_GetTick>
 8000eda:	0002      	movs	r2, r0
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	4a38      	ldr	r2, [pc, #224]	; (8000fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e064      	b.n	8000fb4 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eea:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	220c      	movs	r2, #12
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	d1ef      	bne.n	8000ed6 <HAL_RCC_ClockConfig+0xce>
 8000ef6:	e024      	b.n	8000f42 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d11b      	bne.n	8000f38 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f00:	e009      	b.n	8000f16 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f02:	f7ff f9c9 	bl	8000298 <HAL_GetTick>
 8000f06:	0002      	movs	r2, r0
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	4a2d      	ldr	r2, [pc, #180]	; (8000fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d901      	bls.n	8000f16 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e04e      	b.n	8000fb4 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f16:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d1ef      	bne.n	8000f02 <HAL_RCC_ClockConfig+0xfa>
 8000f22:	e00e      	b.n	8000f42 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f24:	f7ff f9b8 	bl	8000298 <HAL_GetTick>
 8000f28:	0002      	movs	r2, r0
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	4a25      	ldr	r2, [pc, #148]	; (8000fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e03d      	b.n	8000fb4 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f38:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	220c      	movs	r2, #12
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d1f0      	bne.n	8000f24 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f42:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <HAL_RCC_ClockConfig+0x1b4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2201      	movs	r2, #1
 8000f48:	401a      	ands	r2, r3
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d911      	bls.n	8000f74 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <HAL_RCC_ClockConfig+0x1b4>)
 8000f52:	4a1a      	ldr	r2, [pc, #104]	; (8000fbc <HAL_RCC_ClockConfig+0x1b4>)
 8000f54:	6812      	ldr	r2, [r2, #0]
 8000f56:	2101      	movs	r1, #1
 8000f58:	438a      	bics	r2, r1
 8000f5a:	0011      	movs	r1, r2
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_RCC_ClockConfig+0x1b4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2201      	movs	r2, #1
 8000f68:	401a      	ands	r2, r3
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d001      	beq.n	8000f74 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e01f      	b.n	8000fb4 <HAL_RCC_ClockConfig+0x1ac>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2204      	movs	r2, #4
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d008      	beq.n	8000f90 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000f7e:	4a10      	ldr	r2, [pc, #64]	; (8000fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	4910      	ldr	r1, [pc, #64]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8000f86:	4019      	ands	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f90:	f000 f820 	bl	8000fd4 <HAL_RCC_GetSysClockFreq>
 8000f94:	0001      	movs	r1, r0
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	091b      	lsrs	r3, r3, #4
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_RCC_ClockConfig+0x1c4>)
 8000fa2:	5cd3      	ldrb	r3, [r2, r3]
 8000fa4:	000a      	movs	r2, r1
 8000fa6:	40da      	lsrs	r2, r3
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8000faa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff f94b 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b004      	add	sp, #16
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40022000 	.word	0x40022000
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	00001388 	.word	0x00001388
 8000fc8:	fffff8ff 	.word	0xfffff8ff
 8000fcc:	08001cb8 	.word	0x08001cb8
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b08f      	sub	sp, #60	; 0x3c
 8000fd8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000fda:	2314      	movs	r3, #20
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	4a28      	ldr	r2, [pc, #160]	; (8001080 <HAL_RCC_GetSysClockFreq+0xac>)
 8000fe0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000fe2:	c313      	stmia	r3!, {r0, r1, r4}
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4a26      	ldr	r2, [pc, #152]	; (8001084 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000fec:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000fee:	c313      	stmia	r3!, {r0, r1, r4}
 8000ff0:	6812      	ldr	r2, [r2, #0]
 8000ff2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <HAL_RCC_GetSysClockFreq+0xb4>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001010:	220c      	movs	r2, #12
 8001012:	4013      	ands	r3, r2
 8001014:	2b04      	cmp	r3, #4
 8001016:	d002      	beq.n	800101e <HAL_RCC_GetSysClockFreq+0x4a>
 8001018:	2b08      	cmp	r3, #8
 800101a:	d003      	beq.n	8001024 <HAL_RCC_GetSysClockFreq+0x50>
 800101c:	e027      	b.n	800106e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800101e:	4b1b      	ldr	r3, [pc, #108]	; (800108c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001022:	e027      	b.n	8001074 <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001026:	0c9b      	lsrs	r3, r3, #18
 8001028:	220f      	movs	r2, #15
 800102a:	4013      	ands	r3, r2
 800102c:	2214      	movs	r2, #20
 800102e:	18ba      	adds	r2, r7, r2
 8001030:	5cd3      	ldrb	r3, [r2, r3]
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	220f      	movs	r2, #15
 800103a:	4013      	ands	r3, r2
 800103c:	1d3a      	adds	r2, r7, #4
 800103e:	5cd3      	ldrb	r3, [r2, r3]
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	025b      	lsls	r3, r3, #9
 8001048:	4013      	ands	r3, r2
 800104a:	d009      	beq.n	8001060 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800104c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800104e:	480f      	ldr	r0, [pc, #60]	; (800108c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001050:	f7ff f85a 	bl	8000108 <__udivsi3>
 8001054:	0003      	movs	r3, r0
 8001056:	001a      	movs	r2, r3
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	4353      	muls	r3, r2
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
 800105e:	e003      	b.n	8001068 <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001064:	4353      	muls	r3, r2
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800106c:	e002      	b.n	8001074 <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001072:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001076:	0018      	movs	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	b00f      	add	sp, #60	; 0x3c
 800107c:	bd90      	pop	{r4, r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	08001c74 	.word	0x08001c74
 8001084:	08001c84 	.word	0x08001c84
 8001088:	40021000 	.word	0x40021000
 800108c:	007a1200 	.word	0x007a1200
 8001090:	003d0900 	.word	0x003d0900

08001094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001098:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	0018      	movs	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	20000000 	.word	0x20000000

080010a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80010ac:	f7ff fff2 	bl	8001094 <HAL_RCC_GetHCLKFreq>
 80010b0:	0001      	movs	r1, r0
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	0a1b      	lsrs	r3, r3, #8
 80010b8:	2207      	movs	r2, #7
 80010ba:	4013      	ands	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80010be:	5cd3      	ldrb	r3, [r2, r3]
 80010c0:	40d9      	lsrs	r1, r3
 80010c2:	000b      	movs	r3, r1
}    
 80010c4:	0018      	movs	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	40021000 	.word	0x40021000
 80010d0:	08001cc8 	.word	0x08001cc8

080010d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e047      	b.n	8001176 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2269      	movs	r2, #105	; 0x69
 80010ea:	5c9b      	ldrb	r3, [r3, r2]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d107      	bne.n	8001102 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2268      	movs	r2, #104	; 0x68
 80010f6:	2100      	movs	r1, #0
 80010f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	0018      	movs	r0, r3
 80010fe:	f000 fcd5 	bl	8001aac <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2269      	movs	r2, #105	; 0x69
 8001106:	2124      	movs	r1, #36	; 0x24
 8001108:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	2101      	movs	r1, #1
 8001116:	438a      	bics	r2, r1
 8001118:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	0018      	movs	r0, r3
 800111e:	f000 f8d5 	bl	80012cc <UART_SetConfig>
 8001122:	0003      	movs	r3, r0
 8001124:	2b01      	cmp	r3, #1
 8001126:	d101      	bne.n	800112c <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e024      	b.n	8001176 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	0018      	movs	r0, r3
 8001138:	f000 fa3e 	bl	80015b8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	6852      	ldr	r2, [r2, #4]
 8001146:	490e      	ldr	r1, [pc, #56]	; (8001180 <HAL_UART_Init+0xac>)
 8001148:	400a      	ands	r2, r1
 800114a:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	6812      	ldr	r2, [r2, #0]
 8001154:	6892      	ldr	r2, [r2, #8]
 8001156:	2108      	movs	r1, #8
 8001158:	438a      	bics	r2, r1
 800115a:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	6812      	ldr	r2, [r2, #0]
 8001164:	6812      	ldr	r2, [r2, #0]
 8001166:	2101      	movs	r1, #1
 8001168:	430a      	orrs	r2, r1
 800116a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	0018      	movs	r0, r3
 8001170:	f000 face 	bl	8001710 <UART_CheckIdleState>
 8001174:	0003      	movs	r3, r0
}
 8001176:	0018      	movs	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	fffff7ff 	.word	0xfffff7ff

08001184 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af02      	add	r7, sp, #8
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	1dbb      	adds	r3, r7, #6
 8001192:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2269      	movs	r2, #105	; 0x69
 800119c:	5c9b      	ldrb	r3, [r3, r2]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b20      	cmp	r3, #32
 80011a2:	d000      	beq.n	80011a6 <HAL_UART_Transmit+0x22>
 80011a4:	e08c      	b.n	80012c0 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_UART_Transmit+0x30>
 80011ac:	1dbb      	adds	r3, r7, #6
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e084      	b.n	80012c2 <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	015b      	lsls	r3, r3, #5
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d109      	bne.n	80011d8 <HAL_UART_Transmit+0x54>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d105      	bne.n	80011d8 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	2201      	movs	r2, #1
 80011d0:	4013      	ands	r3, r2
 80011d2:	d001      	beq.n	80011d8 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e074      	b.n	80012c2 <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2268      	movs	r2, #104	; 0x68
 80011dc:	5c9b      	ldrb	r3, [r3, r2]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d101      	bne.n	80011e6 <HAL_UART_Transmit+0x62>
 80011e2:	2302      	movs	r3, #2
 80011e4:	e06d      	b.n	80012c2 <HAL_UART_Transmit+0x13e>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2268      	movs	r2, #104	; 0x68
 80011ea:	2101      	movs	r1, #1
 80011ec:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2200      	movs	r2, #0
 80011f2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2269      	movs	r2, #105	; 0x69
 80011f8:	2121      	movs	r1, #33	; 0x21
 80011fa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80011fc:	f7ff f84c 	bl	8000298 <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	1dba      	adds	r2, r7, #6
 8001208:	2150      	movs	r1, #80	; 0x50
 800120a:	8812      	ldrh	r2, [r2, #0]
 800120c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	1dba      	adds	r2, r7, #6
 8001212:	2152      	movs	r1, #82	; 0x52
 8001214:	8812      	ldrh	r2, [r2, #0]
 8001216:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8001218:	e035      	b.n	8001286 <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2252      	movs	r2, #82	; 0x52
 800121e:	5a9b      	ldrh	r3, [r3, r2]
 8001220:	b29b      	uxth	r3, r3
 8001222:	3b01      	subs	r3, #1
 8001224:	b299      	uxth	r1, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2252      	movs	r2, #82	; 0x52
 800122a:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	0013      	movs	r3, r2
 8001236:	2200      	movs	r2, #0
 8001238:	2180      	movs	r1, #128	; 0x80
 800123a:	f000 fa81 	bl	8001740 <UART_WaitOnFlagUntilTimeout>
 800123e:	1e03      	subs	r3, r0, #0
 8001240:	d001      	beq.n	8001246 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e03d      	b.n	80012c2 <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	015b      	lsls	r3, r3, #5
 800124e:	429a      	cmp	r2, r3
 8001250:	d111      	bne.n	8001276 <HAL_UART_Transmit+0xf2>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10d      	bne.n	8001276 <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	8812      	ldrh	r2, [r2, #0]
 8001266:	05d2      	lsls	r2, r2, #23
 8001268:	0dd2      	lsrs	r2, r2, #23
 800126a:	b292      	uxth	r2, r2
 800126c:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3302      	adds	r3, #2
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	e007      	b.n	8001286 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1c59      	adds	r1, r3, #1
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2252      	movs	r2, #82	; 0x52
 800128a:	5a9b      	ldrh	r3, [r3, r2]
 800128c:	b29b      	uxth	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1c3      	bne.n	800121a <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	0013      	movs	r3, r2
 800129c:	2200      	movs	r2, #0
 800129e:	2140      	movs	r1, #64	; 0x40
 80012a0:	f000 fa4e 	bl	8001740 <UART_WaitOnFlagUntilTimeout>
 80012a4:	1e03      	subs	r3, r0, #0
 80012a6:	d001      	beq.n	80012ac <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e00a      	b.n	80012c2 <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2269      	movs	r2, #105	; 0x69
 80012b0:	2120      	movs	r1, #32
 80012b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2268      	movs	r2, #104	; 0x68
 80012b8:	2100      	movs	r1, #0
 80012ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	e000      	b.n	80012c2 <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 80012c0:	2302      	movs	r3, #2
  }
}
 80012c2:	0018      	movs	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b006      	add	sp, #24
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80012d8:	2317      	movs	r3, #23
 80012da:	18fb      	adds	r3, r7, r3
 80012dc:	2210      	movs	r2, #16
 80012de:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 80012e0:	230a      	movs	r3, #10
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	2200      	movs	r2, #0
 80012e6:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 80012e8:	2314      	movs	r3, #20
 80012ea:	18fb      	adds	r3, r7, r3
 80012ec:	2200      	movs	r2, #0
 80012ee:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 80012f0:	2313      	movs	r3, #19
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	431a      	orrs	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	4313      	orrs	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	499f      	ldr	r1, [pc, #636]	; (8001598 <UART_SetConfig+0x2cc>)
 800131c:	4011      	ands	r1, r2
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	430a      	orrs	r2, r1
 8001322:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6812      	ldr	r2, [r2, #0]
 800132c:	6852      	ldr	r2, [r2, #4]
 800132e:	499b      	ldr	r1, [pc, #620]	; (800159c <UART_SetConfig+0x2d0>)
 8001330:	4011      	ands	r1, r2
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68d2      	ldr	r2, [r2, #12]
 8001336:	430a      	orrs	r2, r1
 8001338:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699a      	ldr	r2, [r3, #24]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	4313      	orrs	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	6892      	ldr	r2, [r2, #8]
 8001350:	4993      	ldr	r1, [pc, #588]	; (80015a0 <UART_SetConfig+0x2d4>)
 8001352:	4011      	ands	r1, r2
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	430a      	orrs	r2, r1
 8001358:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a91      	ldr	r2, [pc, #580]	; (80015a4 <UART_SetConfig+0x2d8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d125      	bne.n	80013b0 <UART_SetConfig+0xe4>
 8001364:	4b90      	ldr	r3, [pc, #576]	; (80015a8 <UART_SetConfig+0x2dc>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	2203      	movs	r2, #3
 800136a:	4013      	ands	r3, r2
 800136c:	2b01      	cmp	r3, #1
 800136e:	d00f      	beq.n	8001390 <UART_SetConfig+0xc4>
 8001370:	d304      	bcc.n	800137c <UART_SetConfig+0xb0>
 8001372:	2b02      	cmp	r3, #2
 8001374:	d011      	beq.n	800139a <UART_SetConfig+0xce>
 8001376:	2b03      	cmp	r3, #3
 8001378:	d005      	beq.n	8001386 <UART_SetConfig+0xba>
 800137a:	e013      	b.n	80013a4 <UART_SetConfig+0xd8>
 800137c:	2317      	movs	r3, #23
 800137e:	18fb      	adds	r3, r7, r3
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
 8001384:	e022      	b.n	80013cc <UART_SetConfig+0x100>
 8001386:	2317      	movs	r3, #23
 8001388:	18fb      	adds	r3, r7, r3
 800138a:	2202      	movs	r2, #2
 800138c:	701a      	strb	r2, [r3, #0]
 800138e:	e01d      	b.n	80013cc <UART_SetConfig+0x100>
 8001390:	2317      	movs	r3, #23
 8001392:	18fb      	adds	r3, r7, r3
 8001394:	2204      	movs	r2, #4
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	e018      	b.n	80013cc <UART_SetConfig+0x100>
 800139a:	2317      	movs	r3, #23
 800139c:	18fb      	adds	r3, r7, r3
 800139e:	2208      	movs	r2, #8
 80013a0:	701a      	strb	r2, [r3, #0]
 80013a2:	e013      	b.n	80013cc <UART_SetConfig+0x100>
 80013a4:	2317      	movs	r3, #23
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	2210      	movs	r2, #16
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	46c0      	nop			; (mov r8, r8)
 80013ae:	e00d      	b.n	80013cc <UART_SetConfig+0x100>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a7d      	ldr	r2, [pc, #500]	; (80015ac <UART_SetConfig+0x2e0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d104      	bne.n	80013c4 <UART_SetConfig+0xf8>
 80013ba:	2317      	movs	r3, #23
 80013bc:	18fb      	adds	r3, r7, r3
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	e003      	b.n	80013cc <UART_SetConfig+0x100>
 80013c4:	2317      	movs	r3, #23
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	2210      	movs	r2, #16
 80013ca:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69da      	ldr	r2, [r3, #28]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d000      	beq.n	80013da <UART_SetConfig+0x10e>
 80013d8:	e07b      	b.n	80014d2 <UART_SetConfig+0x206>
  {
    switch (clocksource)
 80013da:	2317      	movs	r3, #23
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d01c      	beq.n	800141e <UART_SetConfig+0x152>
 80013e4:	dc02      	bgt.n	80013ec <UART_SetConfig+0x120>
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <UART_SetConfig+0x12a>
 80013ea:	e04f      	b.n	800148c <UART_SetConfig+0x1c0>
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d027      	beq.n	8001440 <UART_SetConfig+0x174>
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d039      	beq.n	8001468 <UART_SetConfig+0x19c>
 80013f4:	e04a      	b.n	800148c <UART_SetConfig+0x1c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80013f6:	f7ff fe57 	bl	80010a8 <HAL_RCC_GetPCLK1Freq>
 80013fa:	0003      	movs	r3, r0
 80013fc:	005a      	lsls	r2, r3, #1
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	085b      	lsrs	r3, r3, #1
 8001404:	18d2      	adds	r2, r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	0019      	movs	r1, r3
 800140c:	0010      	movs	r0, r2
 800140e:	f7fe fe7b 	bl	8000108 <__udivsi3>
 8001412:	0003      	movs	r3, r0
 8001414:	001a      	movs	r2, r3
 8001416:	2314      	movs	r3, #20
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	801a      	strh	r2, [r3, #0]
        break;
 800141c:	e03b      	b.n	8001496 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	085b      	lsrs	r3, r3, #1
 8001424:	4a62      	ldr	r2, [pc, #392]	; (80015b0 <UART_SetConfig+0x2e4>)
 8001426:	189a      	adds	r2, r3, r2
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	0019      	movs	r1, r3
 800142e:	0010      	movs	r0, r2
 8001430:	f7fe fe6a 	bl	8000108 <__udivsi3>
 8001434:	0003      	movs	r3, r0
 8001436:	001a      	movs	r2, r3
 8001438:	2314      	movs	r3, #20
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	801a      	strh	r2, [r3, #0]
        break;
 800143e:	e02a      	b.n	8001496 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001440:	f7ff fdc8 	bl	8000fd4 <HAL_RCC_GetSysClockFreq>
 8001444:	0003      	movs	r3, r0
 8001446:	005a      	lsls	r2, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	085b      	lsrs	r3, r3, #1
 800144e:	18d2      	adds	r2, r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	0019      	movs	r1, r3
 8001456:	0010      	movs	r0, r2
 8001458:	f7fe fe56 	bl	8000108 <__udivsi3>
 800145c:	0003      	movs	r3, r0
 800145e:	001a      	movs	r2, r3
 8001460:	2314      	movs	r3, #20
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	801a      	strh	r2, [r3, #0]
        break;
 8001466:	e016      	b.n	8001496 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	085b      	lsrs	r3, r3, #1
 800146e:	2280      	movs	r2, #128	; 0x80
 8001470:	0252      	lsls	r2, r2, #9
 8001472:	189a      	adds	r2, r3, r2
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	0019      	movs	r1, r3
 800147a:	0010      	movs	r0, r2
 800147c:	f7fe fe44 	bl	8000108 <__udivsi3>
 8001480:	0003      	movs	r3, r0
 8001482:	001a      	movs	r2, r3
 8001484:	2314      	movs	r3, #20
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	801a      	strh	r2, [r3, #0]
        break;
 800148a:	e004      	b.n	8001496 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800148c:	2313      	movs	r3, #19
 800148e:	18fb      	adds	r3, r7, r3
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
        break;
 8001494:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001496:	230a      	movs	r3, #10
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	2214      	movs	r2, #20
 800149c:	18ba      	adds	r2, r7, r2
 800149e:	8812      	ldrh	r2, [r2, #0]
 80014a0:	210f      	movs	r1, #15
 80014a2:	438a      	bics	r2, r1
 80014a4:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80014a6:	2314      	movs	r3, #20
 80014a8:	18fb      	adds	r3, r7, r3
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	105b      	asrs	r3, r3, #1
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	2207      	movs	r2, #7
 80014b2:	4013      	ands	r3, r2
 80014b4:	b299      	uxth	r1, r3
 80014b6:	230a      	movs	r3, #10
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	220a      	movs	r2, #10
 80014bc:	18ba      	adds	r2, r7, r2
 80014be:	8812      	ldrh	r2, [r2, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	220a      	movs	r2, #10
 80014ca:	18ba      	adds	r2, r7, r2
 80014cc:	8812      	ldrh	r2, [r2, #0]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	e05b      	b.n	800158a <UART_SetConfig+0x2be>
  }
  else
  {
    switch (clocksource)
 80014d2:	2317      	movs	r3, #23
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d01b      	beq.n	8001514 <UART_SetConfig+0x248>
 80014dc:	dc02      	bgt.n	80014e4 <UART_SetConfig+0x218>
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <UART_SetConfig+0x222>
 80014e2:	e04d      	b.n	8001580 <UART_SetConfig+0x2b4>
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d026      	beq.n	8001536 <UART_SetConfig+0x26a>
 80014e8:	2b08      	cmp	r3, #8
 80014ea:	d037      	beq.n	800155c <UART_SetConfig+0x290>
 80014ec:	e048      	b.n	8001580 <UART_SetConfig+0x2b4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681c      	ldr	r4, [r3, #0]
 80014f2:	f7ff fdd9 	bl	80010a8 <HAL_RCC_GetPCLK1Freq>
 80014f6:	0002      	movs	r2, r0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	085b      	lsrs	r3, r3, #1
 80014fe:	18d2      	adds	r2, r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	0019      	movs	r1, r3
 8001506:	0010      	movs	r0, r2
 8001508:	f7fe fdfe 	bl	8000108 <__udivsi3>
 800150c:	0003      	movs	r3, r0
 800150e:	b29b      	uxth	r3, r3
 8001510:	60e3      	str	r3, [r4, #12]
        break;
 8001512:	e03a      	b.n	800158a <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681c      	ldr	r4, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	085b      	lsrs	r3, r3, #1
 800151e:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <UART_SetConfig+0x2e8>)
 8001520:	189a      	adds	r2, r3, r2
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	0019      	movs	r1, r3
 8001528:	0010      	movs	r0, r2
 800152a:	f7fe fded 	bl	8000108 <__udivsi3>
 800152e:	0003      	movs	r3, r0
 8001530:	b29b      	uxth	r3, r3
 8001532:	60e3      	str	r3, [r4, #12]
        break;
 8001534:	e029      	b.n	800158a <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681c      	ldr	r4, [r3, #0]
 800153a:	f7ff fd4b 	bl	8000fd4 <HAL_RCC_GetSysClockFreq>
 800153e:	0002      	movs	r2, r0
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	085b      	lsrs	r3, r3, #1
 8001546:	18d2      	adds	r2, r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	0019      	movs	r1, r3
 800154e:	0010      	movs	r0, r2
 8001550:	f7fe fdda 	bl	8000108 <__udivsi3>
 8001554:	0003      	movs	r3, r0
 8001556:	b29b      	uxth	r3, r3
 8001558:	60e3      	str	r3, [r4, #12]
        break;
 800155a:	e016      	b.n	800158a <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681c      	ldr	r4, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	085b      	lsrs	r3, r3, #1
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	0212      	lsls	r2, r2, #8
 800156a:	189a      	adds	r2, r3, r2
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	0019      	movs	r1, r3
 8001572:	0010      	movs	r0, r2
 8001574:	f7fe fdc8 	bl	8000108 <__udivsi3>
 8001578:	0003      	movs	r3, r0
 800157a:	b29b      	uxth	r3, r3
 800157c:	60e3      	str	r3, [r4, #12]
        break;
 800157e:	e004      	b.n	800158a <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001580:	2313      	movs	r3, #19
 8001582:	18fb      	adds	r3, r7, r3
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
        break;
 8001588:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 800158a:	2313      	movs	r3, #19
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	781b      	ldrb	r3, [r3, #0]

}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	b007      	add	sp, #28
 8001596:	bd90      	pop	{r4, r7, pc}
 8001598:	ffff69f3 	.word	0xffff69f3
 800159c:	ffffcfff 	.word	0xffffcfff
 80015a0:	fffff4ff 	.word	0xfffff4ff
 80015a4:	40013800 	.word	0x40013800
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40004400 	.word	0x40004400
 80015b0:	00f42400 	.word	0x00f42400
 80015b4:	007a1200 	.word	0x007a1200

080015b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	2201      	movs	r2, #1
 80015c6:	4013      	ands	r3, r2
 80015c8:	d00a      	beq.n	80015e0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	6852      	ldr	r2, [r2, #4]
 80015d4:	4945      	ldr	r1, [pc, #276]	; (80016ec <UART_AdvFeatureConfig+0x134>)
 80015d6:	4011      	ands	r1, r2
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80015dc:	430a      	orrs	r2, r1
 80015de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	2202      	movs	r2, #2
 80015e6:	4013      	ands	r3, r2
 80015e8:	d00a      	beq.n	8001600 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	6852      	ldr	r2, [r2, #4]
 80015f4:	493e      	ldr	r1, [pc, #248]	; (80016f0 <UART_AdvFeatureConfig+0x138>)
 80015f6:	4011      	ands	r1, r2
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015fc:	430a      	orrs	r2, r1
 80015fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	2204      	movs	r2, #4
 8001606:	4013      	ands	r3, r2
 8001608:	d00a      	beq.n	8001620 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	6852      	ldr	r2, [r2, #4]
 8001614:	4937      	ldr	r1, [pc, #220]	; (80016f4 <UART_AdvFeatureConfig+0x13c>)
 8001616:	4011      	ands	r1, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800161c:	430a      	orrs	r2, r1
 800161e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	2208      	movs	r2, #8
 8001626:	4013      	ands	r3, r2
 8001628:	d00a      	beq.n	8001640 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	6852      	ldr	r2, [r2, #4]
 8001634:	4930      	ldr	r1, [pc, #192]	; (80016f8 <UART_AdvFeatureConfig+0x140>)
 8001636:	4011      	ands	r1, r2
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800163c:	430a      	orrs	r2, r1
 800163e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	2210      	movs	r2, #16
 8001646:	4013      	ands	r3, r2
 8001648:	d00a      	beq.n	8001660 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	6892      	ldr	r2, [r2, #8]
 8001654:	4929      	ldr	r1, [pc, #164]	; (80016fc <UART_AdvFeatureConfig+0x144>)
 8001656:	4011      	ands	r1, r2
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800165c:	430a      	orrs	r2, r1
 800165e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	2220      	movs	r2, #32
 8001666:	4013      	ands	r3, r2
 8001668:	d00a      	beq.n	8001680 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	6892      	ldr	r2, [r2, #8]
 8001674:	4922      	ldr	r1, [pc, #136]	; (8001700 <UART_AdvFeatureConfig+0x148>)
 8001676:	4011      	ands	r1, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800167c:	430a      	orrs	r2, r1
 800167e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	2240      	movs	r2, #64	; 0x40
 8001686:	4013      	ands	r3, r2
 8001688:	d01b      	beq.n	80016c2 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	6852      	ldr	r2, [r2, #4]
 8001694:	491b      	ldr	r1, [pc, #108]	; (8001704 <UART_AdvFeatureConfig+0x14c>)
 8001696:	4011      	ands	r1, r2
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800169c:	430a      	orrs	r2, r1
 800169e:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	035b      	lsls	r3, r3, #13
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d10a      	bne.n	80016c2 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	6852      	ldr	r2, [r2, #4]
 80016b6:	4914      	ldr	r1, [pc, #80]	; (8001708 <UART_AdvFeatureConfig+0x150>)
 80016b8:	4011      	ands	r1, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016be:	430a      	orrs	r2, r1
 80016c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	2280      	movs	r2, #128	; 0x80
 80016c8:	4013      	ands	r3, r2
 80016ca:	d00a      	beq.n	80016e2 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	6852      	ldr	r2, [r2, #4]
 80016d6:	490d      	ldr	r1, [pc, #52]	; (800170c <UART_AdvFeatureConfig+0x154>)
 80016d8:	4011      	ands	r1, r2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016de:	430a      	orrs	r2, r1
 80016e0:	605a      	str	r2, [r3, #4]
  }
}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b002      	add	sp, #8
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	fffdffff 	.word	0xfffdffff
 80016f0:	fffeffff 	.word	0xfffeffff
 80016f4:	fffbffff 	.word	0xfffbffff
 80016f8:	ffff7fff 	.word	0xffff7fff
 80016fc:	ffffefff 	.word	0xffffefff
 8001700:	ffffdfff 	.word	0xffffdfff
 8001704:	ffefffff 	.word	0xffefffff
 8001708:	ff9fffff 	.word	0xff9fffff
 800170c:	fff7ffff 	.word	0xfff7ffff

08001710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2269      	movs	r2, #105	; 0x69
 8001722:	2120      	movs	r1, #32
 8001724:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	226a      	movs	r2, #106	; 0x6a
 800172a:	2120      	movs	r1, #32
 800172c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2268      	movs	r2, #104	; 0x68
 8001732:	2100      	movs	r1, #0
 8001734:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	0018      	movs	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	b002      	add	sp, #8
 800173e:	bd80      	pop	{r7, pc}

08001740 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	1dfb      	adds	r3, r7, #7
 800174e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001750:	e02b      	b.n	80017aa <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	3301      	adds	r3, #1
 8001756:	d028      	beq.n	80017aa <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d007      	beq.n	800176e <UART_WaitOnFlagUntilTimeout+0x2e>
 800175e:	f7fe fd9b 	bl	8000298 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	1ad2      	subs	r2, r2, r3
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	429a      	cmp	r2, r3
 800176c:	d91d      	bls.n	80017aa <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	4916      	ldr	r1, [pc, #88]	; (80017d4 <UART_WaitOnFlagUntilTimeout+0x94>)
 800177a:	400a      	ands	r2, r1
 800177c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	6892      	ldr	r2, [r2, #8]
 8001788:	2101      	movs	r1, #1
 800178a:	438a      	bics	r2, r1
 800178c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2269      	movs	r2, #105	; 0x69
 8001792:	2120      	movs	r1, #32
 8001794:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	226a      	movs	r2, #106	; 0x6a
 800179a:	2120      	movs	r1, #32
 800179c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2268      	movs	r2, #104	; 0x68
 80017a2:	2100      	movs	r1, #0
 80017a4:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e00f      	b.n	80017ca <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	425a      	negs	r2, r3
 80017ba:	4153      	adcs	r3, r2
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	001a      	movs	r2, r3
 80017c0:	1dfb      	adds	r3, r7, #7
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d0c4      	beq.n	8001752 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b004      	add	sp, #16
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	fffffe5f 	.word	0xfffffe5f

080017d8 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017dc:	f7fe fd20 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e0:	f000 f826 	bl	8001830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e4:	f000 f8ba 	bl	800195c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017e8:	f000 f882 	bl	80018f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  /* USER CODE END WHILE */
	 if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	019b      	lsls	r3, r3, #6
 80017f0:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <main+0x4c>)
 80017f2:	0019      	movs	r1, r3
 80017f4:	0010      	movs	r0, r2
 80017f6:	f7fe ffc7 	bl	8000788 <HAL_GPIO_ReadPin>
 80017fa:	1e03      	subs	r3, r0, #0
 80017fc:	d1f6      	bne.n	80017ec <main+0x14>
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80017fe:	2390      	movs	r3, #144	; 0x90
 8001800:	05db      	lsls	r3, r3, #23
 8001802:	2120      	movs	r1, #32
 8001804:	0018      	movs	r0, r3
 8001806:	f7fe fff9 	bl	80007fc <HAL_GPIO_TogglePin>
		  HAL_UART_Transmit(&huart2, (unsigned char *)"BUTTON PRESSED\r\n", sizeof("BUTTON RELEASED\r\n"), 1000);
 800180a:	23fa      	movs	r3, #250	; 0xfa
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4906      	ldr	r1, [pc, #24]	; (8001828 <main+0x50>)
 8001810:	4806      	ldr	r0, [pc, #24]	; (800182c <main+0x54>)
 8001812:	2212      	movs	r2, #18
 8001814:	f7ff fcb6 	bl	8001184 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8001818:	23fa      	movs	r3, #250	; 0xfa
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	0018      	movs	r0, r3
 800181e:	f7fe fd45 	bl	80002ac <HAL_Delay>
	 if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8001822:	e7e3      	b.n	80017ec <main+0x14>
 8001824:	48000800 	.word	0x48000800
 8001828:	08001c94 	.word	0x08001c94
 800182c:	20000024 	.word	0x20000024

08001830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b090      	sub	sp, #64	; 0x40
 8001834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001836:	2310      	movs	r3, #16
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	2202      	movs	r2, #2
 800183c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800183e:	2310      	movs	r3, #16
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	2201      	movs	r2, #1
 8001844:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001846:	2310      	movs	r3, #16
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	2210      	movs	r2, #16
 800184c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184e:	2310      	movs	r3, #16
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	2202      	movs	r2, #2
 8001854:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001856:	2310      	movs	r3, #16
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800185e:	2310      	movs	r3, #16
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	22a0      	movs	r2, #160	; 0xa0
 8001864:	0392      	lsls	r2, r2, #14
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001868:	2310      	movs	r3, #16
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	2200      	movs	r2, #0
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001870:	2310      	movs	r3, #16
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	0018      	movs	r0, r3
 8001876:	f7fe ffd3 	bl	8000820 <HAL_RCC_OscConfig>
 800187a:	1e03      	subs	r3, r0, #0
 800187c:	d004      	beq.n	8001888 <SystemClock_Config+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 800187e:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <SystemClock_Config+0xbc>)
 8001880:	2191      	movs	r1, #145	; 0x91
 8001882:	0018      	movs	r0, r3
 8001884:	f000 f8d4 	bl	8001a30 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001888:	003b      	movs	r3, r7
 800188a:	2207      	movs	r2, #7
 800188c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188e:	003b      	movs	r3, r7
 8001890:	2202      	movs	r2, #2
 8001892:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001894:	003b      	movs	r3, r7
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800189a:	003b      	movs	r3, r7
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018a0:	003b      	movs	r3, r7
 80018a2:	2101      	movs	r1, #1
 80018a4:	0018      	movs	r0, r3
 80018a6:	f7ff faaf 	bl	8000e08 <HAL_RCC_ClockConfig>
 80018aa:	1e03      	subs	r3, r0, #0
 80018ac:	d004      	beq.n	80018b8 <SystemClock_Config+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <SystemClock_Config+0xbc>)
 80018b0:	219e      	movs	r1, #158	; 0x9e
 80018b2:	0018      	movs	r0, r3
 80018b4:	f000 f8bc 	bl	8001a30 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80018b8:	f7ff fbec 	bl	8001094 <HAL_RCC_GetHCLKFreq>
 80018bc:	0002      	movs	r2, r0
 80018be:	23fa      	movs	r3, #250	; 0xfa
 80018c0:	0099      	lsls	r1, r3, #2
 80018c2:	0010      	movs	r0, r2
 80018c4:	f7fe fc20 	bl	8000108 <__udivsi3>
 80018c8:	0003      	movs	r3, r0
 80018ca:	0018      	movs	r0, r3
 80018cc:	f7fe fdb4 	bl	8000438 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80018d0:	2004      	movs	r0, #4
 80018d2:	f7fe fdbf 	bl	8000454 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80018d6:	2301      	movs	r3, #1
 80018d8:	425b      	negs	r3, r3
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	0018      	movs	r0, r3
 80018e0:	f7fe fd94 	bl	800040c <HAL_NVIC_SetPriority>
}
 80018e4:	46c0      	nop			; (mov r8, r8)
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b010      	add	sp, #64	; 0x40
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	08001ca8 	.word	0x08001ca8

080018f0 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <MX_USART2_UART_Init+0x60>)
 80018f6:	4a17      	ldr	r2, [pc, #92]	; (8001954 <MX_USART2_UART_Init+0x64>)
 80018f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <MX_USART2_UART_Init+0x60>)
 80018fc:	22e1      	movs	r2, #225	; 0xe1
 80018fe:	0252      	lsls	r2, r2, #9
 8001900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <MX_USART2_UART_Init+0x60>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_USART2_UART_Init+0x60>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <MX_USART2_UART_Init+0x60>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_USART2_UART_Init+0x60>)
 8001916:	220c      	movs	r2, #12
 8001918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <MX_USART2_UART_Init+0x60>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <MX_USART2_UART_Init+0x60>)
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <MX_USART2_UART_Init+0x60>)
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <MX_USART2_UART_Init+0x60>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <MX_USART2_UART_Init+0x60>)
 8001934:	0018      	movs	r0, r3
 8001936:	f7ff fbcd 	bl	80010d4 <HAL_UART_Init>
 800193a:	1e03      	subs	r3, r0, #0
 800193c:	d004      	beq.n	8001948 <MX_USART2_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <MX_USART2_UART_Init+0x68>)
 8001940:	21bd      	movs	r1, #189	; 0xbd
 8001942:	0018      	movs	r0, r3
 8001944:	f000 f874 	bl	8001a30 <_Error_Handler>
  }

}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	20000024 	.word	0x20000024
 8001954:	40004400 	.word	0x40004400
 8001958:	08001ca8 	.word	0x08001ca8

0800195c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001962:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <MX_GPIO_Init+0xc8>)
 8001964:	4a2f      	ldr	r2, [pc, #188]	; (8001a24 <MX_GPIO_Init+0xc8>)
 8001966:	6952      	ldr	r2, [r2, #20]
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	0309      	lsls	r1, r1, #12
 800196c:	430a      	orrs	r2, r1
 800196e:	615a      	str	r2, [r3, #20]
 8001970:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <MX_GPIO_Init+0xc8>)
 8001972:	695a      	ldr	r2, [r3, #20]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	031b      	lsls	r3, r3, #12
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800197e:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <MX_GPIO_Init+0xc8>)
 8001980:	4a28      	ldr	r2, [pc, #160]	; (8001a24 <MX_GPIO_Init+0xc8>)
 8001982:	6952      	ldr	r2, [r2, #20]
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	03c9      	lsls	r1, r1, #15
 8001988:	430a      	orrs	r2, r1
 800198a:	615a      	str	r2, [r3, #20]
 800198c:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <MX_GPIO_Init+0xc8>)
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	03db      	lsls	r3, r3, #15
 8001994:	4013      	ands	r3, r2
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <MX_GPIO_Init+0xc8>)
 800199c:	4a21      	ldr	r2, [pc, #132]	; (8001a24 <MX_GPIO_Init+0xc8>)
 800199e:	6952      	ldr	r2, [r2, #20]
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	0289      	lsls	r1, r1, #10
 80019a4:	430a      	orrs	r2, r1
 80019a6:	615a      	str	r2, [r3, #20]
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <MX_GPIO_Init+0xc8>)
 80019aa:	695a      	ldr	r2, [r3, #20]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	029b      	lsls	r3, r3, #10
 80019b0:	4013      	ands	r3, r2
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019b6:	2390      	movs	r3, #144	; 0x90
 80019b8:	05db      	lsls	r3, r3, #23
 80019ba:	2200      	movs	r2, #0
 80019bc:	2120      	movs	r1, #32
 80019be:	0018      	movs	r0, r3
 80019c0:	f7fe feff 	bl	80007c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019c4:	230c      	movs	r3, #12
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	2280      	movs	r2, #128	; 0x80
 80019ca:	0192      	lsls	r2, r2, #6
 80019cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ce:	230c      	movs	r3, #12
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <MX_GPIO_Init+0xcc>)
 80019d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	230c      	movs	r3, #12
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019de:	230c      	movs	r3, #12
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <MX_GPIO_Init+0xd0>)
 80019e4:	0019      	movs	r1, r3
 80019e6:	0010      	movs	r0, r2
 80019e8:	f7fe fd5a 	bl	80004a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019ec:	230c      	movs	r3, #12
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	2220      	movs	r2, #32
 80019f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	230c      	movs	r3, #12
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	2201      	movs	r2, #1
 80019fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	230c      	movs	r3, #12
 80019fe:	18fb      	adds	r3, r7, r3
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	230c      	movs	r3, #12
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	2200      	movs	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	18fa      	adds	r2, r7, r3
 8001a10:	2390      	movs	r3, #144	; 0x90
 8001a12:	05db      	lsls	r3, r3, #23
 8001a14:	0011      	movs	r1, r2
 8001a16:	0018      	movs	r0, r3
 8001a18:	f7fe fd42 	bl	80004a0 <HAL_GPIO_Init>

}
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b008      	add	sp, #32
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	10210000 	.word	0x10210000
 8001a2c:	48000800 	.word	0x48000800

08001a30 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001a3a:	e7fe      	b.n	8001a3a <_Error_Handler+0xa>

08001a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_MspInit+0x6c>)
 8001a44:	4a18      	ldr	r2, [pc, #96]	; (8001aa8 <HAL_MspInit+0x6c>)
 8001a46:	6992      	ldr	r2, [r2, #24]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	619a      	str	r2, [r3, #24]
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_MspInit+0x6c>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2201      	movs	r2, #1
 8001a54:	4013      	ands	r3, r2
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <HAL_MspInit+0x6c>)
 8001a5c:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <HAL_MspInit+0x6c>)
 8001a5e:	69d2      	ldr	r2, [r2, #28]
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	0549      	lsls	r1, r1, #21
 8001a64:	430a      	orrs	r2, r1
 8001a66:	61da      	str	r2, [r3, #28]
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_MspInit+0x6c>)
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	055b      	lsls	r3, r3, #21
 8001a70:	4013      	ands	r3, r2
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001a76:	2305      	movs	r3, #5
 8001a78:	425b      	negs	r3, r3
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f7fe fcc4 	bl	800040c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001a84:	2302      	movs	r3, #2
 8001a86:	425b      	negs	r3, r3
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f7fe fcbd 	bl	800040c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a92:	2301      	movs	r3, #1
 8001a94:	425b      	negs	r3, r3
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f7fe fcb6 	bl	800040c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa0:	46c0      	nop			; (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000

08001aac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a18      	ldr	r2, [pc, #96]	; (8001b1c <HAL_UART_MspInit+0x70>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d129      	bne.n	8001b12 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001abe:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_UART_MspInit+0x74>)
 8001ac0:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_UART_MspInit+0x74>)
 8001ac2:	69d2      	ldr	r2, [r2, #28]
 8001ac4:	2180      	movs	r1, #128	; 0x80
 8001ac6:	0289      	lsls	r1, r1, #10
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	61da      	str	r2, [r3, #28]
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <HAL_UART_MspInit+0x74>)
 8001ace:	69da      	ldr	r2, [r3, #28]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	029b      	lsls	r3, r3, #10
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ada:	230c      	movs	r3, #12
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	220c      	movs	r2, #12
 8001ae0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	230c      	movs	r3, #12
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	230c      	movs	r3, #12
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	230c      	movs	r3, #12
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001afa:	230c      	movs	r3, #12
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	2201      	movs	r2, #1
 8001b00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	230c      	movs	r3, #12
 8001b04:	18fa      	adds	r2, r7, r3
 8001b06:	2390      	movs	r3, #144	; 0x90
 8001b08:	05db      	lsls	r3, r3, #23
 8001b0a:	0011      	movs	r1, r2
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7fe fcc7 	bl	80004a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b008      	add	sp, #32
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	40004400 	.word	0x40004400
 8001b20:	40021000 	.word	0x40021000

08001b24 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b28:	f7fe fbaa 	bl	8000280 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001b2c:	f7fe fcac 	bl	8000488 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <SystemInit+0x70>)
 8001b3e:	4a1a      	ldr	r2, [pc, #104]	; (8001ba8 <SystemInit+0x70>)
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	2101      	movs	r1, #1
 8001b44:	430a      	orrs	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <SystemInit+0x70>)
 8001b4a:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <SystemInit+0x70>)
 8001b4c:	6852      	ldr	r2, [r2, #4]
 8001b4e:	4917      	ldr	r1, [pc, #92]	; (8001bac <SystemInit+0x74>)
 8001b50:	400a      	ands	r2, r1
 8001b52:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <SystemInit+0x70>)
 8001b56:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <SystemInit+0x70>)
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	4915      	ldr	r1, [pc, #84]	; (8001bb0 <SystemInit+0x78>)
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <SystemInit+0x70>)
 8001b62:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <SystemInit+0x70>)
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	4913      	ldr	r1, [pc, #76]	; (8001bb4 <SystemInit+0x7c>)
 8001b68:	400a      	ands	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <SystemInit+0x70>)
 8001b6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <SystemInit+0x70>)
 8001b70:	6852      	ldr	r2, [r2, #4]
 8001b72:	4911      	ldr	r1, [pc, #68]	; (8001bb8 <SystemInit+0x80>)
 8001b74:	400a      	ands	r2, r1
 8001b76:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <SystemInit+0x70>)
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <SystemInit+0x70>)
 8001b7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b7e:	210f      	movs	r1, #15
 8001b80:	438a      	bics	r2, r1
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <SystemInit+0x70>)
 8001b86:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <SystemInit+0x70>)
 8001b88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b8a:	490c      	ldr	r1, [pc, #48]	; (8001bbc <SystemInit+0x84>)
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <SystemInit+0x70>)
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <SystemInit+0x70>)
 8001b94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b96:	2101      	movs	r1, #1
 8001b98:	438a      	bics	r2, r1
 8001b9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001b9c:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <SystemInit+0x70>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]

}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	08ffb80c 	.word	0x08ffb80c
 8001bb0:	fef6ffff 	.word	0xfef6ffff
 8001bb4:	fffbffff 	.word	0xfffbffff
 8001bb8:	ffc0ffff 	.word	0xffc0ffff
 8001bbc:	fffffeec 	.word	0xfffffeec

08001bc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bc0:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bc2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc4:	480d      	ldr	r0, [pc, #52]	; (8001bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8001bc6:	490e      	ldr	r1, [pc, #56]	; (8001c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc8:	4a0e      	ldr	r2, [pc, #56]	; (8001c04 <LoopForever+0xe>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bdc:	4c0b      	ldr	r4, [pc, #44]	; (8001c0c <LoopForever+0x16>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bea:	f7ff ffa5 	bl	8001b38 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001bee:	f000 f811 	bl	8001c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bf2:	f7ff fdf1 	bl	80017d8 <main>

08001bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bf6:	e7fe      	b.n	8001bf6 <LoopForever>
  ldr   r0, =_estack
 8001bf8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001c04:	08001cd8 	.word	0x08001cd8
  ldr r2, =_sbss
 8001c08:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001c0c:	20000094 	.word	0x20000094

08001c10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC1_IRQHandler>
	...

08001c14 <__libc_init_array>:
 8001c14:	b570      	push	{r4, r5, r6, lr}
 8001c16:	2600      	movs	r6, #0
 8001c18:	4d0c      	ldr	r5, [pc, #48]	; (8001c4c <__libc_init_array+0x38>)
 8001c1a:	4c0d      	ldr	r4, [pc, #52]	; (8001c50 <__libc_init_array+0x3c>)
 8001c1c:	1b64      	subs	r4, r4, r5
 8001c1e:	10a4      	asrs	r4, r4, #2
 8001c20:	42a6      	cmp	r6, r4
 8001c22:	d109      	bne.n	8001c38 <__libc_init_array+0x24>
 8001c24:	2600      	movs	r6, #0
 8001c26:	f000 f819 	bl	8001c5c <_init>
 8001c2a:	4d0a      	ldr	r5, [pc, #40]	; (8001c54 <__libc_init_array+0x40>)
 8001c2c:	4c0a      	ldr	r4, [pc, #40]	; (8001c58 <__libc_init_array+0x44>)
 8001c2e:	1b64      	subs	r4, r4, r5
 8001c30:	10a4      	asrs	r4, r4, #2
 8001c32:	42a6      	cmp	r6, r4
 8001c34:	d105      	bne.n	8001c42 <__libc_init_array+0x2e>
 8001c36:	bd70      	pop	{r4, r5, r6, pc}
 8001c38:	00b3      	lsls	r3, r6, #2
 8001c3a:	58eb      	ldr	r3, [r5, r3]
 8001c3c:	4798      	blx	r3
 8001c3e:	3601      	adds	r6, #1
 8001c40:	e7ee      	b.n	8001c20 <__libc_init_array+0xc>
 8001c42:	00b3      	lsls	r3, r6, #2
 8001c44:	58eb      	ldr	r3, [r5, r3]
 8001c46:	4798      	blx	r3
 8001c48:	3601      	adds	r6, #1
 8001c4a:	e7f2      	b.n	8001c32 <__libc_init_array+0x1e>
 8001c4c:	08001cd0 	.word	0x08001cd0
 8001c50:	08001cd0 	.word	0x08001cd0
 8001c54:	08001cd0 	.word	0x08001cd0
 8001c58:	08001cd4 	.word	0x08001cd4

08001c5c <_init>:
 8001c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c62:	bc08      	pop	{r3}
 8001c64:	469e      	mov	lr, r3
 8001c66:	4770      	bx	lr

08001c68 <_fini>:
 8001c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c6e:	bc08      	pop	{r3}
 8001c70:	469e      	mov	lr, r3
 8001c72:	4770      	bx	lr
