
DefaultFreeRTOSTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bec  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002cac  08002cac  00012cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002d30  08002d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002d34  08002d34  00012d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08002d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000dd8  20000008  08002d40  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000de0  08002d40  00020de0  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000dc23  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001fc9  00000000  00000000  0002dc53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000990  00000000  00000000  0002fc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008a8  00000000  00000000  000305b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004773  00000000  00000000  00030e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000326e  00000000  00000000  000355cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00038839  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002078  00000000  00000000  000388b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c94 	.word	0x08002c94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08002c94 	.word	0x08002c94

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2003      	movs	r0, #3
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f002 fc1d 	bl	8002a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f000 fef6 	bl	8001040 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8ca 	bl	80003fc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8ad 	bl	80003d0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000d68 	.word	0x20000d68

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000d68 	.word	0x20000d68

080002ac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b5b0      	push	{r4, r5, r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	0002      	movs	r2, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b7f      	cmp	r3, #127	; 0x7f
 80002c0:	d932      	bls.n	8000328 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c2:	4c2f      	ldr	r4, [pc, #188]	; (8000380 <NVIC_SetPriority+0xd4>)
 80002c4:	1dfb      	adds	r3, r7, #7
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	001a      	movs	r2, r3
 80002ca:	230f      	movs	r3, #15
 80002cc:	4013      	ands	r3, r2
 80002ce:	3b08      	subs	r3, #8
 80002d0:	0899      	lsrs	r1, r3, #2
 80002d2:	4a2b      	ldr	r2, [pc, #172]	; (8000380 <NVIC_SetPriority+0xd4>)
 80002d4:	1dfb      	adds	r3, r7, #7
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	0018      	movs	r0, r3
 80002da:	230f      	movs	r3, #15
 80002dc:	4003      	ands	r3, r0
 80002de:	3b08      	subs	r3, #8
 80002e0:	089b      	lsrs	r3, r3, #2
 80002e2:	3306      	adds	r3, #6
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	18d3      	adds	r3, r2, r3
 80002e8:	3304      	adds	r3, #4
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	1dfa      	adds	r2, r7, #7
 80002ee:	7812      	ldrb	r2, [r2, #0]
 80002f0:	0010      	movs	r0, r2
 80002f2:	2203      	movs	r2, #3
 80002f4:	4002      	ands	r2, r0
 80002f6:	00d2      	lsls	r2, r2, #3
 80002f8:	20ff      	movs	r0, #255	; 0xff
 80002fa:	4090      	lsls	r0, r2
 80002fc:	0002      	movs	r2, r0
 80002fe:	43d2      	mvns	r2, r2
 8000300:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	019b      	lsls	r3, r3, #6
 8000306:	20ff      	movs	r0, #255	; 0xff
 8000308:	4018      	ands	r0, r3
 800030a:	1dfb      	adds	r3, r7, #7
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	001d      	movs	r5, r3
 8000310:	2303      	movs	r3, #3
 8000312:	402b      	ands	r3, r5
 8000314:	00db      	lsls	r3, r3, #3
 8000316:	4098      	lsls	r0, r3
 8000318:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800031a:	431a      	orrs	r2, r3
 800031c:	1d8b      	adds	r3, r1, #6
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	18e3      	adds	r3, r4, r3
 8000322:	3304      	adds	r3, #4
 8000324:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000326:	e027      	b.n	8000378 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000328:	4c16      	ldr	r4, [pc, #88]	; (8000384 <NVIC_SetPriority+0xd8>)
 800032a:	1dfb      	adds	r3, r7, #7
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	b25b      	sxtb	r3, r3
 8000330:	089b      	lsrs	r3, r3, #2
 8000332:	4914      	ldr	r1, [pc, #80]	; (8000384 <NVIC_SetPriority+0xd8>)
 8000334:	1dfa      	adds	r2, r7, #7
 8000336:	7812      	ldrb	r2, [r2, #0]
 8000338:	b252      	sxtb	r2, r2
 800033a:	0892      	lsrs	r2, r2, #2
 800033c:	32c0      	adds	r2, #192	; 0xc0
 800033e:	0092      	lsls	r2, r2, #2
 8000340:	5852      	ldr	r2, [r2, r1]
 8000342:	1df9      	adds	r1, r7, #7
 8000344:	7809      	ldrb	r1, [r1, #0]
 8000346:	0008      	movs	r0, r1
 8000348:	2103      	movs	r1, #3
 800034a:	4001      	ands	r1, r0
 800034c:	00c9      	lsls	r1, r1, #3
 800034e:	20ff      	movs	r0, #255	; 0xff
 8000350:	4088      	lsls	r0, r1
 8000352:	0001      	movs	r1, r0
 8000354:	43c9      	mvns	r1, r1
 8000356:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000358:	683a      	ldr	r2, [r7, #0]
 800035a:	0192      	lsls	r2, r2, #6
 800035c:	20ff      	movs	r0, #255	; 0xff
 800035e:	4010      	ands	r0, r2
 8000360:	1dfa      	adds	r2, r7, #7
 8000362:	7812      	ldrb	r2, [r2, #0]
 8000364:	0015      	movs	r5, r2
 8000366:	2203      	movs	r2, #3
 8000368:	402a      	ands	r2, r5
 800036a:	00d2      	lsls	r2, r2, #3
 800036c:	4090      	lsls	r0, r2
 800036e:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000370:	430a      	orrs	r2, r1
 8000372:	33c0      	adds	r3, #192	; 0xc0
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	511a      	str	r2, [r3, r4]
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b002      	add	sp, #8
 800037e:	bdb0      	pop	{r4, r5, r7, pc}
 8000380:	e000ed00 	.word	0xe000ed00
 8000384:	e000e100 	.word	0xe000e100

08000388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	3b01      	subs	r3, #1
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <SysTick_Config+0x40>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d901      	bls.n	800039e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800039a:	2301      	movs	r3, #1
 800039c:	e010      	b.n	80003c0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <SysTick_Config+0x44>)
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	3a01      	subs	r2, #1
 80003a4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003a6:	2301      	movs	r3, #1
 80003a8:	425b      	negs	r3, r3
 80003aa:	2103      	movs	r1, #3
 80003ac:	0018      	movs	r0, r3
 80003ae:	f7ff ff7d 	bl	80002ac <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <SysTick_Config+0x44>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <SysTick_Config+0x44>)
 80003ba:	2207      	movs	r2, #7
 80003bc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003be:	2300      	movs	r3, #0
}
 80003c0:	0018      	movs	r0, r3
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b002      	add	sp, #8
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	00ffffff 	.word	0x00ffffff
 80003cc:	e000e010 	.word	0xe000e010

080003d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	607a      	str	r2, [r7, #4]
 80003da:	230f      	movs	r3, #15
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	1c02      	adds	r2, r0, #0
 80003e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80003e2:	68ba      	ldr	r2, [r7, #8]
 80003e4:	230f      	movs	r3, #15
 80003e6:	18fb      	adds	r3, r7, r3
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	b25b      	sxtb	r3, r3
 80003ec:	0011      	movs	r1, r2
 80003ee:	0018      	movs	r0, r3
 80003f0:	f7ff ff5c 	bl	80002ac <NVIC_SetPriority>
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b004      	add	sp, #16
 80003fa:	bd80      	pop	{r7, pc}

080003fc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	0018      	movs	r0, r3
 8000408:	f7ff ffbe 	bl	8000388 <SysTick_Config>
 800040c:	0003      	movs	r3, r0
}
 800040e:	0018      	movs	r0, r3
 8000410:	46bd      	mov	sp, r7
 8000412:	b002      	add	sp, #8
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2b04      	cmp	r3, #4
 8000424:	d106      	bne.n	8000434 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000428:	4a07      	ldr	r2, [pc, #28]	; (8000448 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 800042a:	6812      	ldr	r2, [r2, #0]
 800042c:	2104      	movs	r1, #4
 800042e:	430a      	orrs	r2, r1
 8000430:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000432:	e005      	b.n	8000440 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000436:	4a04      	ldr	r2, [pc, #16]	; (8000448 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000438:	6812      	ldr	r2, [r2, #0]
 800043a:	2104      	movs	r1, #4
 800043c:	438a      	bics	r2, r1
 800043e:	601a      	str	r2, [r3, #0]
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b002      	add	sp, #8
 8000446:	bd80      	pop	{r7, pc}
 8000448:	e000e010 	.word	0xe000e010

0800044c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800044c:	b580      	push	{r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800045a:	2300      	movs	r3, #0
 800045c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800045e:	2300      	movs	r3, #0
 8000460:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000462:	e14f      	b.n	8000704 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2101      	movs	r1, #1
 800046a:	697a      	ldr	r2, [r7, #20]
 800046c:	4091      	lsls	r1, r2
 800046e:	000a      	movs	r2, r1
 8000470:	4013      	ands	r3, r2
 8000472:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d100      	bne.n	800047c <HAL_GPIO_Init+0x30>
 800047a:	e140      	b.n	80006fe <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	2b02      	cmp	r3, #2
 8000482:	d003      	beq.n	800048c <HAL_GPIO_Init+0x40>
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	2b12      	cmp	r3, #18
 800048a:	d123      	bne.n	80004d4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	08da      	lsrs	r2, r3, #3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3208      	adds	r2, #8
 8000494:	0092      	lsls	r2, r2, #2
 8000496:	58d3      	ldr	r3, [r2, r3]
 8000498:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	2207      	movs	r2, #7
 800049e:	4013      	ands	r3, r2
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	220f      	movs	r2, #15
 80004a4:	409a      	lsls	r2, r3
 80004a6:	0013      	movs	r3, r2
 80004a8:	43da      	mvns	r2, r3
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	4013      	ands	r3, r2
 80004ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	691a      	ldr	r2, [r3, #16]
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	2107      	movs	r1, #7
 80004b8:	400b      	ands	r3, r1
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	409a      	lsls	r2, r3
 80004be:	0013      	movs	r3, r2
 80004c0:	693a      	ldr	r2, [r7, #16]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	08da      	lsrs	r2, r3, #3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	3208      	adds	r2, #8
 80004ce:	0092      	lsls	r2, r2, #2
 80004d0:	6939      	ldr	r1, [r7, #16]
 80004d2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	2203      	movs	r2, #3
 80004e0:	409a      	lsls	r2, r3
 80004e2:	0013      	movs	r3, r2
 80004e4:	43da      	mvns	r2, r3
 80004e6:	693b      	ldr	r3, [r7, #16]
 80004e8:	4013      	ands	r3, r2
 80004ea:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	2203      	movs	r2, #3
 80004f2:	401a      	ands	r2, r3
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	409a      	lsls	r2, r3
 80004fa:	0013      	movs	r3, r2
 80004fc:	693a      	ldr	r2, [r7, #16]
 80004fe:	4313      	orrs	r3, r2
 8000500:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	693a      	ldr	r2, [r7, #16]
 8000506:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d00b      	beq.n	8000528 <HAL_GPIO_Init+0xdc>
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	2b02      	cmp	r3, #2
 8000516:	d007      	beq.n	8000528 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800051c:	2b11      	cmp	r3, #17
 800051e:	d003      	beq.n	8000528 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	2b12      	cmp	r3, #18
 8000526:	d130      	bne.n	800058a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	2203      	movs	r2, #3
 8000534:	409a      	lsls	r2, r3
 8000536:	0013      	movs	r3, r2
 8000538:	43da      	mvns	r2, r3
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	4013      	ands	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	68da      	ldr	r2, [r3, #12]
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	409a      	lsls	r2, r3
 800054a:	0013      	movs	r3, r2
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	4313      	orrs	r3, r2
 8000550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	693a      	ldr	r2, [r7, #16]
 8000556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800055e:	2201      	movs	r2, #1
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	409a      	lsls	r2, r3
 8000564:	0013      	movs	r3, r2
 8000566:	43da      	mvns	r2, r3
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	4013      	ands	r3, r2
 800056c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	091b      	lsrs	r3, r3, #4
 8000574:	2201      	movs	r2, #1
 8000576:	401a      	ands	r2, r3
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	409a      	lsls	r2, r3
 800057c:	0013      	movs	r3, r2
 800057e:	693a      	ldr	r2, [r7, #16]
 8000580:	4313      	orrs	r3, r2
 8000582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	693a      	ldr	r2, [r7, #16]
 8000588:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	68db      	ldr	r3, [r3, #12]
 800058e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	2203      	movs	r2, #3
 8000596:	409a      	lsls	r2, r3
 8000598:	0013      	movs	r3, r2
 800059a:	43da      	mvns	r2, r3
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	4013      	ands	r3, r2
 80005a0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	689a      	ldr	r2, [r3, #8]
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	409a      	lsls	r2, r3
 80005ac:	0013      	movs	r3, r2
 80005ae:	693a      	ldr	r2, [r7, #16]
 80005b0:	4313      	orrs	r3, r2
 80005b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	693a      	ldr	r2, [r7, #16]
 80005b8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	685a      	ldr	r2, [r3, #4]
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	055b      	lsls	r3, r3, #21
 80005c2:	4013      	ands	r3, r2
 80005c4:	d100      	bne.n	80005c8 <HAL_GPIO_Init+0x17c>
 80005c6:	e09a      	b.n	80006fe <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c8:	4b54      	ldr	r3, [pc, #336]	; (800071c <HAL_GPIO_Init+0x2d0>)
 80005ca:	4a54      	ldr	r2, [pc, #336]	; (800071c <HAL_GPIO_Init+0x2d0>)
 80005cc:	6992      	ldr	r2, [r2, #24]
 80005ce:	2101      	movs	r1, #1
 80005d0:	430a      	orrs	r2, r1
 80005d2:	619a      	str	r2, [r3, #24]
 80005d4:	4b51      	ldr	r3, [pc, #324]	; (800071c <HAL_GPIO_Init+0x2d0>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	2201      	movs	r2, #1
 80005da:	4013      	ands	r3, r2
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80005e0:	4a4f      	ldr	r2, [pc, #316]	; (8000720 <HAL_GPIO_Init+0x2d4>)
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	089b      	lsrs	r3, r3, #2
 80005e6:	3302      	adds	r3, #2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	589b      	ldr	r3, [r3, r2]
 80005ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	2203      	movs	r2, #3
 80005f2:	4013      	ands	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	220f      	movs	r2, #15
 80005f8:	409a      	lsls	r2, r3
 80005fa:	0013      	movs	r3, r2
 80005fc:	43da      	mvns	r2, r3
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	4013      	ands	r3, r2
 8000602:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	2390      	movs	r3, #144	; 0x90
 8000608:	05db      	lsls	r3, r3, #23
 800060a:	429a      	cmp	r2, r3
 800060c:	d013      	beq.n	8000636 <HAL_GPIO_Init+0x1ea>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4a44      	ldr	r2, [pc, #272]	; (8000724 <HAL_GPIO_Init+0x2d8>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d00d      	beq.n	8000632 <HAL_GPIO_Init+0x1e6>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a43      	ldr	r2, [pc, #268]	; (8000728 <HAL_GPIO_Init+0x2dc>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d007      	beq.n	800062e <HAL_GPIO_Init+0x1e2>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a42      	ldr	r2, [pc, #264]	; (800072c <HAL_GPIO_Init+0x2e0>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d101      	bne.n	800062a <HAL_GPIO_Init+0x1de>
 8000626:	2303      	movs	r3, #3
 8000628:	e006      	b.n	8000638 <HAL_GPIO_Init+0x1ec>
 800062a:	2305      	movs	r3, #5
 800062c:	e004      	b.n	8000638 <HAL_GPIO_Init+0x1ec>
 800062e:	2302      	movs	r3, #2
 8000630:	e002      	b.n	8000638 <HAL_GPIO_Init+0x1ec>
 8000632:	2301      	movs	r3, #1
 8000634:	e000      	b.n	8000638 <HAL_GPIO_Init+0x1ec>
 8000636:	2300      	movs	r3, #0
 8000638:	697a      	ldr	r2, [r7, #20]
 800063a:	2103      	movs	r1, #3
 800063c:	400a      	ands	r2, r1
 800063e:	0092      	lsls	r2, r2, #2
 8000640:	4093      	lsls	r3, r2
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	4313      	orrs	r3, r2
 8000646:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000648:	4935      	ldr	r1, [pc, #212]	; (8000720 <HAL_GPIO_Init+0x2d4>)
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	089b      	lsrs	r3, r3, #2
 800064e:	3302      	adds	r3, #2
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	693a      	ldr	r2, [r7, #16]
 8000654:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000656:	4b36      	ldr	r3, [pc, #216]	; (8000730 <HAL_GPIO_Init+0x2e4>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	43da      	mvns	r2, r3
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	4013      	ands	r3, r2
 8000664:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	685a      	ldr	r2, [r3, #4]
 800066a:	2380      	movs	r3, #128	; 0x80
 800066c:	025b      	lsls	r3, r3, #9
 800066e:	4013      	ands	r3, r2
 8000670:	d003      	beq.n	800067a <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4313      	orrs	r3, r2
 8000678:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800067a:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <HAL_GPIO_Init+0x2e4>)
 800067c:	693a      	ldr	r2, [r7, #16]
 800067e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000680:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <HAL_GPIO_Init+0x2e4>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	43da      	mvns	r2, r3
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	4013      	ands	r3, r2
 800068e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	685a      	ldr	r2, [r3, #4]
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	029b      	lsls	r3, r3, #10
 8000698:	4013      	ands	r3, r2
 800069a:	d003      	beq.n	80006a4 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 800069c:	693a      	ldr	r2, [r7, #16]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <HAL_GPIO_Init+0x2e4>)
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006aa:	4b21      	ldr	r3, [pc, #132]	; (8000730 <HAL_GPIO_Init+0x2e4>)
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	43da      	mvns	r2, r3
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	4013      	ands	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	035b      	lsls	r3, r3, #13
 80006c2:	4013      	ands	r3, r2
 80006c4:	d003      	beq.n	80006ce <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <HAL_GPIO_Init+0x2e4>)
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <HAL_GPIO_Init+0x2e4>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	43da      	mvns	r2, r3
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	4013      	ands	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	039b      	lsls	r3, r3, #14
 80006ec:	4013      	ands	r3, r2
 80006ee:	d003      	beq.n	80006f8 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 80006f0:	693a      	ldr	r2, [r7, #16]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_GPIO_Init+0x2e4>)
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	3301      	adds	r3, #1
 8000702:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	40da      	lsrs	r2, r3
 800070c:	1e13      	subs	r3, r2, #0
 800070e:	d000      	beq.n	8000712 <HAL_GPIO_Init+0x2c6>
 8000710:	e6a8      	b.n	8000464 <HAL_GPIO_Init+0x18>
  } 
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b006      	add	sp, #24
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	40021000 	.word	0x40021000
 8000720:	40010000 	.word	0x40010000
 8000724:	48000400 	.word	0x48000400
 8000728:	48000800 	.word	0x48000800
 800072c:	48000c00 	.word	0x48000c00
 8000730:	40010400 	.word	0x40010400

08000734 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	000a      	movs	r2, r1
 800073e:	1cbb      	adds	r3, r7, #2
 8000740:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	1cba      	adds	r2, r7, #2
 8000748:	8812      	ldrh	r2, [r2, #0]
 800074a:	4013      	ands	r3, r2
 800074c:	d004      	beq.n	8000758 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800074e:	230f      	movs	r3, #15
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e003      	b.n	8000760 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000758:	230f      	movs	r3, #15
 800075a:	18fb      	adds	r3, r7, r3
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000760:	230f      	movs	r3, #15
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	781b      	ldrb	r3, [r3, #0]
  }
 8000766:	0018      	movs	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	b004      	add	sp, #16
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	0008      	movs	r0, r1
 8000778:	0011      	movs	r1, r2
 800077a:	1cbb      	adds	r3, r7, #2
 800077c:	1c02      	adds	r2, r0, #0
 800077e:	801a      	strh	r2, [r3, #0]
 8000780:	1c7b      	adds	r3, r7, #1
 8000782:	1c0a      	adds	r2, r1, #0
 8000784:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000786:	1c7b      	adds	r3, r7, #1
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d004      	beq.n	8000798 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800078e:	1cbb      	adds	r3, r7, #2
 8000790:	881a      	ldrh	r2, [r3, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000796:	e003      	b.n	80007a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000798:	1cbb      	adds	r3, r7, #2
 800079a:	881a      	ldrh	r2, [r3, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b002      	add	sp, #8
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	000a      	movs	r2, r1
 80007b2:	1cbb      	adds	r3, r7, #2
 80007b4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	695a      	ldr	r2, [r3, #20]
 80007ba:	1cbb      	adds	r3, r7, #2
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	405a      	eors	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	615a      	str	r2, [r3, #20]
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b002      	add	sp, #8
 80007ca:	bd80      	pop	{r7, pc}

080007cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2201      	movs	r2, #1
 80007de:	4013      	ands	r3, r2
 80007e0:	d100      	bne.n	80007e4 <HAL_RCC_OscConfig+0x18>
 80007e2:	e08d      	b.n	8000900 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007e4:	4bc3      	ldr	r3, [pc, #780]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	220c      	movs	r2, #12
 80007ea:	4013      	ands	r3, r2
 80007ec:	2b04      	cmp	r3, #4
 80007ee:	d00e      	beq.n	800080e <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007f0:	4bc0      	ldr	r3, [pc, #768]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	220c      	movs	r2, #12
 80007f6:	4013      	ands	r3, r2
 80007f8:	2b08      	cmp	r3, #8
 80007fa:	d116      	bne.n	800082a <HAL_RCC_OscConfig+0x5e>
 80007fc:	4bbd      	ldr	r3, [pc, #756]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 80007fe:	685a      	ldr	r2, [r3, #4]
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	025b      	lsls	r3, r3, #9
 8000804:	401a      	ands	r2, r3
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	025b      	lsls	r3, r3, #9
 800080a:	429a      	cmp	r2, r3
 800080c:	d10d      	bne.n	800082a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800080e:	4bb9      	ldr	r3, [pc, #740]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	029b      	lsls	r3, r3, #10
 8000816:	4013      	ands	r3, r2
 8000818:	d100      	bne.n	800081c <HAL_RCC_OscConfig+0x50>
 800081a:	e070      	b.n	80008fe <HAL_RCC_OscConfig+0x132>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d000      	beq.n	8000826 <HAL_RCC_OscConfig+0x5a>
 8000824:	e06b      	b.n	80008fe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e2b5      	b.n	8000d96 <HAL_RCC_OscConfig+0x5ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d107      	bne.n	8000842 <HAL_RCC_OscConfig+0x76>
 8000832:	4bb0      	ldr	r3, [pc, #704]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000834:	4aaf      	ldr	r2, [pc, #700]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000836:	6812      	ldr	r2, [r2, #0]
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	0249      	lsls	r1, r1, #9
 800083c:	430a      	orrs	r2, r1
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	e02f      	b.n	80008a2 <HAL_RCC_OscConfig+0xd6>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d10c      	bne.n	8000864 <HAL_RCC_OscConfig+0x98>
 800084a:	4baa      	ldr	r3, [pc, #680]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 800084c:	4aa9      	ldr	r2, [pc, #676]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 800084e:	6812      	ldr	r2, [r2, #0]
 8000850:	49a9      	ldr	r1, [pc, #676]	; (8000af8 <HAL_RCC_OscConfig+0x32c>)
 8000852:	400a      	ands	r2, r1
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	4ba7      	ldr	r3, [pc, #668]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000858:	4aa6      	ldr	r2, [pc, #664]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 800085a:	6812      	ldr	r2, [r2, #0]
 800085c:	49a7      	ldr	r1, [pc, #668]	; (8000afc <HAL_RCC_OscConfig+0x330>)
 800085e:	400a      	ands	r2, r1
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	e01e      	b.n	80008a2 <HAL_RCC_OscConfig+0xd6>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2b05      	cmp	r3, #5
 800086a:	d10e      	bne.n	800088a <HAL_RCC_OscConfig+0xbe>
 800086c:	4ba1      	ldr	r3, [pc, #644]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 800086e:	4aa1      	ldr	r2, [pc, #644]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000870:	6812      	ldr	r2, [r2, #0]
 8000872:	2180      	movs	r1, #128	; 0x80
 8000874:	02c9      	lsls	r1, r1, #11
 8000876:	430a      	orrs	r2, r1
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	4b9e      	ldr	r3, [pc, #632]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 800087c:	4a9d      	ldr	r2, [pc, #628]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 800087e:	6812      	ldr	r2, [r2, #0]
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	0249      	lsls	r1, r1, #9
 8000884:	430a      	orrs	r2, r1
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	e00b      	b.n	80008a2 <HAL_RCC_OscConfig+0xd6>
 800088a:	4b9a      	ldr	r3, [pc, #616]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 800088c:	4a99      	ldr	r2, [pc, #612]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 800088e:	6812      	ldr	r2, [r2, #0]
 8000890:	4999      	ldr	r1, [pc, #612]	; (8000af8 <HAL_RCC_OscConfig+0x32c>)
 8000892:	400a      	ands	r2, r1
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	4b97      	ldr	r3, [pc, #604]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000898:	4a96      	ldr	r2, [pc, #600]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 800089a:	6812      	ldr	r2, [r2, #0]
 800089c:	4997      	ldr	r1, [pc, #604]	; (8000afc <HAL_RCC_OscConfig+0x330>)
 800089e:	400a      	ands	r2, r1
 80008a0:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d014      	beq.n	80008d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008aa:	f7ff fcf5 	bl	8000298 <HAL_GetTick>
 80008ae:	0003      	movs	r3, r0
 80008b0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008b2:	e008      	b.n	80008c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008b4:	f7ff fcf0 	bl	8000298 <HAL_GetTick>
 80008b8:	0002      	movs	r2, r0
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	2b64      	cmp	r3, #100	; 0x64
 80008c0:	d901      	bls.n	80008c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80008c2:	2303      	movs	r3, #3
 80008c4:	e267      	b.n	8000d96 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c6:	4b8b      	ldr	r3, [pc, #556]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	2380      	movs	r3, #128	; 0x80
 80008cc:	029b      	lsls	r3, r3, #10
 80008ce:	4013      	ands	r3, r2
 80008d0:	d0f0      	beq.n	80008b4 <HAL_RCC_OscConfig+0xe8>
 80008d2:	e015      	b.n	8000900 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008d4:	f7ff fce0 	bl	8000298 <HAL_GetTick>
 80008d8:	0003      	movs	r3, r0
 80008da:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008dc:	e008      	b.n	80008f0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008de:	f7ff fcdb 	bl	8000298 <HAL_GetTick>
 80008e2:	0002      	movs	r2, r0
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	2b64      	cmp	r3, #100	; 0x64
 80008ea:	d901      	bls.n	80008f0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80008ec:	2303      	movs	r3, #3
 80008ee:	e252      	b.n	8000d96 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008f0:	4b80      	ldr	r3, [pc, #512]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	029b      	lsls	r3, r3, #10
 80008f8:	4013      	ands	r3, r2
 80008fa:	d1f0      	bne.n	80008de <HAL_RCC_OscConfig+0x112>
 80008fc:	e000      	b.n	8000900 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2202      	movs	r2, #2
 8000906:	4013      	ands	r3, r2
 8000908:	d100      	bne.n	800090c <HAL_RCC_OscConfig+0x140>
 800090a:	e069      	b.n	80009e0 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800090c:	4b79      	ldr	r3, [pc, #484]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	220c      	movs	r2, #12
 8000912:	4013      	ands	r3, r2
 8000914:	d00b      	beq.n	800092e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000916:	4b77      	ldr	r3, [pc, #476]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	220c      	movs	r2, #12
 800091c:	4013      	ands	r3, r2
 800091e:	2b08      	cmp	r3, #8
 8000920:	d11c      	bne.n	800095c <HAL_RCC_OscConfig+0x190>
 8000922:	4b74      	ldr	r3, [pc, #464]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000924:	685a      	ldr	r2, [r3, #4]
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	025b      	lsls	r3, r3, #9
 800092a:	4013      	ands	r3, r2
 800092c:	d116      	bne.n	800095c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800092e:	4b71      	ldr	r3, [pc, #452]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2202      	movs	r2, #2
 8000934:	4013      	ands	r3, r2
 8000936:	d005      	beq.n	8000944 <HAL_RCC_OscConfig+0x178>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d001      	beq.n	8000944 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8000940:	2301      	movs	r3, #1
 8000942:	e228      	b.n	8000d96 <HAL_RCC_OscConfig+0x5ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000944:	4a6b      	ldr	r2, [pc, #428]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000946:	4b6b      	ldr	r3, [pc, #428]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	21f8      	movs	r1, #248	; 0xf8
 800094c:	438b      	bics	r3, r1
 800094e:	0019      	movs	r1, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	691b      	ldr	r3, [r3, #16]
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	430b      	orrs	r3, r1
 8000958:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800095a:	e041      	b.n	80009e0 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d024      	beq.n	80009ae <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000964:	4b63      	ldr	r3, [pc, #396]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000966:	4a63      	ldr	r2, [pc, #396]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000968:	6812      	ldr	r2, [r2, #0]
 800096a:	2101      	movs	r1, #1
 800096c:	430a      	orrs	r2, r1
 800096e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000970:	f7ff fc92 	bl	8000298 <HAL_GetTick>
 8000974:	0003      	movs	r3, r0
 8000976:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000978:	e008      	b.n	800098c <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800097a:	f7ff fc8d 	bl	8000298 <HAL_GetTick>
 800097e:	0002      	movs	r2, r0
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	2b02      	cmp	r3, #2
 8000986:	d901      	bls.n	800098c <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8000988:	2303      	movs	r3, #3
 800098a:	e204      	b.n	8000d96 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800098c:	4b59      	ldr	r3, [pc, #356]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2202      	movs	r2, #2
 8000992:	4013      	ands	r3, r2
 8000994:	d0f1      	beq.n	800097a <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000996:	4a57      	ldr	r2, [pc, #348]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000998:	4b56      	ldr	r3, [pc, #344]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	21f8      	movs	r1, #248	; 0xf8
 800099e:	438b      	bics	r3, r1
 80009a0:	0019      	movs	r1, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	430b      	orrs	r3, r1
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	e018      	b.n	80009e0 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009ae:	4b51      	ldr	r3, [pc, #324]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 80009b0:	4a50      	ldr	r2, [pc, #320]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 80009b2:	6812      	ldr	r2, [r2, #0]
 80009b4:	2101      	movs	r1, #1
 80009b6:	438a      	bics	r2, r1
 80009b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009ba:	f7ff fc6d 	bl	8000298 <HAL_GetTick>
 80009be:	0003      	movs	r3, r0
 80009c0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009c2:	e008      	b.n	80009d6 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009c4:	f7ff fc68 	bl	8000298 <HAL_GetTick>
 80009c8:	0002      	movs	r2, r0
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d901      	bls.n	80009d6 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 80009d2:	2303      	movs	r3, #3
 80009d4:	e1df      	b.n	8000d96 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009d6:	4b47      	ldr	r3, [pc, #284]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2202      	movs	r2, #2
 80009dc:	4013      	ands	r3, r2
 80009de:	d1f1      	bne.n	80009c4 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2208      	movs	r2, #8
 80009e6:	4013      	ands	r3, r2
 80009e8:	d036      	beq.n	8000a58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d019      	beq.n	8000a26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009f2:	4b40      	ldr	r3, [pc, #256]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 80009f4:	4a3f      	ldr	r2, [pc, #252]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 80009f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80009f8:	2101      	movs	r1, #1
 80009fa:	430a      	orrs	r2, r1
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009fe:	f7ff fc4b 	bl	8000298 <HAL_GetTick>
 8000a02:	0003      	movs	r3, r0
 8000a04:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a06:	e008      	b.n	8000a1a <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a08:	f7ff fc46 	bl	8000298 <HAL_GetTick>
 8000a0c:	0002      	movs	r2, r0
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d901      	bls.n	8000a1a <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8000a16:	2303      	movs	r3, #3
 8000a18:	e1bd      	b.n	8000d96 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a1a:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	2202      	movs	r2, #2
 8000a20:	4013      	ands	r3, r2
 8000a22:	d0f1      	beq.n	8000a08 <HAL_RCC_OscConfig+0x23c>
 8000a24:	e018      	b.n	8000a58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a26:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000a28:	4a32      	ldr	r2, [pc, #200]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000a2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	438a      	bics	r2, r1
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a32:	f7ff fc31 	bl	8000298 <HAL_GetTick>
 8000a36:	0003      	movs	r3, r0
 8000a38:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a3a:	e008      	b.n	8000a4e <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a3c:	f7ff fc2c 	bl	8000298 <HAL_GetTick>
 8000a40:	0002      	movs	r2, r0
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d901      	bls.n	8000a4e <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	e1a3      	b.n	8000d96 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a52:	2202      	movs	r2, #2
 8000a54:	4013      	ands	r3, r2
 8000a56:	d1f1      	bne.n	8000a3c <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	4013      	ands	r3, r2
 8000a60:	d100      	bne.n	8000a64 <HAL_RCC_OscConfig+0x298>
 8000a62:	e0b5      	b.n	8000bd0 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a64:	2317      	movs	r3, #23
 8000a66:	18fb      	adds	r3, r7, r3
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000a6e:	69da      	ldr	r2, [r3, #28]
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	055b      	lsls	r3, r3, #21
 8000a74:	4013      	ands	r3, r2
 8000a76:	d111      	bne.n	8000a9c <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000a7a:	4a1e      	ldr	r2, [pc, #120]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000a7c:	69d2      	ldr	r2, [r2, #28]
 8000a7e:	2180      	movs	r1, #128	; 0x80
 8000a80:	0549      	lsls	r1, r1, #21
 8000a82:	430a      	orrs	r2, r1
 8000a84:	61da      	str	r2, [r3, #28]
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000a88:	69da      	ldr	r2, [r3, #28]
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	055b      	lsls	r3, r3, #21
 8000a8e:	4013      	ands	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000a94:	2317      	movs	r3, #23
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	2201      	movs	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_RCC_OscConfig+0x334>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	d11a      	bne.n	8000ade <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_RCC_OscConfig+0x334>)
 8000aaa:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <HAL_RCC_OscConfig+0x334>)
 8000aac:	6812      	ldr	r2, [r2, #0]
 8000aae:	2180      	movs	r1, #128	; 0x80
 8000ab0:	0049      	lsls	r1, r1, #1
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ab6:	f7ff fbef 	bl	8000298 <HAL_GetTick>
 8000aba:	0003      	movs	r3, r0
 8000abc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000abe:	e008      	b.n	8000ad2 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ac0:	f7ff fbea 	bl	8000298 <HAL_GetTick>
 8000ac4:	0002      	movs	r2, r0
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	2b64      	cmp	r3, #100	; 0x64
 8000acc:	d901      	bls.n	8000ad2 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	e161      	b.n	8000d96 <HAL_RCC_OscConfig+0x5ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_RCC_OscConfig+0x334>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	4013      	ands	r3, r2
 8000adc:	d0f0      	beq.n	8000ac0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d10e      	bne.n	8000b04 <HAL_RCC_OscConfig+0x338>
 8000ae6:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000ae8:	4a02      	ldr	r2, [pc, #8]	; (8000af4 <HAL_RCC_OscConfig+0x328>)
 8000aea:	6a12      	ldr	r2, [r2, #32]
 8000aec:	2101      	movs	r1, #1
 8000aee:	430a      	orrs	r2, r1
 8000af0:	621a      	str	r2, [r3, #32]
 8000af2:	e035      	b.n	8000b60 <HAL_RCC_OscConfig+0x394>
 8000af4:	40021000 	.word	0x40021000
 8000af8:	fffeffff 	.word	0xfffeffff
 8000afc:	fffbffff 	.word	0xfffbffff
 8000b00:	40007000 	.word	0x40007000
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d10c      	bne.n	8000b26 <HAL_RCC_OscConfig+0x35a>
 8000b0c:	4ba4      	ldr	r3, [pc, #656]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000b0e:	4aa4      	ldr	r2, [pc, #656]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000b10:	6a12      	ldr	r2, [r2, #32]
 8000b12:	2101      	movs	r1, #1
 8000b14:	438a      	bics	r2, r1
 8000b16:	621a      	str	r2, [r3, #32]
 8000b18:	4ba1      	ldr	r3, [pc, #644]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000b1a:	4aa1      	ldr	r2, [pc, #644]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000b1c:	6a12      	ldr	r2, [r2, #32]
 8000b1e:	2104      	movs	r1, #4
 8000b20:	438a      	bics	r2, r1
 8000b22:	621a      	str	r2, [r3, #32]
 8000b24:	e01c      	b.n	8000b60 <HAL_RCC_OscConfig+0x394>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	2b05      	cmp	r3, #5
 8000b2c:	d10c      	bne.n	8000b48 <HAL_RCC_OscConfig+0x37c>
 8000b2e:	4b9c      	ldr	r3, [pc, #624]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000b30:	4a9b      	ldr	r2, [pc, #620]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000b32:	6a12      	ldr	r2, [r2, #32]
 8000b34:	2104      	movs	r1, #4
 8000b36:	430a      	orrs	r2, r1
 8000b38:	621a      	str	r2, [r3, #32]
 8000b3a:	4b99      	ldr	r3, [pc, #612]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000b3c:	4a98      	ldr	r2, [pc, #608]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000b3e:	6a12      	ldr	r2, [r2, #32]
 8000b40:	2101      	movs	r1, #1
 8000b42:	430a      	orrs	r2, r1
 8000b44:	621a      	str	r2, [r3, #32]
 8000b46:	e00b      	b.n	8000b60 <HAL_RCC_OscConfig+0x394>
 8000b48:	4b95      	ldr	r3, [pc, #596]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000b4a:	4a95      	ldr	r2, [pc, #596]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000b4c:	6a12      	ldr	r2, [r2, #32]
 8000b4e:	2101      	movs	r1, #1
 8000b50:	438a      	bics	r2, r1
 8000b52:	621a      	str	r2, [r3, #32]
 8000b54:	4b92      	ldr	r3, [pc, #584]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000b56:	4a92      	ldr	r2, [pc, #584]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000b58:	6a12      	ldr	r2, [r2, #32]
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	438a      	bics	r2, r1
 8000b5e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d014      	beq.n	8000b92 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b68:	f7ff fb96 	bl	8000298 <HAL_GetTick>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b70:	e009      	b.n	8000b86 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b72:	f7ff fb91 	bl	8000298 <HAL_GetTick>
 8000b76:	0002      	movs	r2, r0
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	4a89      	ldr	r2, [pc, #548]	; (8000da4 <HAL_RCC_OscConfig+0x5d8>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d901      	bls.n	8000b86 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8000b82:	2303      	movs	r3, #3
 8000b84:	e107      	b.n	8000d96 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b86:	4b86      	ldr	r3, [pc, #536]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000b88:	6a1b      	ldr	r3, [r3, #32]
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	d0f0      	beq.n	8000b72 <HAL_RCC_OscConfig+0x3a6>
 8000b90:	e013      	b.n	8000bba <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b92:	f7ff fb81 	bl	8000298 <HAL_GetTick>
 8000b96:	0003      	movs	r3, r0
 8000b98:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b9a:	e009      	b.n	8000bb0 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b9c:	f7ff fb7c 	bl	8000298 <HAL_GetTick>
 8000ba0:	0002      	movs	r2, r0
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	4a7f      	ldr	r2, [pc, #508]	; (8000da4 <HAL_RCC_OscConfig+0x5d8>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d901      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8000bac:	2303      	movs	r3, #3
 8000bae:	e0f2      	b.n	8000d96 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bb0:	4b7b      	ldr	r3, [pc, #492]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000bb2:	6a1b      	ldr	r3, [r3, #32]
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	d1f0      	bne.n	8000b9c <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000bba:	2317      	movs	r3, #23
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d105      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bc4:	4b76      	ldr	r3, [pc, #472]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000bc6:	4a76      	ldr	r2, [pc, #472]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000bc8:	69d2      	ldr	r2, [r2, #28]
 8000bca:	4977      	ldr	r1, [pc, #476]	; (8000da8 <HAL_RCC_OscConfig+0x5dc>)
 8000bcc:	400a      	ands	r2, r1
 8000bce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2210      	movs	r2, #16
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	d063      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d12a      	bne.n	8000c38 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000be2:	4b6f      	ldr	r3, [pc, #444]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000be4:	4a6e      	ldr	r2, [pc, #440]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000be6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000be8:	2104      	movs	r1, #4
 8000bea:	430a      	orrs	r2, r1
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000bee:	4b6c      	ldr	r3, [pc, #432]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000bf0:	4a6b      	ldr	r2, [pc, #428]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000bf2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bfa:	f7ff fb4d 	bl	8000298 <HAL_GetTick>
 8000bfe:	0003      	movs	r3, r0
 8000c00:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c02:	e008      	b.n	8000c16 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c04:	f7ff fb48 	bl	8000298 <HAL_GetTick>
 8000c08:	0002      	movs	r2, r0
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d901      	bls.n	8000c16 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8000c12:	2303      	movs	r3, #3
 8000c14:	e0bf      	b.n	8000d96 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c16:	4b62      	ldr	r3, [pc, #392]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	d0f1      	beq.n	8000c04 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c20:	4a5f      	ldr	r2, [pc, #380]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000c22:	4b5f      	ldr	r3, [pc, #380]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c26:	21f8      	movs	r1, #248	; 0xf8
 8000c28:	438b      	bics	r3, r1
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	430b      	orrs	r3, r1
 8000c34:	6353      	str	r3, [r2, #52]	; 0x34
 8000c36:	e034      	b.n	8000ca2 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	3305      	adds	r3, #5
 8000c3e:	d111      	bne.n	8000c64 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c40:	4b57      	ldr	r3, [pc, #348]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000c42:	4a57      	ldr	r2, [pc, #348]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000c44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c46:	2104      	movs	r1, #4
 8000c48:	438a      	bics	r2, r1
 8000c4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c4c:	4a54      	ldr	r2, [pc, #336]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000c4e:	4b54      	ldr	r3, [pc, #336]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c52:	21f8      	movs	r1, #248	; 0xf8
 8000c54:	438b      	bics	r3, r1
 8000c56:	0019      	movs	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	430b      	orrs	r3, r1
 8000c60:	6353      	str	r3, [r2, #52]	; 0x34
 8000c62:	e01e      	b.n	8000ca2 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c64:	4b4e      	ldr	r3, [pc, #312]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000c66:	4a4e      	ldr	r2, [pc, #312]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000c68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000c70:	4b4b      	ldr	r3, [pc, #300]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000c72:	4a4b      	ldr	r2, [pc, #300]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000c74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c76:	2101      	movs	r1, #1
 8000c78:	438a      	bics	r2, r1
 8000c7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c7c:	f7ff fb0c 	bl	8000298 <HAL_GetTick>
 8000c80:	0003      	movs	r3, r0
 8000c82:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c84:	e008      	b.n	8000c98 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c86:	f7ff fb07 	bl	8000298 <HAL_GetTick>
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d901      	bls.n	8000c98 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000c94:	2303      	movs	r3, #3
 8000c96:	e07e      	b.n	8000d96 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c98:	4b41      	ldr	r3, [pc, #260]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d1f1      	bne.n	8000c86 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a1b      	ldr	r3, [r3, #32]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d100      	bne.n	8000cac <HAL_RCC_OscConfig+0x4e0>
 8000caa:	e073      	b.n	8000d94 <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cac:	4b3c      	ldr	r3, [pc, #240]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	220c      	movs	r2, #12
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	2b08      	cmp	r3, #8
 8000cb6:	d100      	bne.n	8000cba <HAL_RCC_OscConfig+0x4ee>
 8000cb8:	e06a      	b.n	8000d90 <HAL_RCC_OscConfig+0x5c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a1b      	ldr	r3, [r3, #32]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d14b      	bne.n	8000d5a <HAL_RCC_OscConfig+0x58e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cc2:	4b37      	ldr	r3, [pc, #220]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000cc4:	4a36      	ldr	r2, [pc, #216]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000cc6:	6812      	ldr	r2, [r2, #0]
 8000cc8:	4938      	ldr	r1, [pc, #224]	; (8000dac <HAL_RCC_OscConfig+0x5e0>)
 8000cca:	400a      	ands	r2, r1
 8000ccc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cce:	f7ff fae3 	bl	8000298 <HAL_GetTick>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cd6:	e008      	b.n	8000cea <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cd8:	f7ff fade 	bl	8000298 <HAL_GetTick>
 8000cdc:	0002      	movs	r2, r0
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d901      	bls.n	8000cea <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e055      	b.n	8000d96 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cea:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	049b      	lsls	r3, r3, #18
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d1f0      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cf6:	4a2a      	ldr	r2, [pc, #168]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfc:	210f      	movs	r1, #15
 8000cfe:	438b      	bics	r3, r1
 8000d00:	0019      	movs	r1, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d06:	430b      	orrs	r3, r1
 8000d08:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d0a:	4a25      	ldr	r2, [pc, #148]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	4927      	ldr	r1, [pc, #156]	; (8000db0 <HAL_RCC_OscConfig+0x5e4>)
 8000d12:	4019      	ands	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	4303      	orrs	r3, r0
 8000d1e:	430b      	orrs	r3, r1
 8000d20:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d22:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000d24:	4a1e      	ldr	r2, [pc, #120]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000d26:	6812      	ldr	r2, [r2, #0]
 8000d28:	2180      	movs	r1, #128	; 0x80
 8000d2a:	0449      	lsls	r1, r1, #17
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d30:	f7ff fab2 	bl	8000298 <HAL_GetTick>
 8000d34:	0003      	movs	r3, r0
 8000d36:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d38:	e008      	b.n	8000d4c <HAL_RCC_OscConfig+0x580>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d3a:	f7ff faad 	bl	8000298 <HAL_GetTick>
 8000d3e:	0002      	movs	r2, r0
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d901      	bls.n	8000d4c <HAL_RCC_OscConfig+0x580>
          {
            return HAL_TIMEOUT;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e024      	b.n	8000d96 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	049b      	lsls	r3, r3, #18
 8000d54:	4013      	ands	r3, r2
 8000d56:	d0f0      	beq.n	8000d3a <HAL_RCC_OscConfig+0x56e>
 8000d58:	e01c      	b.n	8000d94 <HAL_RCC_OscConfig+0x5c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000d5c:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000d5e:	6812      	ldr	r2, [r2, #0]
 8000d60:	4912      	ldr	r1, [pc, #72]	; (8000dac <HAL_RCC_OscConfig+0x5e0>)
 8000d62:	400a      	ands	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d66:	f7ff fa97 	bl	8000298 <HAL_GetTick>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d70:	f7ff fa92 	bl	8000298 <HAL_GetTick>
 8000d74:	0002      	movs	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e009      	b.n	8000d96 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <HAL_RCC_OscConfig+0x5d4>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	049b      	lsls	r3, r3, #18
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	d1f0      	bne.n	8000d70 <HAL_RCC_OscConfig+0x5a4>
 8000d8e:	e001      	b.n	8000d94 <HAL_RCC_OscConfig+0x5c8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <HAL_RCC_OscConfig+0x5ca>
    }
  }
  
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	0018      	movs	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b006      	add	sp, #24
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	40021000 	.word	0x40021000
 8000da4:	00001388 	.word	0x00001388
 8000da8:	efffffff 	.word	0xefffffff
 8000dac:	feffffff 	.word	0xfeffffff
 8000db0:	ffc2ffff 	.word	0xffc2ffff

08000db4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dc2:	4b69      	ldr	r3, [pc, #420]	; (8000f68 <HAL_RCC_ClockConfig+0x1b4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	401a      	ands	r2, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d211      	bcs.n	8000df4 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dd0:	4b65      	ldr	r3, [pc, #404]	; (8000f68 <HAL_RCC_ClockConfig+0x1b4>)
 8000dd2:	4a65      	ldr	r2, [pc, #404]	; (8000f68 <HAL_RCC_ClockConfig+0x1b4>)
 8000dd4:	6812      	ldr	r2, [r2, #0]
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	438a      	bics	r2, r1
 8000dda:	0011      	movs	r1, r2
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	430a      	orrs	r2, r1
 8000de0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000de2:	4b61      	ldr	r3, [pc, #388]	; (8000f68 <HAL_RCC_ClockConfig+0x1b4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2201      	movs	r2, #1
 8000de8:	401a      	ands	r2, r3
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d001      	beq.n	8000df4 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e0b5      	b.n	8000f60 <HAL_RCC_ClockConfig+0x1ac>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2202      	movs	r2, #2
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d009      	beq.n	8000e12 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dfe:	4a5b      	ldr	r2, [pc, #364]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e00:	4b5a      	ldr	r3, [pc, #360]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	21f0      	movs	r1, #240	; 0xf0
 8000e06:	438b      	bics	r3, r1
 8000e08:	0019      	movs	r1, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	430b      	orrs	r3, r1
 8000e10:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2201      	movs	r2, #1
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d100      	bne.n	8000e1e <HAL_RCC_ClockConfig+0x6a>
 8000e1c:	e067      	b.n	8000eee <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d107      	bne.n	8000e36 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e26:	4b51      	ldr	r3, [pc, #324]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	029b      	lsls	r3, r3, #10
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d114      	bne.n	8000e5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e094      	b.n	8000f60 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d107      	bne.n	8000e4e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e3e:	4b4b      	ldr	r3, [pc, #300]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	049b      	lsls	r3, r3, #18
 8000e46:	4013      	ands	r3, r2
 8000e48:	d108      	bne.n	8000e5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e088      	b.n	8000f60 <HAL_RCC_ClockConfig+0x1ac>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4e:	4b47      	ldr	r3, [pc, #284]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2202      	movs	r2, #2
 8000e54:	4013      	ands	r3, r2
 8000e56:	d101      	bne.n	8000e5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e081      	b.n	8000f60 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e5c:	4a43      	ldr	r2, [pc, #268]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e5e:	4b43      	ldr	r3, [pc, #268]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2103      	movs	r1, #3
 8000e64:	438b      	bics	r3, r1
 8000e66:	0019      	movs	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	430b      	orrs	r3, r1
 8000e6e:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e70:	f7ff fa12 	bl	8000298 <HAL_GetTick>
 8000e74:	0003      	movs	r3, r0
 8000e76:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d111      	bne.n	8000ea4 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e80:	e009      	b.n	8000e96 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e82:	f7ff fa09 	bl	8000298 <HAL_GetTick>
 8000e86:	0002      	movs	r2, r0
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	4a38      	ldr	r2, [pc, #224]	; (8000f70 <HAL_RCC_ClockConfig+0x1bc>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e064      	b.n	8000f60 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e96:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d1ef      	bne.n	8000e82 <HAL_RCC_ClockConfig+0xce>
 8000ea2:	e024      	b.n	8000eee <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d11b      	bne.n	8000ee4 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000eac:	e009      	b.n	8000ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eae:	f7ff f9f3 	bl	8000298 <HAL_GetTick>
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	4a2d      	ldr	r2, [pc, #180]	; (8000f70 <HAL_RCC_ClockConfig+0x1bc>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e04e      	b.n	8000f60 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	4013      	ands	r3, r2
 8000eca:	2b08      	cmp	r3, #8
 8000ecc:	d1ef      	bne.n	8000eae <HAL_RCC_ClockConfig+0xfa>
 8000ece:	e00e      	b.n	8000eee <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ed0:	f7ff f9e2 	bl	8000298 <HAL_GetTick>
 8000ed4:	0002      	movs	r2, r0
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	4a25      	ldr	r2, [pc, #148]	; (8000f70 <HAL_RCC_ClockConfig+0x1bc>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e03d      	b.n	8000f60 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ee4:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	220c      	movs	r2, #12
 8000eea:	4013      	ands	r3, r2
 8000eec:	d1f0      	bne.n	8000ed0 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <HAL_RCC_ClockConfig+0x1b4>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d911      	bls.n	8000f20 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <HAL_RCC_ClockConfig+0x1b4>)
 8000efe:	4a1a      	ldr	r2, [pc, #104]	; (8000f68 <HAL_RCC_ClockConfig+0x1b4>)
 8000f00:	6812      	ldr	r2, [r2, #0]
 8000f02:	2101      	movs	r1, #1
 8000f04:	438a      	bics	r2, r1
 8000f06:	0011      	movs	r1, r2
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_RCC_ClockConfig+0x1b4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2201      	movs	r2, #1
 8000f14:	401a      	ands	r2, r3
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d001      	beq.n	8000f20 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e01f      	b.n	8000f60 <HAL_RCC_ClockConfig+0x1ac>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2204      	movs	r2, #4
 8000f26:	4013      	ands	r3, r2
 8000f28:	d008      	beq.n	8000f3c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000f2a:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	4910      	ldr	r1, [pc, #64]	; (8000f74 <HAL_RCC_ClockConfig+0x1c0>)
 8000f32:	4019      	ands	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f3c:	f000 f820 	bl	8000f80 <HAL_RCC_GetSysClockFreq>
 8000f40:	0001      	movs	r1, r0
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_RCC_ClockConfig+0x1b8>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	220f      	movs	r2, #15
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_RCC_ClockConfig+0x1c4>)
 8000f4e:	5cd3      	ldrb	r3, [r2, r3]
 8000f50:	000a      	movs	r2, r1
 8000f52:	40da      	lsrs	r2, r3
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_RCC_ClockConfig+0x1c8>)
 8000f56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f7ff f975 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40022000 	.word	0x40022000
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	00001388 	.word	0x00001388
 8000f74:	fffff8ff 	.word	0xfffff8ff
 8000f78:	08002d18 	.word	0x08002d18
 8000f7c:	20000004 	.word	0x20000004

08000f80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b08f      	sub	sp, #60	; 0x3c
 8000f84:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000f86:	2314      	movs	r3, #20
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	4a28      	ldr	r2, [pc, #160]	; (800102c <HAL_RCC_GetSysClockFreq+0xac>)
 8000f8c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f8e:	c313      	stmia	r3!, {r0, r1, r4}
 8000f90:	6812      	ldr	r2, [r2, #0]
 8000f92:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	4a26      	ldr	r2, [pc, #152]	; (8001030 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f98:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f9a:	c313      	stmia	r3!, {r0, r1, r4}
 8000f9c:	6812      	ldr	r2, [r2, #0]
 8000f9e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa8:	2300      	movs	r3, #0
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbc:	220c      	movs	r2, #12
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d002      	beq.n	8000fca <HAL_RCC_GetSysClockFreq+0x4a>
 8000fc4:	2b08      	cmp	r3, #8
 8000fc6:	d003      	beq.n	8000fd0 <HAL_RCC_GetSysClockFreq+0x50>
 8000fc8:	e027      	b.n	800101a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000fce:	e027      	b.n	8001020 <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd2:	0c9b      	lsrs	r3, r3, #18
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2214      	movs	r2, #20
 8000fda:	18ba      	adds	r2, r7, r2
 8000fdc:	5cd3      	ldrb	r3, [r2, r3]
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	1d3a      	adds	r2, r7, #4
 8000fea:	5cd3      	ldrb	r3, [r2, r3]
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	025b      	lsls	r3, r3, #9
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d009      	beq.n	800100c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ffa:	480f      	ldr	r0, [pc, #60]	; (8001038 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ffc:	f7ff f884 	bl	8000108 <__udivsi3>
 8001000:	0003      	movs	r3, r0
 8001002:	001a      	movs	r2, r3
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	4353      	muls	r3, r2
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
 800100a:	e003      	b.n	8001014 <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001010:	4353      	muls	r3, r2
 8001012:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001018:	e002      	b.n	8001020 <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <HAL_RCC_GetSysClockFreq+0xb8>)
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800101e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001022:	0018      	movs	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	b00f      	add	sp, #60	; 0x3c
 8001028:	bd90      	pop	{r4, r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	08002cac 	.word	0x08002cac
 8001030:	08002cbc 	.word	0x08002cbc
 8001034:	40021000 	.word	0x40021000
 8001038:	007a1200 	.word	0x007a1200
 800103c:	003d0900 	.word	0x003d0900

08001040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001044:	4b02      	ldr	r3, [pc, #8]	; (8001050 <HAL_RCC_GetHCLKFreq+0x10>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	20000004 	.word	0x20000004

08001054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001058:	f7ff fff2 	bl	8001040 <HAL_RCC_GetHCLKFreq>
 800105c:	0001      	movs	r1, r0
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	2207      	movs	r2, #7
 8001066:	4013      	ands	r3, r2
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_RCC_GetPCLK1Freq+0x28>)
 800106a:	5cd3      	ldrb	r3, [r2, r3]
 800106c:	40d9      	lsrs	r1, r3
 800106e:	000b      	movs	r3, r1
}    
 8001070:	0018      	movs	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	40021000 	.word	0x40021000
 800107c:	08002d28 	.word	0x08002d28

08001080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e047      	b.n	8001122 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2269      	movs	r2, #105	; 0x69
 8001096:	5c9b      	ldrb	r3, [r3, r2]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d107      	bne.n	80010ae <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2268      	movs	r2, #104	; 0x68
 80010a2:	2100      	movs	r1, #0
 80010a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	0018      	movs	r0, r3
 80010aa:	f001 fd1b 	bl	8002ae4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2269      	movs	r2, #105	; 0x69
 80010b2:	2124      	movs	r1, #36	; 0x24
 80010b4:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	2101      	movs	r1, #1
 80010c2:	438a      	bics	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	0018      	movs	r0, r3
 80010ca:	f000 f8d5 	bl	8001278 <UART_SetConfig>
 80010ce:	0003      	movs	r3, r0
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d101      	bne.n	80010d8 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e024      	b.n	8001122 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	0018      	movs	r0, r3
 80010e4:	f000 fa3e 	bl	8001564 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	6812      	ldr	r2, [r2, #0]
 80010f0:	6852      	ldr	r2, [r2, #4]
 80010f2:	490e      	ldr	r1, [pc, #56]	; (800112c <HAL_UART_Init+0xac>)
 80010f4:	400a      	ands	r2, r1
 80010f6:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	6892      	ldr	r2, [r2, #8]
 8001102:	2108      	movs	r1, #8
 8001104:	438a      	bics	r2, r1
 8001106:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	2101      	movs	r1, #1
 8001114:	430a      	orrs	r2, r1
 8001116:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	0018      	movs	r0, r3
 800111c:	f000 face 	bl	80016bc <UART_CheckIdleState>
 8001120:	0003      	movs	r3, r0
}
 8001122:	0018      	movs	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	fffff7ff 	.word	0xfffff7ff

08001130 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af02      	add	r7, sp, #8
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2269      	movs	r2, #105	; 0x69
 8001148:	5c9b      	ldrb	r3, [r3, r2]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b20      	cmp	r3, #32
 800114e:	d000      	beq.n	8001152 <HAL_UART_Transmit+0x22>
 8001150:	e08c      	b.n	800126c <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_UART_Transmit+0x30>
 8001158:	1dbb      	adds	r3, r7, #6
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e084      	b.n	800126e <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	015b      	lsls	r3, r3, #5
 800116c:	429a      	cmp	r2, r3
 800116e:	d109      	bne.n	8001184 <HAL_UART_Transmit+0x54>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d105      	bne.n	8001184 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2201      	movs	r2, #1
 800117c:	4013      	ands	r3, r2
 800117e:	d001      	beq.n	8001184 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e074      	b.n	800126e <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2268      	movs	r2, #104	; 0x68
 8001188:	5c9b      	ldrb	r3, [r3, r2]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d101      	bne.n	8001192 <HAL_UART_Transmit+0x62>
 800118e:	2302      	movs	r3, #2
 8001190:	e06d      	b.n	800126e <HAL_UART_Transmit+0x13e>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2268      	movs	r2, #104	; 0x68
 8001196:	2101      	movs	r1, #1
 8001198:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2269      	movs	r2, #105	; 0x69
 80011a4:	2121      	movs	r1, #33	; 0x21
 80011a6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80011a8:	f7ff f876 	bl	8000298 <HAL_GetTick>
 80011ac:	0003      	movs	r3, r0
 80011ae:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	1dba      	adds	r2, r7, #6
 80011b4:	2150      	movs	r1, #80	; 0x50
 80011b6:	8812      	ldrh	r2, [r2, #0]
 80011b8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1dba      	adds	r2, r7, #6
 80011be:	2152      	movs	r1, #82	; 0x52
 80011c0:	8812      	ldrh	r2, [r2, #0]
 80011c2:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 80011c4:	e035      	b.n	8001232 <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2252      	movs	r2, #82	; 0x52
 80011ca:	5a9b      	ldrh	r3, [r3, r2]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	3b01      	subs	r3, #1
 80011d0:	b299      	uxth	r1, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2252      	movs	r2, #82	; 0x52
 80011d6:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	0013      	movs	r3, r2
 80011e2:	2200      	movs	r2, #0
 80011e4:	2180      	movs	r1, #128	; 0x80
 80011e6:	f000 fa81 	bl	80016ec <UART_WaitOnFlagUntilTimeout>
 80011ea:	1e03      	subs	r3, r0, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e03d      	b.n	800126e <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	015b      	lsls	r3, r3, #5
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d111      	bne.n	8001222 <HAL_UART_Transmit+0xf2>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10d      	bne.n	8001222 <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	8812      	ldrh	r2, [r2, #0]
 8001212:	05d2      	lsls	r2, r2, #23
 8001214:	0dd2      	lsrs	r2, r2, #23
 8001216:	b292      	uxth	r2, r2
 8001218:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	3302      	adds	r3, #2
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	e007      	b.n	8001232 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	1c59      	adds	r1, r3, #1
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2252      	movs	r2, #82	; 0x52
 8001236:	5a9b      	ldrh	r3, [r3, r2]
 8001238:	b29b      	uxth	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1c3      	bne.n	80011c6 <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	0013      	movs	r3, r2
 8001248:	2200      	movs	r2, #0
 800124a:	2140      	movs	r1, #64	; 0x40
 800124c:	f000 fa4e 	bl	80016ec <UART_WaitOnFlagUntilTimeout>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d001      	beq.n	8001258 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e00a      	b.n	800126e <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2269      	movs	r2, #105	; 0x69
 800125c:	2120      	movs	r1, #32
 800125e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2268      	movs	r2, #104	; 0x68
 8001264:	2100      	movs	r1, #0
 8001266:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	e000      	b.n	800126e <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 800126c:	2302      	movs	r3, #2
  }
}
 800126e:	0018      	movs	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	b006      	add	sp, #24
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001284:	2317      	movs	r3, #23
 8001286:	18fb      	adds	r3, r7, r3
 8001288:	2210      	movs	r2, #16
 800128a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 800128c:	230a      	movs	r3, #10
 800128e:	18fb      	adds	r3, r7, r3
 8001290:	2200      	movs	r2, #0
 8001292:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8001294:	2314      	movs	r3, #20
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	2200      	movs	r2, #0
 800129a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800129c:	2313      	movs	r3, #19
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	499f      	ldr	r1, [pc, #636]	; (8001544 <UART_SetConfig+0x2cc>)
 80012c8:	4011      	ands	r1, r2
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	6852      	ldr	r2, [r2, #4]
 80012da:	499b      	ldr	r1, [pc, #620]	; (8001548 <UART_SetConfig+0x2d0>)
 80012dc:	4011      	ands	r1, r2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68d2      	ldr	r2, [r2, #12]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699a      	ldr	r2, [r3, #24]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6812      	ldr	r2, [r2, #0]
 80012fa:	6892      	ldr	r2, [r2, #8]
 80012fc:	4993      	ldr	r1, [pc, #588]	; (800154c <UART_SetConfig+0x2d4>)
 80012fe:	4011      	ands	r1, r2
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	430a      	orrs	r2, r1
 8001304:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a91      	ldr	r2, [pc, #580]	; (8001550 <UART_SetConfig+0x2d8>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d125      	bne.n	800135c <UART_SetConfig+0xe4>
 8001310:	4b90      	ldr	r3, [pc, #576]	; (8001554 <UART_SetConfig+0x2dc>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	2203      	movs	r2, #3
 8001316:	4013      	ands	r3, r2
 8001318:	2b01      	cmp	r3, #1
 800131a:	d00f      	beq.n	800133c <UART_SetConfig+0xc4>
 800131c:	d304      	bcc.n	8001328 <UART_SetConfig+0xb0>
 800131e:	2b02      	cmp	r3, #2
 8001320:	d011      	beq.n	8001346 <UART_SetConfig+0xce>
 8001322:	2b03      	cmp	r3, #3
 8001324:	d005      	beq.n	8001332 <UART_SetConfig+0xba>
 8001326:	e013      	b.n	8001350 <UART_SetConfig+0xd8>
 8001328:	2317      	movs	r3, #23
 800132a:	18fb      	adds	r3, r7, r3
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
 8001330:	e022      	b.n	8001378 <UART_SetConfig+0x100>
 8001332:	2317      	movs	r3, #23
 8001334:	18fb      	adds	r3, r7, r3
 8001336:	2202      	movs	r2, #2
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	e01d      	b.n	8001378 <UART_SetConfig+0x100>
 800133c:	2317      	movs	r3, #23
 800133e:	18fb      	adds	r3, r7, r3
 8001340:	2204      	movs	r2, #4
 8001342:	701a      	strb	r2, [r3, #0]
 8001344:	e018      	b.n	8001378 <UART_SetConfig+0x100>
 8001346:	2317      	movs	r3, #23
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	2208      	movs	r2, #8
 800134c:	701a      	strb	r2, [r3, #0]
 800134e:	e013      	b.n	8001378 <UART_SetConfig+0x100>
 8001350:	2317      	movs	r3, #23
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	2210      	movs	r2, #16
 8001356:	701a      	strb	r2, [r3, #0]
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	e00d      	b.n	8001378 <UART_SetConfig+0x100>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a7d      	ldr	r2, [pc, #500]	; (8001558 <UART_SetConfig+0x2e0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d104      	bne.n	8001370 <UART_SetConfig+0xf8>
 8001366:	2317      	movs	r3, #23
 8001368:	18fb      	adds	r3, r7, r3
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
 800136e:	e003      	b.n	8001378 <UART_SetConfig+0x100>
 8001370:	2317      	movs	r3, #23
 8001372:	18fb      	adds	r3, r7, r3
 8001374:	2210      	movs	r2, #16
 8001376:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69da      	ldr	r2, [r3, #28]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	429a      	cmp	r2, r3
 8001382:	d000      	beq.n	8001386 <UART_SetConfig+0x10e>
 8001384:	e07b      	b.n	800147e <UART_SetConfig+0x206>
  {
    switch (clocksource)
 8001386:	2317      	movs	r3, #23
 8001388:	18fb      	adds	r3, r7, r3
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d01c      	beq.n	80013ca <UART_SetConfig+0x152>
 8001390:	dc02      	bgt.n	8001398 <UART_SetConfig+0x120>
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <UART_SetConfig+0x12a>
 8001396:	e04f      	b.n	8001438 <UART_SetConfig+0x1c0>
 8001398:	2b04      	cmp	r3, #4
 800139a:	d027      	beq.n	80013ec <UART_SetConfig+0x174>
 800139c:	2b08      	cmp	r3, #8
 800139e:	d039      	beq.n	8001414 <UART_SetConfig+0x19c>
 80013a0:	e04a      	b.n	8001438 <UART_SetConfig+0x1c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80013a2:	f7ff fe57 	bl	8001054 <HAL_RCC_GetPCLK1Freq>
 80013a6:	0003      	movs	r3, r0
 80013a8:	005a      	lsls	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	085b      	lsrs	r3, r3, #1
 80013b0:	18d2      	adds	r2, r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	0019      	movs	r1, r3
 80013b8:	0010      	movs	r0, r2
 80013ba:	f7fe fea5 	bl	8000108 <__udivsi3>
 80013be:	0003      	movs	r3, r0
 80013c0:	001a      	movs	r2, r3
 80013c2:	2314      	movs	r3, #20
 80013c4:	18fb      	adds	r3, r7, r3
 80013c6:	801a      	strh	r2, [r3, #0]
        break;
 80013c8:	e03b      	b.n	8001442 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	085b      	lsrs	r3, r3, #1
 80013d0:	4a62      	ldr	r2, [pc, #392]	; (800155c <UART_SetConfig+0x2e4>)
 80013d2:	189a      	adds	r2, r3, r2
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	0019      	movs	r1, r3
 80013da:	0010      	movs	r0, r2
 80013dc:	f7fe fe94 	bl	8000108 <__udivsi3>
 80013e0:	0003      	movs	r3, r0
 80013e2:	001a      	movs	r2, r3
 80013e4:	2314      	movs	r3, #20
 80013e6:	18fb      	adds	r3, r7, r3
 80013e8:	801a      	strh	r2, [r3, #0]
        break;
 80013ea:	e02a      	b.n	8001442 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80013ec:	f7ff fdc8 	bl	8000f80 <HAL_RCC_GetSysClockFreq>
 80013f0:	0003      	movs	r3, r0
 80013f2:	005a      	lsls	r2, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	085b      	lsrs	r3, r3, #1
 80013fa:	18d2      	adds	r2, r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	0019      	movs	r1, r3
 8001402:	0010      	movs	r0, r2
 8001404:	f7fe fe80 	bl	8000108 <__udivsi3>
 8001408:	0003      	movs	r3, r0
 800140a:	001a      	movs	r2, r3
 800140c:	2314      	movs	r3, #20
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	801a      	strh	r2, [r3, #0]
        break;
 8001412:	e016      	b.n	8001442 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	085b      	lsrs	r3, r3, #1
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	0252      	lsls	r2, r2, #9
 800141e:	189a      	adds	r2, r3, r2
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	0019      	movs	r1, r3
 8001426:	0010      	movs	r0, r2
 8001428:	f7fe fe6e 	bl	8000108 <__udivsi3>
 800142c:	0003      	movs	r3, r0
 800142e:	001a      	movs	r2, r3
 8001430:	2314      	movs	r3, #20
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	801a      	strh	r2, [r3, #0]
        break;
 8001436:	e004      	b.n	8001442 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001438:	2313      	movs	r3, #19
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
        break;
 8001440:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001442:	230a      	movs	r3, #10
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	2214      	movs	r2, #20
 8001448:	18ba      	adds	r2, r7, r2
 800144a:	8812      	ldrh	r2, [r2, #0]
 800144c:	210f      	movs	r1, #15
 800144e:	438a      	bics	r2, r1
 8001450:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001452:	2314      	movs	r3, #20
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	105b      	asrs	r3, r3, #1
 800145a:	b29b      	uxth	r3, r3
 800145c:	2207      	movs	r2, #7
 800145e:	4013      	ands	r3, r2
 8001460:	b299      	uxth	r1, r3
 8001462:	230a      	movs	r3, #10
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	220a      	movs	r2, #10
 8001468:	18ba      	adds	r2, r7, r2
 800146a:	8812      	ldrh	r2, [r2, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	220a      	movs	r2, #10
 8001476:	18ba      	adds	r2, r7, r2
 8001478:	8812      	ldrh	r2, [r2, #0]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	e05b      	b.n	8001536 <UART_SetConfig+0x2be>
  }
  else
  {
    switch (clocksource)
 800147e:	2317      	movs	r3, #23
 8001480:	18fb      	adds	r3, r7, r3
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d01b      	beq.n	80014c0 <UART_SetConfig+0x248>
 8001488:	dc02      	bgt.n	8001490 <UART_SetConfig+0x218>
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <UART_SetConfig+0x222>
 800148e:	e04d      	b.n	800152c <UART_SetConfig+0x2b4>
 8001490:	2b04      	cmp	r3, #4
 8001492:	d026      	beq.n	80014e2 <UART_SetConfig+0x26a>
 8001494:	2b08      	cmp	r3, #8
 8001496:	d037      	beq.n	8001508 <UART_SetConfig+0x290>
 8001498:	e048      	b.n	800152c <UART_SetConfig+0x2b4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681c      	ldr	r4, [r3, #0]
 800149e:	f7ff fdd9 	bl	8001054 <HAL_RCC_GetPCLK1Freq>
 80014a2:	0002      	movs	r2, r0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	18d2      	adds	r2, r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	0019      	movs	r1, r3
 80014b2:	0010      	movs	r0, r2
 80014b4:	f7fe fe28 	bl	8000108 <__udivsi3>
 80014b8:	0003      	movs	r3, r0
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	60e3      	str	r3, [r4, #12]
        break;
 80014be:	e03a      	b.n	8001536 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681c      	ldr	r4, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	085b      	lsrs	r3, r3, #1
 80014ca:	4a25      	ldr	r2, [pc, #148]	; (8001560 <UART_SetConfig+0x2e8>)
 80014cc:	189a      	adds	r2, r3, r2
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	0019      	movs	r1, r3
 80014d4:	0010      	movs	r0, r2
 80014d6:	f7fe fe17 	bl	8000108 <__udivsi3>
 80014da:	0003      	movs	r3, r0
 80014dc:	b29b      	uxth	r3, r3
 80014de:	60e3      	str	r3, [r4, #12]
        break;
 80014e0:	e029      	b.n	8001536 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681c      	ldr	r4, [r3, #0]
 80014e6:	f7ff fd4b 	bl	8000f80 <HAL_RCC_GetSysClockFreq>
 80014ea:	0002      	movs	r2, r0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	18d2      	adds	r2, r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	0019      	movs	r1, r3
 80014fa:	0010      	movs	r0, r2
 80014fc:	f7fe fe04 	bl	8000108 <__udivsi3>
 8001500:	0003      	movs	r3, r0
 8001502:	b29b      	uxth	r3, r3
 8001504:	60e3      	str	r3, [r4, #12]
        break;
 8001506:	e016      	b.n	8001536 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681c      	ldr	r4, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	085b      	lsrs	r3, r3, #1
 8001512:	2280      	movs	r2, #128	; 0x80
 8001514:	0212      	lsls	r2, r2, #8
 8001516:	189a      	adds	r2, r3, r2
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	0019      	movs	r1, r3
 800151e:	0010      	movs	r0, r2
 8001520:	f7fe fdf2 	bl	8000108 <__udivsi3>
 8001524:	0003      	movs	r3, r0
 8001526:	b29b      	uxth	r3, r3
 8001528:	60e3      	str	r3, [r4, #12]
        break;
 800152a:	e004      	b.n	8001536 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800152c:	2313      	movs	r3, #19
 800152e:	18fb      	adds	r3, r7, r3
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
        break;
 8001534:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8001536:	2313      	movs	r3, #19
 8001538:	18fb      	adds	r3, r7, r3
 800153a:	781b      	ldrb	r3, [r3, #0]

}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b007      	add	sp, #28
 8001542:	bd90      	pop	{r4, r7, pc}
 8001544:	ffff69f3 	.word	0xffff69f3
 8001548:	ffffcfff 	.word	0xffffcfff
 800154c:	fffff4ff 	.word	0xfffff4ff
 8001550:	40013800 	.word	0x40013800
 8001554:	40021000 	.word	0x40021000
 8001558:	40004400 	.word	0x40004400
 800155c:	00f42400 	.word	0x00f42400
 8001560:	007a1200 	.word	0x007a1200

08001564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	2201      	movs	r2, #1
 8001572:	4013      	ands	r3, r2
 8001574:	d00a      	beq.n	800158c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	6852      	ldr	r2, [r2, #4]
 8001580:	4945      	ldr	r1, [pc, #276]	; (8001698 <UART_AdvFeatureConfig+0x134>)
 8001582:	4011      	ands	r1, r2
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001588:	430a      	orrs	r2, r1
 800158a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	2202      	movs	r2, #2
 8001592:	4013      	ands	r3, r2
 8001594:	d00a      	beq.n	80015ac <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	6852      	ldr	r2, [r2, #4]
 80015a0:	493e      	ldr	r1, [pc, #248]	; (800169c <UART_AdvFeatureConfig+0x138>)
 80015a2:	4011      	ands	r1, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015a8:	430a      	orrs	r2, r1
 80015aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	2204      	movs	r2, #4
 80015b2:	4013      	ands	r3, r2
 80015b4:	d00a      	beq.n	80015cc <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	6852      	ldr	r2, [r2, #4]
 80015c0:	4937      	ldr	r1, [pc, #220]	; (80016a0 <UART_AdvFeatureConfig+0x13c>)
 80015c2:	4011      	ands	r1, r2
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015c8:	430a      	orrs	r2, r1
 80015ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	2208      	movs	r2, #8
 80015d2:	4013      	ands	r3, r2
 80015d4:	d00a      	beq.n	80015ec <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	6852      	ldr	r2, [r2, #4]
 80015e0:	4930      	ldr	r1, [pc, #192]	; (80016a4 <UART_AdvFeatureConfig+0x140>)
 80015e2:	4011      	ands	r1, r2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015e8:	430a      	orrs	r2, r1
 80015ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	2210      	movs	r2, #16
 80015f2:	4013      	ands	r3, r2
 80015f4:	d00a      	beq.n	800160c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	6892      	ldr	r2, [r2, #8]
 8001600:	4929      	ldr	r1, [pc, #164]	; (80016a8 <UART_AdvFeatureConfig+0x144>)
 8001602:	4011      	ands	r1, r2
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001608:	430a      	orrs	r2, r1
 800160a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	2220      	movs	r2, #32
 8001612:	4013      	ands	r3, r2
 8001614:	d00a      	beq.n	800162c <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	6892      	ldr	r2, [r2, #8]
 8001620:	4922      	ldr	r1, [pc, #136]	; (80016ac <UART_AdvFeatureConfig+0x148>)
 8001622:	4011      	ands	r1, r2
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001628:	430a      	orrs	r2, r1
 800162a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	2240      	movs	r2, #64	; 0x40
 8001632:	4013      	ands	r3, r2
 8001634:	d01b      	beq.n	800166e <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	6852      	ldr	r2, [r2, #4]
 8001640:	491b      	ldr	r1, [pc, #108]	; (80016b0 <UART_AdvFeatureConfig+0x14c>)
 8001642:	4011      	ands	r1, r2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001648:	430a      	orrs	r2, r1
 800164a:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	035b      	lsls	r3, r3, #13
 8001654:	429a      	cmp	r2, r3
 8001656:	d10a      	bne.n	800166e <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	6852      	ldr	r2, [r2, #4]
 8001662:	4914      	ldr	r1, [pc, #80]	; (80016b4 <UART_AdvFeatureConfig+0x150>)
 8001664:	4011      	ands	r1, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800166a:	430a      	orrs	r2, r1
 800166c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	2280      	movs	r2, #128	; 0x80
 8001674:	4013      	ands	r3, r2
 8001676:	d00a      	beq.n	800168e <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	6852      	ldr	r2, [r2, #4]
 8001682:	490d      	ldr	r1, [pc, #52]	; (80016b8 <UART_AdvFeatureConfig+0x154>)
 8001684:	4011      	ands	r1, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800168a:	430a      	orrs	r2, r1
 800168c:	605a      	str	r2, [r3, #4]
  }
}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	46bd      	mov	sp, r7
 8001692:	b002      	add	sp, #8
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	fffdffff 	.word	0xfffdffff
 800169c:	fffeffff 	.word	0xfffeffff
 80016a0:	fffbffff 	.word	0xfffbffff
 80016a4:	ffff7fff 	.word	0xffff7fff
 80016a8:	ffffefff 	.word	0xffffefff
 80016ac:	ffffdfff 	.word	0xffffdfff
 80016b0:	ffefffff 	.word	0xffefffff
 80016b4:	ff9fffff 	.word	0xff9fffff
 80016b8:	fff7ffff 	.word	0xfff7ffff

080016bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2269      	movs	r2, #105	; 0x69
 80016ce:	2120      	movs	r1, #32
 80016d0:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	226a      	movs	r2, #106	; 0x6a
 80016d6:	2120      	movs	r1, #32
 80016d8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2268      	movs	r2, #104	; 0x68
 80016de:	2100      	movs	r1, #0
 80016e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}

080016ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	1dfb      	adds	r3, r7, #7
 80016fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016fc:	e02b      	b.n	8001756 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	3301      	adds	r3, #1
 8001702:	d028      	beq.n	8001756 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d007      	beq.n	800171a <UART_WaitOnFlagUntilTimeout+0x2e>
 800170a:	f7fe fdc5 	bl	8000298 <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	1ad2      	subs	r2, r2, r3
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	429a      	cmp	r2, r3
 8001718:	d91d      	bls.n	8001756 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	4916      	ldr	r1, [pc, #88]	; (8001780 <UART_WaitOnFlagUntilTimeout+0x94>)
 8001726:	400a      	ands	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	6892      	ldr	r2, [r2, #8]
 8001734:	2101      	movs	r1, #1
 8001736:	438a      	bics	r2, r1
 8001738:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2269      	movs	r2, #105	; 0x69
 800173e:	2120      	movs	r1, #32
 8001740:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	226a      	movs	r2, #106	; 0x6a
 8001746:	2120      	movs	r1, #32
 8001748:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2268      	movs	r2, #104	; 0x68
 800174e:	2100      	movs	r1, #0
 8001750:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e00f      	b.n	8001776 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	425a      	negs	r2, r3
 8001766:	4153      	adcs	r3, r2
 8001768:	b2db      	uxtb	r3, r3
 800176a:	001a      	movs	r2, r3
 800176c:	1dfb      	adds	r3, r7, #7
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d0c4      	beq.n	80016fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	0018      	movs	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	b004      	add	sp, #16
 800177c:	bd80      	pop	{r7, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	fffffe5f 	.word	0xfffffe5f

08001784 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	0002      	movs	r2, r0
 800178c:	1dbb      	adds	r3, r7, #6
 800178e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001794:	1dbb      	adds	r3, r7, #6
 8001796:	2200      	movs	r2, #0
 8001798:	5e9b      	ldrsh	r3, [r3, r2]
 800179a:	2b84      	cmp	r3, #132	; 0x84
 800179c:	d006      	beq.n	80017ac <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800179e:	1dbb      	adds	r3, r7, #6
 80017a0:	2200      	movs	r2, #0
 80017a2:	5e9a      	ldrsh	r2, [r3, r2]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	18d3      	adds	r3, r2, r3
 80017a8:	3303      	adds	r3, #3
 80017aa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80017ac:	68fb      	ldr	r3, [r7, #12]
}
 80017ae:	0018      	movs	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b004      	add	sp, #16
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80017ba:	f000 fd03 	bl	80021c4 <vTaskStartScheduler>
  
  return osOK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80017c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c8:	b087      	sub	sp, #28
 80017ca:	af02      	add	r7, sp, #8
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685c      	ldr	r4, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017dc:	b29e      	uxth	r6, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2208      	movs	r2, #8
 80017e2:	5e9b      	ldrsh	r3, [r3, r2]
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff ffcd 	bl	8001784 <makeFreeRtosPriority>
 80017ea:	0001      	movs	r1, r0
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	230c      	movs	r3, #12
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	9100      	str	r1, [sp, #0]
 80017f6:	0013      	movs	r3, r2
 80017f8:	0032      	movs	r2, r6
 80017fa:	0029      	movs	r1, r5
 80017fc:	0020      	movs	r0, r4
 80017fe:	f000 fb95 	bl	8001f2c <xTaskCreate>
 8001802:	0003      	movs	r3, r0
 8001804:	2b01      	cmp	r3, #1
 8001806:	d001      	beq.n	800180c <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8001808:	2300      	movs	r3, #0
 800180a:	e000      	b.n	800180e <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	0018      	movs	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	b005      	add	sp, #20
 8001814:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001816 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <osDelay+0x16>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	e000      	b.n	800182e <osDelay+0x18>
 800182c:	2301      	movs	r3, #1
 800182e:	0018      	movs	r0, r3
 8001830:	f000 fca2 	bl	8002178 <vTaskDelay>
  
  return osOK;
 8001834:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001836:	0018      	movs	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	b004      	add	sp, #16
 800183c:	bd80      	pop	{r7, pc}

0800183e <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001842:	f000 ff57 	bl	80026f4 <xTaskGetSchedulerState>
 8001846:	0003      	movs	r3, r0
 8001848:	2b01      	cmp	r3, #1
 800184a:	d001      	beq.n	8001850 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800184c:	f000 f994 	bl	8001b78 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3308      	adds	r3, #8
 8001862:	001a      	movs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	4252      	negs	r2, r2
 800186e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3308      	adds	r3, #8
 8001874:	001a      	movs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3308      	adds	r3, #8
 800187e:	001a      	movs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}

08001892 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018a0:	46c0      	nop			; (mov r8, r8)
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b002      	add	sp, #8
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	601a      	str	r2, [r3, #0]
}
 80018e4:	46c0      	nop			; (mov r8, r8)
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b004      	add	sp, #16
 80018ea:	bd80      	pop	{r7, pc}

080018ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	3301      	adds	r3, #1
 8001900:	d103      	bne.n	800190a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	e00c      	b.n	8001924 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3308      	adds	r3, #8
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e002      	b.n	8001918 <vListInsert+0x2c>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	429a      	cmp	r2, r3
 8001922:	d9f6      	bls.n	8001912 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	601a      	str	r2, [r3, #0]
}
 8001950:	46c0      	nop			; (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	b004      	add	sp, #16
 8001956:	bd80      	pop	{r7, pc}

08001958 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6892      	ldr	r2, [r2, #8]
 800196e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6852      	ldr	r2, [r2, #4]
 8001978:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	429a      	cmp	r2, r3
 8001982:	d103      	bne.n	800198c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	1e5a      	subs	r2, r3, #1
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b004      	add	sp, #16
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	3b04      	subs	r3, #4
 80019b8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2280      	movs	r2, #128	; 0x80
 80019be:	0452      	lsls	r2, r2, #17
 80019c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3b04      	subs	r3, #4
 80019c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3b04      	subs	r3, #4
 80019d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80019d4:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <pxPortInitialiseStack+0x50>)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3b14      	subs	r3, #20
 80019de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3b20      	subs	r3, #32
 80019ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80019ec:	68fb      	ldr	r3, [r7, #12]
}
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b004      	add	sp, #16
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	080019fd 	.word	0x080019fd

080019fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <prvTaskExitError+0x14>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	d001      	beq.n	8001a0c <prvTaskExitError+0x10>
 8001a08:	b672      	cpsid	i
 8001a0a:	e7fe      	b.n	8001a0a <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
 8001a0c:	b672      	cpsid	i
	for( ;; );
 8001a0e:	e7fe      	b.n	8001a0e <prvTaskExitError+0x12>
 8001a10:	20000000 	.word	0x20000000

08001a14 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8001a20:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <pxCurrentTCBConst2>)
 8001a22:	6813      	ldr	r3, [r2, #0]
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	3020      	adds	r0, #32
 8001a28:	f380 8809 	msr	PSP, r0
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f380 8814 	msr	CONTROL, r0
 8001a32:	f3bf 8f6f 	isb	sy
 8001a36:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8001a38:	46ae      	mov	lr, r5
 8001a3a:	bc08      	pop	{r3}
 8001a3c:	bc04      	pop	{r2}
 8001a3e:	b662      	cpsie	i
 8001a40:	4718      	bx	r3
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46c0      	nop			; (mov r8, r8)
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	46c0      	nop			; (mov r8, r8)
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	46c0      	nop			; (mov r8, r8)
 8001a4e:	46c0      	nop			; (mov r8, r8)

08001a50 <pxCurrentTCBConst2>:
 8001a50:	20000c3c 	.word	0x20000c3c
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46c0      	nop			; (mov r8, r8)

08001a58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <xPortStartScheduler+0x3c>)
 8001a5e:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <xPortStartScheduler+0x3c>)
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	21ff      	movs	r1, #255	; 0xff
 8001a64:	0409      	lsls	r1, r1, #16
 8001a66:	430a      	orrs	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <xPortStartScheduler+0x3c>)
 8001a6c:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <xPortStartScheduler+0x3c>)
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	21ff      	movs	r1, #255	; 0xff
 8001a72:	0609      	lsls	r1, r1, #24
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001a78:	f000 f898 	bl	8001bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <xPortStartScheduler+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8001a82:	f7ff ffcd 	bl	8001a20 <vPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001a86:	f7ff ffb9 	bl	80019fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	e000ed20 	.word	0xe000ed20
 8001a98:	20000000 	.word	0x20000000

08001a9c <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <vPortYield+0x1c>)
 8001aa2:	2280      	movs	r2, #128	; 0x80
 8001aa4:	0552      	lsls	r2, r2, #21
 8001aa6:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8001aa8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001aac:	f3bf 8f6f 	isb	sy
}
 8001ab0:	46c0      	nop			; (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	e000ed04 	.word	0xe000ed04

08001abc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8001ac0:	b672      	cpsid	i
    uxCriticalNesting++;
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <vPortEnterCritical+0x20>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <vPortEnterCritical+0x20>)
 8001aca:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8001acc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001ad0:	f3bf 8f6f 	isb	sy
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	20000000 	.word	0x20000000

08001ae0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <vPortExitCritical+0x2c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <vPortExitCritical+0x10>
 8001aec:	b672      	cpsid	i
 8001aee:	e7fe      	b.n	8001aee <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <vPortExitCritical+0x2c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	1e5a      	subs	r2, r3, #1
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <vPortExitCritical+0x2c>)
 8001af8:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <vPortExitCritical+0x2c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d100      	bne.n	8001b04 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8001b02:	b662      	cpsie	i
    }
}
 8001b04:	46c0      	nop			; (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	20000000 	.word	0x20000000

08001b10 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8001b10:	f3ef 8010 	mrs	r0, PRIMASK
 8001b14:	b672      	cpsid	i
 8001b16:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	0018      	movs	r0, r3

08001b1c <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 8001b1c:	f380 8810 	msr	PRIMASK, r0
 8001b20:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	( void ) ulMask;
}
 8001b22:	46c0      	nop			; (mov r8, r8)
	...

08001b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001b30:	f3ef 8009 	mrs	r0, PSP
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <pxCurrentTCBConst>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	3820      	subs	r0, #32
 8001b3a:	6010      	str	r0, [r2, #0]
 8001b3c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8001b3e:	4644      	mov	r4, r8
 8001b40:	464d      	mov	r5, r9
 8001b42:	4656      	mov	r6, sl
 8001b44:	465f      	mov	r7, fp
 8001b46:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8001b48:	b508      	push	{r3, lr}
 8001b4a:	b672      	cpsid	i
 8001b4c:	f000 fcbc 	bl	80024c8 <vTaskSwitchContext>
 8001b50:	b662      	cpsie	i
 8001b52:	bc0c      	pop	{r2, r3}
 8001b54:	6811      	ldr	r1, [r2, #0]
 8001b56:	6808      	ldr	r0, [r1, #0]
 8001b58:	3010      	adds	r0, #16
 8001b5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8001b5c:	46a0      	mov	r8, r4
 8001b5e:	46a9      	mov	r9, r5
 8001b60:	46b2      	mov	sl, r6
 8001b62:	46bb      	mov	fp, r7
 8001b64:	f380 8809 	msr	PSP, r0
 8001b68:	3820      	subs	r0, #32
 8001b6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8001b6c:	4718      	bx	r3
 8001b6e:	46c0      	nop			; (mov r8, r8)

08001b70 <pxCurrentTCBConst>:
 8001b70:	20000c3c 	.word	0x20000c3c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46c0      	nop			; (mov r8, r8)

08001b78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8001b7e:	f7ff ffc7 	bl	8001b10 <ulSetInterruptMaskFromISR>
 8001b82:	0003      	movs	r3, r0
 8001b84:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001b86:	f000 fbeb 	bl	8002360 <xTaskIncrementTick>
 8001b8a:	1e03      	subs	r3, r0, #0
 8001b8c:	d003      	beq.n	8001b96 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <xPortSysTickHandler+0x30>)
 8001b90:	2280      	movs	r2, #128	; 0x80
 8001b92:	0552      	lsls	r2, r2, #21
 8001b94:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7ff ffbf 	bl	8001b1c <vClearInterruptMaskFromISR>
}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b002      	add	sp, #8
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	e000ed04 	.word	0xe000ed04

08001bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001bac:	b5b0      	push	{r4, r5, r7, lr}
 8001bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001bb0:	4c08      	ldr	r4, [pc, #32]	; (8001bd4 <vPortSetupTimerInterrupt+0x28>)
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <vPortSetupTimerInterrupt+0x2c>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	23fa      	movs	r3, #250	; 0xfa
 8001bb8:	0099      	lsls	r1, r3, #2
 8001bba:	0010      	movs	r0, r2
 8001bbc:	f7fe faa4 	bl	8000108 <__udivsi3>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <vPortSetupTimerInterrupt+0x30>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
}
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	e000e014 	.word	0xe000e014
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	e000e010 	.word	0xe000e010

08001be0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8001bec:	f000 fb20 	bl	8002230 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001bf0:	4b49      	ldr	r3, [pc, #292]	; (8001d18 <pvPortMalloc+0x138>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001bf8:	f000 f8e0 	bl	8001dbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001bfc:	4b47      	ldr	r3, [pc, #284]	; (8001d1c <pvPortMalloc+0x13c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	4013      	ands	r3, r2
 8001c04:	d000      	beq.n	8001c08 <pvPortMalloc+0x28>
 8001c06:	e079      	b.n	8001cfc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d012      	beq.n	8001c34 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8001c0e:	2208      	movs	r2, #8
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	189b      	adds	r3, r3, r2
 8001c14:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2207      	movs	r2, #7
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d00a      	beq.n	8001c34 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2207      	movs	r2, #7
 8001c22:	4393      	bics	r3, r2
 8001c24:	3308      	adds	r3, #8
 8001c26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2207      	movs	r2, #7
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d001      	beq.n	8001c34 <pvPortMalloc+0x54>
 8001c30:	b672      	cpsid	i
 8001c32:	e7fe      	b.n	8001c32 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d060      	beq.n	8001cfc <pvPortMalloc+0x11c>
 8001c3a:	4b39      	ldr	r3, [pc, #228]	; (8001d20 <pvPortMalloc+0x140>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d85b      	bhi.n	8001cfc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001c44:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <pvPortMalloc+0x144>)
 8001c46:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8001c48:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <pvPortMalloc+0x144>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c4e:	e004      	b.n	8001c5a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d203      	bcs.n	8001c6c <pvPortMalloc+0x8c>
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f1      	bne.n	8001c50 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001c6c:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <pvPortMalloc+0x138>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d042      	beq.n	8001cfc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2208      	movs	r2, #8
 8001c7c:	189b      	adds	r3, r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	1ad2      	subs	r2, r2, r3
 8001c90:	2308      	movs	r3, #8
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d916      	bls.n	8001cc6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	18d3      	adds	r3, r2, r3
 8001c9e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d001      	beq.n	8001cac <pvPortMalloc+0xcc>
 8001ca8:	b672      	cpsid	i
 8001caa:	e7fe      	b.n	8001caa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	1ad2      	subs	r2, r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f000 f8db 	bl	8001e7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <pvPortMalloc+0x140>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	1ad2      	subs	r2, r2, r3
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <pvPortMalloc+0x140>)
 8001cd2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <pvPortMalloc+0x140>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <pvPortMalloc+0x148>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d203      	bcs.n	8001ce8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <pvPortMalloc+0x140>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <pvPortMalloc+0x148>)
 8001ce6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <pvPortMalloc+0x13c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001cfc:	f000 faa4 	bl	8002248 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2207      	movs	r2, #7
 8001d04:	4013      	ands	r3, r2
 8001d06:	d001      	beq.n	8001d0c <pvPortMalloc+0x12c>
 8001d08:	b672      	cpsid	i
 8001d0a:	e7fe      	b.n	8001d0a <pvPortMalloc+0x12a>
	return pvReturn;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
}
 8001d0e:	0018      	movs	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b006      	add	sp, #24
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	20000c2c 	.word	0x20000c2c
 8001d1c:	20000c38 	.word	0x20000c38
 8001d20:	20000c30 	.word	0x20000c30
 8001d24:	20000c24 	.word	0x20000c24
 8001d28:	20000c34 	.word	0x20000c34

08001d2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d035      	beq.n	8001daa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001d3e:	2308      	movs	r3, #8
 8001d40:	425b      	negs	r3, r3
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	18d3      	adds	r3, r2, r3
 8001d46:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <vPortFree+0x88>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4013      	ands	r3, r2
 8001d56:	d101      	bne.n	8001d5c <vPortFree+0x30>
 8001d58:	b672      	cpsid	i
 8001d5a:	e7fe      	b.n	8001d5a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <vPortFree+0x3c>
 8001d64:	b672      	cpsid	i
 8001d66:	e7fe      	b.n	8001d66 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <vPortFree+0x88>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4013      	ands	r3, r2
 8001d72:	d01a      	beq.n	8001daa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d116      	bne.n	8001daa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <vPortFree+0x88>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	401a      	ands	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001d8c:	f000 fa50 	bl	8002230 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <vPortFree+0x8c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	18d2      	adds	r2, r2, r3
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <vPortFree+0x8c>)
 8001d9c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	0018      	movs	r0, r3
 8001da2:	f000 f86b 	bl	8001e7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001da6:	f000 fa4f 	bl	8002248 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b004      	add	sp, #16
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	20000c38 	.word	0x20000c38
 8001db8:	20000c30 	.word	0x20000c30

08001dbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001dc2:	23c0      	movs	r3, #192	; 0xc0
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001dc8:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <prvHeapInit+0xa8>)
 8001dca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2207      	movs	r2, #7
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d00c      	beq.n	8001dee <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3307      	adds	r3, #7
 8001dd8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2207      	movs	r2, #7
 8001dde:	4393      	bics	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1ad2      	subs	r2, r2, r3
 8001de8:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <prvHeapInit+0xa8>)
 8001dea:	18d3      	adds	r3, r2, r3
 8001dec:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <prvHeapInit+0xac>)
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <prvHeapInit+0xac>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	18d3      	adds	r3, r2, r3
 8001e04:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001e06:	2208      	movs	r2, #8
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2207      	movs	r2, #7
 8001e12:	4393      	bics	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <prvHeapInit+0xb0>)
 8001e1a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8001e1c:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <prvHeapInit+0xb0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2200      	movs	r2, #0
 8001e22:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <prvHeapInit+0xb0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	1ad2      	subs	r2, r2, r3
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <prvHeapInit+0xb0>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <prvHeapInit+0xb4>)
 8001e48:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <prvHeapInit+0xb8>)
 8001e50:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <prvHeapInit+0xbc>)
 8001e54:	2280      	movs	r2, #128	; 0x80
 8001e56:	0612      	lsls	r2, r2, #24
 8001e58:	601a      	str	r2, [r3, #0]
}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b004      	add	sp, #16
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	20000024 	.word	0x20000024
 8001e68:	20000c24 	.word	0x20000c24
 8001e6c:	20000c2c 	.word	0x20000c2c
 8001e70:	20000c34 	.word	0x20000c34
 8001e74:	20000c30 	.word	0x20000c30
 8001e78:	20000c38 	.word	0x20000c38

08001e7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001e84:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <prvInsertBlockIntoFreeList+0xa8>)
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	e002      	b.n	8001e90 <prvInsertBlockIntoFreeList+0x14>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d3f7      	bcc.n	8001e8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	18d2      	adds	r2, r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d108      	bne.n	8001ebe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	18d2      	adds	r2, r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	18d2      	adds	r2, r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d118      	bne.n	8001f04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <prvInsertBlockIntoFreeList+0xac>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d00d      	beq.n	8001efa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	18d2      	adds	r2, r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	e008      	b.n	8001f0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <prvInsertBlockIntoFreeList+0xac>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	e003      	b.n	8001f0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d002      	beq.n	8001f1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b004      	add	sp, #16
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	20000c24 	.word	0x20000c24
 8001f28:	20000c2c 	.word	0x20000c2c

08001f2c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001f2c:	b590      	push	{r4, r7, lr}
 8001f2e:	b08d      	sub	sp, #52	; 0x34
 8001f30:	af04      	add	r7, sp, #16
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	1dbb      	adds	r3, r7, #6
 8001f3a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f3c:	1dbb      	adds	r3, r7, #6
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	0018      	movs	r0, r3
 8001f44:	f7ff fe4c 	bl	8001be0 <pvPortMalloc>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d010      	beq.n	8001f74 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001f52:	2054      	movs	r0, #84	; 0x54
 8001f54:	f7ff fe44 	bl	8001be0 <pvPortMalloc>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
 8001f68:	e006      	b.n	8001f78 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f7ff fedd 	bl	8001d2c <vPortFree>
 8001f72:	e001      	b.n	8001f78 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d016      	beq.n	8001fac <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001f7e:	1dbb      	adds	r3, r7, #6
 8001f80:	881a      	ldrh	r2, [r3, #0]
 8001f82:	683c      	ldr	r4, [r7, #0]
 8001f84:	68b9      	ldr	r1, [r7, #8]
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9303      	str	r3, [sp, #12]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	9302      	str	r3, [sp, #8]
 8001f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	0023      	movs	r3, r4
 8001f9a:	f000 f80f 	bl	8001fbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f000 f885 	bl	80020b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	e002      	b.n	8001fb2 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001fac:	2301      	movs	r3, #1
 8001fae:	425b      	negs	r3, r3
 8001fb0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001fb2:	69bb      	ldr	r3, [r7, #24]
	}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b009      	add	sp, #36	; 0x24
 8001fba:	bd90      	pop	{r4, r7, pc}

08001fbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4936      	ldr	r1, [pc, #216]	; (80020ac <prvInitialiseNewTask+0xf0>)
 8001fd2:	468c      	mov	ip, r1
 8001fd4:	4463      	add	r3, ip
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	18d3      	adds	r3, r2, r3
 8001fda:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2207      	movs	r2, #7
 8001fe0:	4393      	bics	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2207      	movs	r2, #7
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d001      	beq.n	8001ff0 <prvInitialiseNewTask+0x34>
 8001fec:	b672      	cpsid	i
 8001fee:	e7fe      	b.n	8001fee <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	e013      	b.n	800201e <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	18d3      	adds	r3, r2, r3
 8001ffc:	7818      	ldrb	r0, [r3, #0]
 8001ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002000:	2134      	movs	r1, #52	; 0x34
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	18d3      	adds	r3, r2, r3
 8002006:	185b      	adds	r3, r3, r1
 8002008:	1c02      	adds	r2, r0, #0
 800200a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	18d3      	adds	r3, r2, r3
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	3301      	adds	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b0f      	cmp	r3, #15
 8002022:	d9e8      	bls.n	8001ff6 <prvInitialiseNewTask+0x3a>
 8002024:	e000      	b.n	8002028 <prvInitialiseNewTask+0x6c>
		{
			break;
 8002026:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202a:	2243      	movs	r2, #67	; 0x43
 800202c:	2100      	movs	r1, #0
 800202e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	2b06      	cmp	r3, #6
 8002034:	d901      	bls.n	800203a <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002036:	2306      	movs	r3, #6
 8002038:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800203a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203c:	6a3a      	ldr	r2, [r7, #32]
 800203e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002042:	6a3a      	ldr	r2, [r7, #32]
 8002044:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	2200      	movs	r2, #0
 800204a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	3304      	adds	r3, #4
 8002050:	0018      	movs	r0, r3
 8002052:	f7ff fc1e 	bl	8001892 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002058:	3318      	adds	r3, #24
 800205a:	0018      	movs	r0, r3
 800205c:	f7ff fc19 	bl	8001892 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002064:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	2207      	movs	r2, #7
 800206a:	1ad2      	subs	r2, r2, r3
 800206c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	2200      	movs	r2, #0
 800207a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207e:	2250      	movs	r2, #80	; 0x50
 8002080:	2100      	movs	r1, #0
 8002082:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	68f9      	ldr	r1, [r7, #12]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	0018      	movs	r0, r3
 800208c:	f7ff fc8c 	bl	80019a8 <pxPortInitialiseStack>
 8002090:	0002      	movs	r2, r0
 8002092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002094:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b006      	add	sp, #24
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	3fffffff 	.word	0x3fffffff

080020b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80020b8:	f7ff fd00 	bl	8001abc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80020bc:	4b28      	ldr	r3, [pc, #160]	; (8002160 <prvAddNewTaskToReadyList+0xb0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	4b27      	ldr	r3, [pc, #156]	; (8002160 <prvAddNewTaskToReadyList+0xb0>)
 80020c4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80020c6:	4b27      	ldr	r3, [pc, #156]	; (8002164 <prvAddNewTaskToReadyList+0xb4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80020ce:	4b25      	ldr	r3, [pc, #148]	; (8002164 <prvAddNewTaskToReadyList+0xb4>)
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80020d4:	4b22      	ldr	r3, [pc, #136]	; (8002160 <prvAddNewTaskToReadyList+0xb0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d110      	bne.n	80020fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80020dc:	f000 fa56 	bl	800258c <prvInitialiseTaskLists>
 80020e0:	e00d      	b.n	80020fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80020e2:	4b21      	ldr	r3, [pc, #132]	; (8002168 <prvAddNewTaskToReadyList+0xb8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <prvAddNewTaskToReadyList+0xb4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d802      	bhi.n	80020fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <prvAddNewTaskToReadyList+0xb4>)
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <prvAddNewTaskToReadyList+0xbc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <prvAddNewTaskToReadyList+0xbc>)
 8002106:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <prvAddNewTaskToReadyList+0xc0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d903      	bls.n	800211c <prvAddNewTaskToReadyList+0x6c>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <prvAddNewTaskToReadyList+0xc0>)
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002120:	0013      	movs	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	189b      	adds	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4a12      	ldr	r2, [pc, #72]	; (8002174 <prvAddNewTaskToReadyList+0xc4>)
 800212a:	189a      	adds	r2, r3, r2
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3304      	adds	r3, #4
 8002130:	0019      	movs	r1, r3
 8002132:	0010      	movs	r0, r2
 8002134:	f7ff fbb8 	bl	80018a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002138:	f7ff fcd2 	bl	8001ae0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <prvAddNewTaskToReadyList+0xb8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002144:	4b07      	ldr	r3, [pc, #28]	; (8002164 <prvAddNewTaskToReadyList+0xb4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214e:	429a      	cmp	r2, r3
 8002150:	d201      	bcs.n	8002156 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002152:	f7ff fca3 	bl	8001a9c <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	46bd      	mov	sp, r7
 800215a:	b002      	add	sp, #8
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	20000d3c 	.word	0x20000d3c
 8002164:	20000c3c 	.word	0x20000c3c
 8002168:	20000d48 	.word	0x20000d48
 800216c:	20000d58 	.word	0x20000d58
 8002170:	20000d44 	.word	0x20000d44
 8002174:	20000c40 	.word	0x20000c40

08002178 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d010      	beq.n	80021ac <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <vTaskDelay+0x48>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <vTaskDelay+0x1e>
 8002192:	b672      	cpsid	i
 8002194:	e7fe      	b.n	8002194 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002196:	f000 f84b 	bl	8002230 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2100      	movs	r1, #0
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 fac4 	bl	800272c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80021a4:	f000 f850 	bl	8002248 <xTaskResumeAll>
 80021a8:	0003      	movs	r3, r0
 80021aa:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80021b2:	f7ff fc73 	bl	8001a9c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b004      	add	sp, #16
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	20000d64 	.word	0x20000d64

080021c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80021ca:	4913      	ldr	r1, [pc, #76]	; (8002218 <vTaskStartScheduler+0x54>)
 80021cc:	4813      	ldr	r0, [pc, #76]	; (800221c <vTaskStartScheduler+0x58>)
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <vTaskStartScheduler+0x5c>)
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	2300      	movs	r3, #0
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2300      	movs	r3, #0
 80021d8:	2280      	movs	r2, #128	; 0x80
 80021da:	f7ff fea7 	bl	8001f2c <xTaskCreate>
 80021de:	0003      	movs	r3, r0
 80021e0:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d10d      	bne.n	8002204 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80021e8:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <vTaskStartScheduler+0x60>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	4252      	negs	r2, r2
 80021f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <vTaskStartScheduler+0x64>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <vTaskStartScheduler+0x68>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80021fe:	f7ff fc2b 	bl	8001a58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002202:	e004      	b.n	800220e <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3301      	adds	r3, #1
 8002208:	d101      	bne.n	800220e <vTaskStartScheduler+0x4a>
 800220a:	b672      	cpsid	i
 800220c:	e7fe      	b.n	800220c <vTaskStartScheduler+0x48>
}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	b002      	add	sp, #8
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	08002ccc 	.word	0x08002ccc
 800221c:	0800256d 	.word	0x0800256d
 8002220:	20000d60 	.word	0x20000d60
 8002224:	20000d5c 	.word	0x20000d5c
 8002228:	20000d48 	.word	0x20000d48
 800222c:	20000d40 	.word	0x20000d40

08002230 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <vTaskSuspendAll+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	4b02      	ldr	r3, [pc, #8]	; (8002244 <vTaskSuspendAll+0x14>)
 800223c:	601a      	str	r2, [r3, #0]
}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000d64 	.word	0x20000d64

08002248 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002256:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <xTaskResumeAll+0xf8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <xTaskResumeAll+0x1a>
 800225e:	b672      	cpsid	i
 8002260:	e7fe      	b.n	8002260 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002262:	f7ff fc2b 	bl	8001abc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002266:	4b36      	ldr	r3, [pc, #216]	; (8002340 <xTaskResumeAll+0xf8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	1e5a      	subs	r2, r3, #1
 800226c:	4b34      	ldr	r3, [pc, #208]	; (8002340 <xTaskResumeAll+0xf8>)
 800226e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002270:	4b33      	ldr	r3, [pc, #204]	; (8002340 <xTaskResumeAll+0xf8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d15b      	bne.n	8002330 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002278:	4b32      	ldr	r3, [pc, #200]	; (8002344 <xTaskResumeAll+0xfc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d057      	beq.n	8002330 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002280:	e02f      	b.n	80022e2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002282:	4b31      	ldr	r3, [pc, #196]	; (8002348 <xTaskResumeAll+0x100>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	3318      	adds	r3, #24
 800228e:	0018      	movs	r0, r3
 8002290:	f7ff fb62 	bl	8001958 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3304      	adds	r3, #4
 8002298:	0018      	movs	r0, r3
 800229a:	f7ff fb5d 	bl	8001958 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a2:	4b2a      	ldr	r3, [pc, #168]	; (800234c <xTaskResumeAll+0x104>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d903      	bls.n	80022b2 <xTaskResumeAll+0x6a>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ae:	4b27      	ldr	r3, [pc, #156]	; (800234c <xTaskResumeAll+0x104>)
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b6:	0013      	movs	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	189b      	adds	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4a24      	ldr	r2, [pc, #144]	; (8002350 <xTaskResumeAll+0x108>)
 80022c0:	189a      	adds	r2, r3, r2
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3304      	adds	r3, #4
 80022c6:	0019      	movs	r1, r3
 80022c8:	0010      	movs	r0, r2
 80022ca:	f7ff faed 	bl	80018a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <xTaskResumeAll+0x10c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	429a      	cmp	r2, r3
 80022da:	d302      	bcc.n	80022e2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <xTaskResumeAll+0x110>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <xTaskResumeAll+0x100>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1cb      	bne.n	8002282 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80022f0:	f000 f9dc 	bl	80026ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80022f4:	4b19      	ldr	r3, [pc, #100]	; (800235c <xTaskResumeAll+0x114>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00f      	beq.n	8002320 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002300:	f000 f82e 	bl	8002360 <xTaskIncrementTick>
 8002304:	1e03      	subs	r3, r0, #0
 8002306:	d002      	beq.n	800230e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8002308:	4b13      	ldr	r3, [pc, #76]	; (8002358 <xTaskResumeAll+0x110>)
 800230a:	2201      	movs	r2, #1
 800230c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3b01      	subs	r3, #1
 8002312:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f2      	bne.n	8002300 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <xTaskResumeAll+0x114>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <xTaskResumeAll+0x110>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002328:	2301      	movs	r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800232c:	f7ff fbb6 	bl	8001a9c <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002330:	f7ff fbd6 	bl	8001ae0 <vPortExitCritical>

	return xAlreadyYielded;
 8002334:	68bb      	ldr	r3, [r7, #8]
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	b004      	add	sp, #16
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	20000d64 	.word	0x20000d64
 8002344:	20000d3c 	.word	0x20000d3c
 8002348:	20000cfc 	.word	0x20000cfc
 800234c:	20000d44 	.word	0x20000d44
 8002350:	20000c40 	.word	0x20000c40
 8002354:	20000c3c 	.word	0x20000c3c
 8002358:	20000d50 	.word	0x20000d50
 800235c:	20000d4c 	.word	0x20000d4c

08002360 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800236a:	4b4c      	ldr	r3, [pc, #304]	; (800249c <xTaskIncrementTick+0x13c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d000      	beq.n	8002374 <xTaskIncrementTick+0x14>
 8002372:	e083      	b.n	800247c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8002374:	4b4a      	ldr	r3, [pc, #296]	; (80024a0 <xTaskIncrementTick+0x140>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3301      	adds	r3, #1
 800237a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800237c:	4b48      	ldr	r3, [pc, #288]	; (80024a0 <xTaskIncrementTick+0x140>)
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d117      	bne.n	80023b8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8002388:	4b46      	ldr	r3, [pc, #280]	; (80024a4 <xTaskIncrementTick+0x144>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <xTaskIncrementTick+0x36>
 8002392:	b672      	cpsid	i
 8002394:	e7fe      	b.n	8002394 <xTaskIncrementTick+0x34>
 8002396:	4b43      	ldr	r3, [pc, #268]	; (80024a4 <xTaskIncrementTick+0x144>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	4b42      	ldr	r3, [pc, #264]	; (80024a8 <xTaskIncrementTick+0x148>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b40      	ldr	r3, [pc, #256]	; (80024a4 <xTaskIncrementTick+0x144>)
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	4b40      	ldr	r3, [pc, #256]	; (80024a8 <xTaskIncrementTick+0x148>)
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	4b40      	ldr	r3, [pc, #256]	; (80024ac <xTaskIncrementTick+0x14c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	4b3e      	ldr	r3, [pc, #248]	; (80024ac <xTaskIncrementTick+0x14c>)
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f000 f97a 	bl	80026ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80023b8:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <xTaskIncrementTick+0x150>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d34e      	bcc.n	8002460 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023c2:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <xTaskIncrementTick+0x144>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <xTaskIncrementTick+0x70>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <xTaskIncrementTick+0x72>
 80023d0:	2300      	movs	r3, #0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023d6:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <xTaskIncrementTick+0x150>)
 80023d8:	2201      	movs	r2, #1
 80023da:	4252      	negs	r2, r2
 80023dc:	601a      	str	r2, [r3, #0]
					break;
 80023de:	e03f      	b.n	8002460 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80023e0:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <xTaskIncrementTick+0x144>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d203      	bcs.n	8002400 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80023f8:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <xTaskIncrementTick+0x150>)
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
						break;
 80023fe:	e02f      	b.n	8002460 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	3304      	adds	r3, #4
 8002404:	0018      	movs	r0, r3
 8002406:	f7ff faa7 	bl	8001958 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	3318      	adds	r3, #24
 8002416:	0018      	movs	r0, r3
 8002418:	f7ff fa9e 	bl	8001958 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002420:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <xTaskIncrementTick+0x154>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d903      	bls.n	8002430 <xTaskIncrementTick+0xd0>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242c:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <xTaskIncrementTick+0x154>)
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002434:	0013      	movs	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	189b      	adds	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4a1e      	ldr	r2, [pc, #120]	; (80024b8 <xTaskIncrementTick+0x158>)
 800243e:	189a      	adds	r2, r3, r2
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	3304      	adds	r3, #4
 8002444:	0019      	movs	r1, r3
 8002446:	0010      	movs	r0, r2
 8002448:	f7ff fa2e 	bl	80018a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <xTaskIncrementTick+0x15c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	429a      	cmp	r2, r3
 8002458:	d3b3      	bcc.n	80023c2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800245a:	2301      	movs	r3, #1
 800245c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800245e:	e7b0      	b.n	80023c2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002460:	4b16      	ldr	r3, [pc, #88]	; (80024bc <xTaskIncrementTick+0x15c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002466:	4914      	ldr	r1, [pc, #80]	; (80024b8 <xTaskIncrementTick+0x158>)
 8002468:	0013      	movs	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	189b      	adds	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	585b      	ldr	r3, [r3, r1]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d907      	bls.n	8002486 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002476:	2301      	movs	r3, #1
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e004      	b.n	8002486 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800247c:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <xTaskIncrementTick+0x160>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <xTaskIncrementTick+0x160>)
 8002484:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <xTaskIncrementTick+0x164>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800248e:	2301      	movs	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002492:	697b      	ldr	r3, [r7, #20]
}
 8002494:	0018      	movs	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	b006      	add	sp, #24
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000d64 	.word	0x20000d64
 80024a0:	20000d40 	.word	0x20000d40
 80024a4:	20000cf4 	.word	0x20000cf4
 80024a8:	20000cf8 	.word	0x20000cf8
 80024ac:	20000d54 	.word	0x20000d54
 80024b0:	20000d5c 	.word	0x20000d5c
 80024b4:	20000d44 	.word	0x20000d44
 80024b8:	20000c40 	.word	0x20000c40
 80024bc:	20000c3c 	.word	0x20000c3c
 80024c0:	20000d4c 	.word	0x20000d4c
 80024c4:	20000d50 	.word	0x20000d50

080024c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80024ce:	4b22      	ldr	r3, [pc, #136]	; (8002558 <vTaskSwitchContext+0x90>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80024d6:	4b21      	ldr	r3, [pc, #132]	; (800255c <vTaskSwitchContext+0x94>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80024dc:	e037      	b.n	800254e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80024de:	4b1f      	ldr	r3, [pc, #124]	; (800255c <vTaskSwitchContext+0x94>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80024e4:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <vTaskSwitchContext+0x98>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	607b      	str	r3, [r7, #4]
 80024ea:	e007      	b.n	80024fc <vTaskSwitchContext+0x34>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <vTaskSwitchContext+0x2e>
 80024f2:	b672      	cpsid	i
 80024f4:	e7fe      	b.n	80024f4 <vTaskSwitchContext+0x2c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	4919      	ldr	r1, [pc, #100]	; (8002564 <vTaskSwitchContext+0x9c>)
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	0013      	movs	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	189b      	adds	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	585b      	ldr	r3, [r3, r1]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0ee      	beq.n	80024ec <vTaskSwitchContext+0x24>
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	0013      	movs	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	189b      	adds	r3, r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4a12      	ldr	r2, [pc, #72]	; (8002564 <vTaskSwitchContext+0x9c>)
 800251a:	189b      	adds	r3, r3, r2
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	3308      	adds	r3, #8
 8002530:	429a      	cmp	r2, r3
 8002532:	d104      	bne.n	800253e <vTaskSwitchContext+0x76>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <vTaskSwitchContext+0xa0>)
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <vTaskSwitchContext+0x98>)
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	601a      	str	r2, [r3, #0]
}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	46bd      	mov	sp, r7
 8002552:	b002      	add	sp, #8
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	20000d64 	.word	0x20000d64
 800255c:	20000d50 	.word	0x20000d50
 8002560:	20000d44 	.word	0x20000d44
 8002564:	20000c40 	.word	0x20000c40
 8002568:	20000c3c 	.word	0x20000c3c

0800256c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002574:	f000 f84e 	bl	8002614 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <prvIdleTask+0x1c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d9f9      	bls.n	8002574 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002580:	f7ff fa8c 	bl	8001a9c <vPortYield>
		prvCheckTasksWaitingTermination();
 8002584:	e7f6      	b.n	8002574 <prvIdleTask+0x8>
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	20000c40 	.word	0x20000c40

0800258c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002592:	2300      	movs	r3, #0
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	e00c      	b.n	80025b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	0013      	movs	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	189b      	adds	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <prvInitialiseTaskLists+0x68>)
 80025a4:	189b      	adds	r3, r3, r2
 80025a6:	0018      	movs	r0, r3
 80025a8:	f7ff f955 	bl	8001856 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3301      	adds	r3, #1
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b06      	cmp	r3, #6
 80025b6:	d9ef      	bls.n	8002598 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <prvInitialiseTaskLists+0x6c>)
 80025ba:	0018      	movs	r0, r3
 80025bc:	f7ff f94b 	bl	8001856 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80025c0:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <prvInitialiseTaskLists+0x70>)
 80025c2:	0018      	movs	r0, r3
 80025c4:	f7ff f947 	bl	8001856 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80025c8:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <prvInitialiseTaskLists+0x74>)
 80025ca:	0018      	movs	r0, r3
 80025cc:	f7ff f943 	bl	8001856 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <prvInitialiseTaskLists+0x78>)
 80025d2:	0018      	movs	r0, r3
 80025d4:	f7ff f93f 	bl	8001856 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <prvInitialiseTaskLists+0x7c>)
 80025da:	0018      	movs	r0, r3
 80025dc:	f7ff f93b 	bl	8001856 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <prvInitialiseTaskLists+0x80>)
 80025e2:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <prvInitialiseTaskLists+0x6c>)
 80025e4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <prvInitialiseTaskLists+0x84>)
 80025e8:	4a04      	ldr	r2, [pc, #16]	; (80025fc <prvInitialiseTaskLists+0x70>)
 80025ea:	601a      	str	r2, [r3, #0]
}
 80025ec:	46c0      	nop			; (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b002      	add	sp, #8
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000c40 	.word	0x20000c40
 80025f8:	20000ccc 	.word	0x20000ccc
 80025fc:	20000ce0 	.word	0x20000ce0
 8002600:	20000cfc 	.word	0x20000cfc
 8002604:	20000d10 	.word	0x20000d10
 8002608:	20000d28 	.word	0x20000d28
 800260c:	20000cf4 	.word	0x20000cf4
 8002610:	20000cf8 	.word	0x20000cf8

08002614 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800261a:	e027      	b.n	800266c <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
 800261c:	f7ff fe08 	bl	8002230 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002620:	4b16      	ldr	r3, [pc, #88]	; (800267c <prvCheckTasksWaitingTermination+0x68>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	425a      	negs	r2, r3
 8002626:	4153      	adcs	r3, r2
 8002628:	b2db      	uxtb	r3, r3
 800262a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800262c:	f7ff fe0c 	bl	8002248 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d11a      	bne.n	800266c <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002636:	f7ff fa41 	bl	8001abc <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <prvCheckTasksWaitingTermination+0x68>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	3304      	adds	r3, #4
 8002646:	0018      	movs	r0, r3
 8002648:	f7ff f986 	bl	8001958 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <prvCheckTasksWaitingTermination+0x6c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	1e5a      	subs	r2, r3, #1
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <prvCheckTasksWaitingTermination+0x6c>)
 8002654:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <prvCheckTasksWaitingTermination+0x70>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	1e5a      	subs	r2, r3, #1
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <prvCheckTasksWaitingTermination+0x70>)
 800265e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8002660:	f7ff fa3e 	bl	8001ae0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	0018      	movs	r0, r3
 8002668:	f000 f80e 	bl	8002688 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <prvCheckTasksWaitingTermination+0x70>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1d3      	bne.n	800261c <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b002      	add	sp, #8
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000d10 	.word	0x20000d10
 8002680:	20000d3c 	.word	0x20000d3c
 8002684:	20000d24 	.word	0x20000d24

08002688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	0018      	movs	r0, r3
 8002696:	f7ff fb49 	bl	8001d2c <vPortFree>
			vPortFree( pxTCB );
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	0018      	movs	r0, r3
 800269e:	f7ff fb45 	bl	8001d2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b002      	add	sp, #8
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026b2:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <prvResetNextTaskUnblockTime+0x40>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <prvResetNextTaskUnblockTime+0x14>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <prvResetNextTaskUnblockTime+0x16>
 80026c0:	2300      	movs	r3, #0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d004      	beq.n	80026d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <prvResetNextTaskUnblockTime+0x44>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	4252      	negs	r2, r2
 80026cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80026ce:	e008      	b.n	80026e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <prvResetNextTaskUnblockTime+0x40>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <prvResetNextTaskUnblockTime+0x44>)
 80026e0:	601a      	str	r2, [r3, #0]
}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b002      	add	sp, #8
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	20000cf4 	.word	0x20000cf4
 80026f0:	20000d5c 	.word	0x20000d5c

080026f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <xTaskGetSchedulerState+0x30>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d102      	bne.n	8002708 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002702:	2301      	movs	r3, #1
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	e008      	b.n	800271a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002708:	4b07      	ldr	r3, [pc, #28]	; (8002728 <xTaskGetSchedulerState+0x34>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002710:	2302      	movs	r3, #2
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	e001      	b.n	800271a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800271a:	687b      	ldr	r3, [r7, #4]
	}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	b002      	add	sp, #8
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000d48 	.word	0x20000d48
 8002728:	20000d64 	.word	0x20000d64

0800272c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002736:	4b21      	ldr	r3, [pc, #132]	; (80027bc <prvAddCurrentTaskToDelayedList+0x90>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800273c:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3304      	adds	r3, #4
 8002742:	0018      	movs	r0, r3
 8002744:	f7ff f908 	bl	8001958 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3301      	adds	r3, #1
 800274c:	d10b      	bne.n	8002766 <prvAddCurrentTaskToDelayedList+0x3a>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002754:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	1d1a      	adds	r2, r3, #4
 800275a:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800275c:	0011      	movs	r1, r2
 800275e:	0018      	movs	r0, r3
 8002760:	f7ff f8a2 	bl	80018a8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002764:	e026      	b.n	80027b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	18d3      	adds	r3, r2, r3
 800276c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	429a      	cmp	r2, r3
 800277c:	d209      	bcs.n	8002792 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3304      	adds	r3, #4
 8002788:	0019      	movs	r1, r3
 800278a:	0010      	movs	r0, r2
 800278c:	f7ff f8ae 	bl	80018ec <vListInsert>
}
 8002790:	e010      	b.n	80027b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3304      	adds	r3, #4
 800279c:	0019      	movs	r1, r3
 800279e:	0010      	movs	r0, r2
 80027a0:	f7ff f8a4 	bl	80018ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80027a4:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d202      	bcs.n	80027b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	601a      	str	r2, [r3, #0]
}
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b004      	add	sp, #16
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000d40 	.word	0x20000d40
 80027c0:	20000c3c 	.word	0x20000c3c
 80027c4:	20000d28 	.word	0x20000d28
 80027c8:	20000cf8 	.word	0x20000cf8
 80027cc:	20000cf4 	.word	0x20000cf4
 80027d0:	20000d5c 	.word	0x20000d5c

080027d4 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027da:	f7fd fd21 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027de:	f000 f819 	bl	8002814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027e2:	f000 f8ad 	bl	8002940 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80027e6:	f000 f875 	bl	80028d4 <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	4a07      	ldr	r2, [pc, #28]	; (800280c <main+0x38>)
 80027ee:	ca13      	ldmia	r2!, {r0, r1, r4}
 80027f0:	c313      	stmia	r3!, {r0, r1, r4}
 80027f2:	ca03      	ldmia	r2!, {r0, r1}
 80027f4:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	2100      	movs	r1, #0
 80027fa:	0018      	movs	r0, r3
 80027fc:	f7fe ffe3 	bl	80017c6 <osThreadCreate>
 8002800:	0002      	movs	r2, r0
 8002802:	4b03      	ldr	r3, [pc, #12]	; (8002810 <main+0x3c>)
 8002804:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8002806:	f7fe ffd6 	bl	80017b6 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800280a:	e7fe      	b.n	800280a <main+0x36>
 800280c:	08002ce0 	.word	0x08002ce0
 8002810:	20000d6c 	.word	0x20000d6c

08002814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b090      	sub	sp, #64	; 0x40
 8002818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800281a:	2310      	movs	r3, #16
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	2202      	movs	r2, #2
 8002820:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002822:	2310      	movs	r3, #16
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	2201      	movs	r2, #1
 8002828:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800282a:	2310      	movs	r3, #16
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	2210      	movs	r2, #16
 8002830:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002832:	2310      	movs	r3, #16
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	2202      	movs	r2, #2
 8002838:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800283a:	2310      	movs	r3, #16
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	2200      	movs	r2, #0
 8002840:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002842:	2310      	movs	r3, #16
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	22a0      	movs	r2, #160	; 0xa0
 8002848:	0392      	lsls	r2, r2, #14
 800284a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800284c:	2310      	movs	r3, #16
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	2200      	movs	r2, #0
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002854:	2310      	movs	r3, #16
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	0018      	movs	r0, r3
 800285a:	f7fd ffb7 	bl	80007cc <HAL_RCC_OscConfig>
 800285e:	1e03      	subs	r3, r0, #0
 8002860:	d004      	beq.n	800286c <SystemClock_Config+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002862:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <SystemClock_Config+0xbc>)
 8002864:	21b7      	movs	r1, #183	; 0xb7
 8002866:	0018      	movs	r0, r3
 8002868:	f000 f8fe 	bl	8002a68 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800286c:	003b      	movs	r3, r7
 800286e:	2207      	movs	r2, #7
 8002870:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002872:	003b      	movs	r3, r7
 8002874:	2202      	movs	r2, #2
 8002876:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002878:	003b      	movs	r3, r7
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800287e:	003b      	movs	r3, r7
 8002880:	2200      	movs	r2, #0
 8002882:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002884:	003b      	movs	r3, r7
 8002886:	2101      	movs	r1, #1
 8002888:	0018      	movs	r0, r3
 800288a:	f7fe fa93 	bl	8000db4 <HAL_RCC_ClockConfig>
 800288e:	1e03      	subs	r3, r0, #0
 8002890:	d004      	beq.n	800289c <SystemClock_Config+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <SystemClock_Config+0xbc>)
 8002894:	21c4      	movs	r1, #196	; 0xc4
 8002896:	0018      	movs	r0, r3
 8002898:	f000 f8e6 	bl	8002a68 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800289c:	f7fe fbd0 	bl	8001040 <HAL_RCC_GetHCLKFreq>
 80028a0:	0002      	movs	r2, r0
 80028a2:	23fa      	movs	r3, #250	; 0xfa
 80028a4:	0099      	lsls	r1, r3, #2
 80028a6:	0010      	movs	r0, r2
 80028a8:	f7fd fc2e 	bl	8000108 <__udivsi3>
 80028ac:	0003      	movs	r3, r0
 80028ae:	0018      	movs	r0, r3
 80028b0:	f7fd fda4 	bl	80003fc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80028b4:	2004      	movs	r0, #4
 80028b6:	f7fd fdaf 	bl	8000418 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 80028ba:	2301      	movs	r3, #1
 80028bc:	425b      	negs	r3, r3
 80028be:	2200      	movs	r2, #0
 80028c0:	2103      	movs	r1, #3
 80028c2:	0018      	movs	r0, r3
 80028c4:	f7fd fd84 	bl	80003d0 <HAL_NVIC_SetPriority>
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b010      	add	sp, #64	; 0x40
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	08002cf4 	.word	0x08002cf4

080028d4 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80028d8:	4b16      	ldr	r3, [pc, #88]	; (8002934 <MX_USART2_UART_Init+0x60>)
 80028da:	4a17      	ldr	r2, [pc, #92]	; (8002938 <MX_USART2_UART_Init+0x64>)
 80028dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <MX_USART2_UART_Init+0x60>)
 80028e0:	22e1      	movs	r2, #225	; 0xe1
 80028e2:	0252      	lsls	r2, r2, #9
 80028e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028e6:	4b13      	ldr	r3, [pc, #76]	; (8002934 <MX_USART2_UART_Init+0x60>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <MX_USART2_UART_Init+0x60>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <MX_USART2_UART_Init+0x60>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <MX_USART2_UART_Init+0x60>)
 80028fa:	220c      	movs	r2, #12
 80028fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028fe:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <MX_USART2_UART_Init+0x60>)
 8002900:	2200      	movs	r2, #0
 8002902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <MX_USART2_UART_Init+0x60>)
 8002906:	2200      	movs	r2, #0
 8002908:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <MX_USART2_UART_Init+0x60>)
 800290c:	2200      	movs	r2, #0
 800290e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <MX_USART2_UART_Init+0x60>)
 8002912:	2200      	movs	r2, #0
 8002914:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <MX_USART2_UART_Init+0x60>)
 8002918:	0018      	movs	r0, r3
 800291a:	f7fe fbb1 	bl	8001080 <HAL_UART_Init>
 800291e:	1e03      	subs	r3, r0, #0
 8002920:	d004      	beq.n	800292c <MX_USART2_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <MX_USART2_UART_Init+0x68>)
 8002924:	21e3      	movs	r1, #227	; 0xe3
 8002926:	0018      	movs	r0, r3
 8002928:	f000 f89e 	bl	8002a68 <_Error_Handler>
  }

}
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	20000d70 	.word	0x20000d70
 8002938:	40004400 	.word	0x40004400
 800293c:	08002cf4 	.word	0x08002cf4

08002940 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002946:	4b30      	ldr	r3, [pc, #192]	; (8002a08 <MX_GPIO_Init+0xc8>)
 8002948:	4a2f      	ldr	r2, [pc, #188]	; (8002a08 <MX_GPIO_Init+0xc8>)
 800294a:	6952      	ldr	r2, [r2, #20]
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	0309      	lsls	r1, r1, #12
 8002950:	430a      	orrs	r2, r1
 8002952:	615a      	str	r2, [r3, #20]
 8002954:	4b2c      	ldr	r3, [pc, #176]	; (8002a08 <MX_GPIO_Init+0xc8>)
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	031b      	lsls	r3, r3, #12
 800295c:	4013      	ands	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002962:	4b29      	ldr	r3, [pc, #164]	; (8002a08 <MX_GPIO_Init+0xc8>)
 8002964:	4a28      	ldr	r2, [pc, #160]	; (8002a08 <MX_GPIO_Init+0xc8>)
 8002966:	6952      	ldr	r2, [r2, #20]
 8002968:	2180      	movs	r1, #128	; 0x80
 800296a:	03c9      	lsls	r1, r1, #15
 800296c:	430a      	orrs	r2, r1
 800296e:	615a      	str	r2, [r3, #20]
 8002970:	4b25      	ldr	r3, [pc, #148]	; (8002a08 <MX_GPIO_Init+0xc8>)
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	03db      	lsls	r3, r3, #15
 8002978:	4013      	ands	r3, r2
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800297e:	4b22      	ldr	r3, [pc, #136]	; (8002a08 <MX_GPIO_Init+0xc8>)
 8002980:	4a21      	ldr	r2, [pc, #132]	; (8002a08 <MX_GPIO_Init+0xc8>)
 8002982:	6952      	ldr	r2, [r2, #20]
 8002984:	2180      	movs	r1, #128	; 0x80
 8002986:	0289      	lsls	r1, r1, #10
 8002988:	430a      	orrs	r2, r1
 800298a:	615a      	str	r2, [r3, #20]
 800298c:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <MX_GPIO_Init+0xc8>)
 800298e:	695a      	ldr	r2, [r3, #20]
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	029b      	lsls	r3, r3, #10
 8002994:	4013      	ands	r3, r2
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800299a:	2390      	movs	r3, #144	; 0x90
 800299c:	05db      	lsls	r3, r3, #23
 800299e:	2200      	movs	r2, #0
 80029a0:	2120      	movs	r1, #32
 80029a2:	0018      	movs	r0, r3
 80029a4:	f7fd fee3 	bl	800076e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029a8:	230c      	movs	r3, #12
 80029aa:	18fb      	adds	r3, r7, r3
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	0192      	lsls	r2, r2, #6
 80029b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029b2:	230c      	movs	r3, #12
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	4a15      	ldr	r2, [pc, #84]	; (8002a0c <MX_GPIO_Init+0xcc>)
 80029b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	230c      	movs	r3, #12
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029c2:	230c      	movs	r3, #12
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <MX_GPIO_Init+0xd0>)
 80029c8:	0019      	movs	r1, r3
 80029ca:	0010      	movs	r0, r2
 80029cc:	f7fd fd3e 	bl	800044c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80029d0:	230c      	movs	r3, #12
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	2220      	movs	r2, #32
 80029d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d8:	230c      	movs	r3, #12
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	2201      	movs	r2, #1
 80029de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	230c      	movs	r3, #12
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e8:	230c      	movs	r3, #12
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	2200      	movs	r2, #0
 80029ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80029f0:	230c      	movs	r3, #12
 80029f2:	18fa      	adds	r2, r7, r3
 80029f4:	2390      	movs	r3, #144	; 0x90
 80029f6:	05db      	lsls	r3, r3, #23
 80029f8:	0011      	movs	r1, r2
 80029fa:	0018      	movs	r0, r3
 80029fc:	f7fd fd26 	bl	800044c <HAL_GPIO_Init>

}
 8002a00:	46c0      	nop			; (mov r8, r8)
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b008      	add	sp, #32
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	10210000 	.word	0x10210000
 8002a10:	48000800 	.word	0x48000800

08002a14 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	019b      	lsls	r3, r3, #6
 8002a20:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <StartDefaultTask+0x48>)
 8002a22:	0019      	movs	r1, r3
 8002a24:	0010      	movs	r0, r2
 8002a26:	f7fd fe85 	bl	8000734 <HAL_GPIO_ReadPin>
 8002a2a:	1e03      	subs	r3, r0, #0
 8002a2c:	d111      	bne.n	8002a52 <StartDefaultTask+0x3e>
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002a2e:	2390      	movs	r3, #144	; 0x90
 8002a30:	05db      	lsls	r3, r3, #23
 8002a32:	2120      	movs	r1, #32
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7fd feb7 	bl	80007a8 <HAL_GPIO_TogglePin>
		  HAL_UART_Transmit(&huart2, (unsigned char *)"BUTTON PRESSED\r\n", sizeof("BUTTON RELEASED\r\n"), 1000);
 8002a3a:	23fa      	movs	r3, #250	; 0xfa
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4908      	ldr	r1, [pc, #32]	; (8002a60 <StartDefaultTask+0x4c>)
 8002a40:	4808      	ldr	r0, [pc, #32]	; (8002a64 <StartDefaultTask+0x50>)
 8002a42:	2212      	movs	r2, #18
 8002a44:	f7fe fb74 	bl	8001130 <HAL_UART_Transmit>
		  osDelay(400);
 8002a48:	23c8      	movs	r3, #200	; 0xc8
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7fe fee2 	bl	8001816 <osDelay>

	  }
	 osDelay(100);
 8002a52:	2064      	movs	r0, #100	; 0x64
 8002a54:	f7fe fedf 	bl	8001816 <osDelay>
	 if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8002a58:	e7e0      	b.n	8002a1c <StartDefaultTask+0x8>
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	48000800 	.word	0x48000800
 8002a60:	08002d04 	.word	0x08002d04
 8002a64:	20000d70 	.word	0x20000d70

08002a68 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002a72:	e7fe      	b.n	8002a72 <_Error_Handler+0xa>

08002a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7a:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_MspInit+0x6c>)
 8002a7c:	4a18      	ldr	r2, [pc, #96]	; (8002ae0 <HAL_MspInit+0x6c>)
 8002a7e:	6992      	ldr	r2, [r2, #24]
 8002a80:	2101      	movs	r1, #1
 8002a82:	430a      	orrs	r2, r1
 8002a84:	619a      	str	r2, [r3, #24]
 8002a86:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <HAL_MspInit+0x6c>)
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	607b      	str	r3, [r7, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a92:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <HAL_MspInit+0x6c>)
 8002a94:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <HAL_MspInit+0x6c>)
 8002a96:	69d2      	ldr	r2, [r2, #28]
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	0549      	lsls	r1, r1, #21
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	61da      	str	r2, [r3, #28]
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <HAL_MspInit+0x6c>)
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	055b      	lsls	r3, r3, #21
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002aae:	2305      	movs	r3, #5
 8002ab0:	425b      	negs	r3, r3
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f7fd fc8a 	bl	80003d0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002abc:	2302      	movs	r3, #2
 8002abe:	425b      	negs	r3, r3
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2103      	movs	r1, #3
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7fd fc83 	bl	80003d0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 8002aca:	2301      	movs	r3, #1
 8002acc:	425b      	negs	r3, r3
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2103      	movs	r1, #3
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f7fd fc7c 	bl	80003d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b002      	add	sp, #8
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <HAL_UART_MspInit+0x70>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d129      	bne.n	8002b4a <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002af6:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <HAL_UART_MspInit+0x74>)
 8002af8:	4a17      	ldr	r2, [pc, #92]	; (8002b58 <HAL_UART_MspInit+0x74>)
 8002afa:	69d2      	ldr	r2, [r2, #28]
 8002afc:	2180      	movs	r1, #128	; 0x80
 8002afe:	0289      	lsls	r1, r1, #10
 8002b00:	430a      	orrs	r2, r1
 8002b02:	61da      	str	r2, [r3, #28]
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <HAL_UART_MspInit+0x74>)
 8002b06:	69da      	ldr	r2, [r3, #28]
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	029b      	lsls	r3, r3, #10
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b12:	230c      	movs	r3, #12
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	220c      	movs	r2, #12
 8002b18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	230c      	movs	r3, #12
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	2202      	movs	r2, #2
 8002b20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	230c      	movs	r3, #12
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	230c      	movs	r3, #12
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002b32:	230c      	movs	r3, #12
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	2201      	movs	r2, #1
 8002b38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3a:	230c      	movs	r3, #12
 8002b3c:	18fa      	adds	r2, r7, r3
 8002b3e:	2390      	movs	r3, #144	; 0x90
 8002b40:	05db      	lsls	r3, r3, #23
 8002b42:	0011      	movs	r1, r2
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7fd fc81 	bl	800044c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b008      	add	sp, #32
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	40004400 	.word	0x40004400
 8002b58:	40021000 	.word	0x40021000

08002b5c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b60:	f7fd fb8e 	bl	8000280 <HAL_IncTick>
  osSystickHandler();
 8002b64:	f7fe fe6b 	bl	800183e <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002b74:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <SystemInit+0x70>)
 8002b76:	4a1a      	ldr	r2, [pc, #104]	; (8002be0 <SystemInit+0x70>)
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002b80:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <SystemInit+0x70>)
 8002b82:	4a17      	ldr	r2, [pc, #92]	; (8002be0 <SystemInit+0x70>)
 8002b84:	6852      	ldr	r2, [r2, #4]
 8002b86:	4917      	ldr	r1, [pc, #92]	; (8002be4 <SystemInit+0x74>)
 8002b88:	400a      	ands	r2, r1
 8002b8a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <SystemInit+0x70>)
 8002b8e:	4a14      	ldr	r2, [pc, #80]	; (8002be0 <SystemInit+0x70>)
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	4915      	ldr	r1, [pc, #84]	; (8002be8 <SystemInit+0x78>)
 8002b94:	400a      	ands	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <SystemInit+0x70>)
 8002b9a:	4a11      	ldr	r2, [pc, #68]	; (8002be0 <SystemInit+0x70>)
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	4913      	ldr	r1, [pc, #76]	; (8002bec <SystemInit+0x7c>)
 8002ba0:	400a      	ands	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <SystemInit+0x70>)
 8002ba6:	4a0e      	ldr	r2, [pc, #56]	; (8002be0 <SystemInit+0x70>)
 8002ba8:	6852      	ldr	r2, [r2, #4]
 8002baa:	4911      	ldr	r1, [pc, #68]	; (8002bf0 <SystemInit+0x80>)
 8002bac:	400a      	ands	r2, r1
 8002bae:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <SystemInit+0x70>)
 8002bb2:	4a0b      	ldr	r2, [pc, #44]	; (8002be0 <SystemInit+0x70>)
 8002bb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bb6:	210f      	movs	r1, #15
 8002bb8:	438a      	bics	r2, r1
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8002bbc:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <SystemInit+0x70>)
 8002bbe:	4a08      	ldr	r2, [pc, #32]	; (8002be0 <SystemInit+0x70>)
 8002bc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bc2:	490c      	ldr	r1, [pc, #48]	; (8002bf4 <SystemInit+0x84>)
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <SystemInit+0x70>)
 8002bca:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <SystemInit+0x70>)
 8002bcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bce:	2101      	movs	r1, #1
 8002bd0:	438a      	bics	r2, r1
 8002bd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002bd4:	4b02      	ldr	r3, [pc, #8]	; (8002be0 <SystemInit+0x70>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	609a      	str	r2, [r3, #8]

}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000
 8002be4:	08ffb80c 	.word	0x08ffb80c
 8002be8:	fef6ffff 	.word	0xfef6ffff
 8002bec:	fffbffff 	.word	0xfffbffff
 8002bf0:	ffc0ffff 	.word	0xffc0ffff
 8002bf4:	fffffeec 	.word	0xfffffeec

08002bf8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bf8:	480d      	ldr	r0, [pc, #52]	; (8002c30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bfc:	480d      	ldr	r0, [pc, #52]	; (8002c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bfe:	490e      	ldr	r1, [pc, #56]	; (8002c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c00:	4a0e      	ldr	r2, [pc, #56]	; (8002c3c <LoopForever+0xe>)
  movs r3, #0
 8002c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c04:	e002      	b.n	8002c0c <LoopCopyDataInit>

08002c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0a:	3304      	adds	r3, #4

08002c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c10:	d3f9      	bcc.n	8002c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c12:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c14:	4c0b      	ldr	r4, [pc, #44]	; (8002c44 <LoopForever+0x16>)
  movs r3, #0
 8002c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c18:	e001      	b.n	8002c1e <LoopFillZerobss>

08002c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c1c:	3204      	adds	r2, #4

08002c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c20:	d3fb      	bcc.n	8002c1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002c22:	f7ff ffa5 	bl	8002b70 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002c26:	f000 f811 	bl	8002c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c2a:	f7ff fdd3 	bl	80027d4 <main>

08002c2e <LoopForever>:

LoopForever:
    b LoopForever
 8002c2e:	e7fe      	b.n	8002c2e <LoopForever>
  ldr   r0, =_estack
 8002c30:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c38:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8002c3c:	08002d38 	.word	0x08002d38
  ldr r2, =_sbss
 8002c40:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8002c44:	20000de0 	.word	0x20000de0

08002c48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c48:	e7fe      	b.n	8002c48 <ADC1_IRQHandler>
	...

08002c4c <__libc_init_array>:
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	2600      	movs	r6, #0
 8002c50:	4d0c      	ldr	r5, [pc, #48]	; (8002c84 <__libc_init_array+0x38>)
 8002c52:	4c0d      	ldr	r4, [pc, #52]	; (8002c88 <__libc_init_array+0x3c>)
 8002c54:	1b64      	subs	r4, r4, r5
 8002c56:	10a4      	asrs	r4, r4, #2
 8002c58:	42a6      	cmp	r6, r4
 8002c5a:	d109      	bne.n	8002c70 <__libc_init_array+0x24>
 8002c5c:	2600      	movs	r6, #0
 8002c5e:	f000 f819 	bl	8002c94 <_init>
 8002c62:	4d0a      	ldr	r5, [pc, #40]	; (8002c8c <__libc_init_array+0x40>)
 8002c64:	4c0a      	ldr	r4, [pc, #40]	; (8002c90 <__libc_init_array+0x44>)
 8002c66:	1b64      	subs	r4, r4, r5
 8002c68:	10a4      	asrs	r4, r4, #2
 8002c6a:	42a6      	cmp	r6, r4
 8002c6c:	d105      	bne.n	8002c7a <__libc_init_array+0x2e>
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
 8002c70:	00b3      	lsls	r3, r6, #2
 8002c72:	58eb      	ldr	r3, [r5, r3]
 8002c74:	4798      	blx	r3
 8002c76:	3601      	adds	r6, #1
 8002c78:	e7ee      	b.n	8002c58 <__libc_init_array+0xc>
 8002c7a:	00b3      	lsls	r3, r6, #2
 8002c7c:	58eb      	ldr	r3, [r5, r3]
 8002c7e:	4798      	blx	r3
 8002c80:	3601      	adds	r6, #1
 8002c82:	e7f2      	b.n	8002c6a <__libc_init_array+0x1e>
 8002c84:	08002d30 	.word	0x08002d30
 8002c88:	08002d30 	.word	0x08002d30
 8002c8c:	08002d30 	.word	0x08002d30
 8002c90:	08002d34 	.word	0x08002d34

08002c94 <_init>:
 8002c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c9a:	bc08      	pop	{r3}
 8002c9c:	469e      	mov	lr, r3
 8002c9e:	4770      	bx	lr

08002ca0 <_fini>:
 8002ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca6:	bc08      	pop	{r3}
 8002ca8:	469e      	mov	lr, r3
 8002caa:	4770      	bx	lr
